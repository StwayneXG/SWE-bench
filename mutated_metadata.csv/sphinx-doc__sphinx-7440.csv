file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sphinx/domains/std.py,make_glossary_term,create_or_register_glossary_term,276,316,"def make_glossary_term(env: 'BuildEnvironment', textnodes: Iterable[Node], index_key: str, source: str, lineno: int, node_id: str=None, document: nodes.document=None) -> nodes.term:
    term = nodes.term('', '', *textnodes)
    term.source = source
    term.line = lineno
    termtext = term.astext()
    if node_id:
        term['ids'].append(node_id)
    elif document:
        node_id = make_id(env, document, 'term', termtext)
        term['ids'].append(node_id)
        document.note_explicit_target(term)
    else:
        warnings.warn('make_glossary_term() expects document is passed as an argument.', RemovedInSphinx40Warning)
        gloss_entries = env.temp_data.setdefault('gloss_entries', set())
        node_id = nodes.make_id('term-' + termtext)
        if node_id == 'term':
            node_id = 'term-%d' % env.new_serialno('glossary')
        while node_id in gloss_entries:
            node_id = 'term-%d' % env.new_serialno('glossary')
        gloss_entries.add(node_id)
        term['ids'].append(node_id)
    std = cast(StandardDomain, env.get_domain('std'))
    std.note_object('term', termtext.lower(), node_id, location=term)
    indexnode = addnodes.index()
    indexnode['entries'] = [('single', termtext, node_id, 'main', index_key)]
    indexnode.source, indexnode.line = (term.source, term.line)
    term.append(indexnode)
    return term","def create_or_register_glossary_term(env: 'BuildEnvironment', textnodes: Iterable[Node], index_key: str, source: str, lineno: int, node_id: str=None, document: nodes.document=None) -> nodes.term:
    term = nodes.term('', '', *textnodes)
    term.source = source
    term.line = lineno
    termtext = term.astext()
    if node_id:
        term['ids'].append(node_id)
    elif document:
        node_id = make_id(env, document, 'term', termtext)
        term['ids'].append(node_id)
        document.note_explicit_target(term)
    else:
        warnings.warn('make_glossary_term() expects document is passed as an argument.', RemovedInSphinx40Warning)
        gloss_entries = env.temp_data.setdefault('gloss_entries', set())
        node_id = nodes.make_id('term-' + termtext)
        if node_id == 'term':
            node_id = 'term-%d' % env.new_serialno('glossary')
        while node_id in gloss_entries:
            node_id = 'term-%d' % env.new_serialno('glossary')
        gloss_entries.add(node_id)
        term['ids'].append(node_id)
    std = cast(StandardDomain, env.get_domain('std'))
    std.note_object('term', termtext.lower(), node_id, location=term)
    indexnode = addnodes.index()
    indexnode['entries'] = [('single', termtext, node_id, 'main', index_key)]
    indexnode.source, indexnode.line = (term.source, term.line)
    term.append(indexnode)
    return term","[{""var"": ""termtext"", ""rename"": ""glossary_term_text""}, {""var"": ""std"", ""rename"": ""standard_domain""}, {""var"": ""indexnode"", ""rename"": ""glossary_index_node""}, {""var"": ""term"", ""rename"": ""glossary_term_node""}, {""var"": ""gloss_entries"", ""rename"": ""temporary_glossary_ids""}]"
