file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/forms/models.py,modelform_factory,generate_model_form_class,563,648,"def modelform_factory(model, form=ModelForm, fields=None, exclude=None, formfield_callback=None, widgets=None, localized_fields=None, labels=None, help_texts=None, error_messages=None, field_classes=None):
    """"""
    Return a ModelForm containing form fields for the given model. You can
    optionally pass a `form` argument to use as a starting point for
    constructing the ModelForm.

    ``fields`` is an optional list of field names. If provided, include only
    the named fields in the returned fields. If omitted or '__all__', use all
    fields.

    ``exclude`` is an optional list of field names. If provided, exclude the
    named fields from the returned fields, even if they are listed in the
    ``fields`` argument.

    ``widgets`` is a dictionary of model field names mapped to a widget.

    ``localized_fields`` is a list of names of fields which should be localized.

    ``formfield_callback`` is a callable that takes a model field and returns
    a form field.

    ``labels`` is a dictionary of model field names mapped to a label.

    ``help_texts`` is a dictionary of model field names mapped to a help text.

    ``error_messages`` is a dictionary of model field names mapped to a
    dictionary of error messages.

    ``field_classes`` is a dictionary of model field names mapped to a form
    field class.
    """"""
    attrs = {'model': model}
    if fields is not None:
        attrs['fields'] = fields
    if exclude is not None:
        attrs['exclude'] = exclude
    if widgets is not None:
        attrs['widgets'] = widgets
    if localized_fields is not None:
        attrs['localized_fields'] = localized_fields
    if labels is not None:
        attrs['labels'] = labels
    if help_texts is not None:
        attrs['help_texts'] = help_texts
    if error_messages is not None:
        attrs['error_messages'] = error_messages
    if field_classes is not None:
        attrs['field_classes'] = field_classes
    bases = (form.Meta,) if hasattr(form, 'Meta') else ()
    Meta = type('Meta', bases, attrs)
    if formfield_callback:
        Meta.formfield_callback = staticmethod(formfield_callback)
    class_name = model.__name__ + 'Form'
    form_class_attrs = {'Meta': Meta, 'formfield_callback': formfield_callback}
    if getattr(Meta, 'fields', None) is None and getattr(Meta, 'exclude', None) is None:
        raise ImproperlyConfigured(""Calling modelform_factory without defining 'fields' or 'exclude' explicitly is prohibited."")
    return type(form)(class_name, (form,), form_class_attrs)","def generate_model_form_class(model, form=ModelForm, fields=None, exclude=None, formfield_callback=None, widgets=None, localized_fields=None, labels=None, help_texts=None, error_messages=None, field_classes=None):
    """"""
    Return a ModelForm containing form fields for the given model. You can
    optionally pass a `form` argument to use as a starting point for
    constructing the ModelForm.

    ``fields`` is an optional list of field names. If provided, include only
    the named fields in the returned fields. If omitted or '__all__', use all
    fields.

    ``exclude`` is an optional list of field names. If provided, exclude the
    named fields from the returned fields, even if they are listed in the
    ``fields`` argument.

    ``widgets`` is a dictionary of model field names mapped to a widget.

    ``localized_fields`` is a list of names of fields which should be localized.

    ``formfield_callback`` is a callable that takes a model field and returns
    a form field.

    ``labels`` is a dictionary of model field names mapped to a label.

    ``help_texts`` is a dictionary of model field names mapped to a help text.

    ``error_messages`` is a dictionary of model field names mapped to a
    dictionary of error messages.

    ``field_classes`` is a dictionary of model field names mapped to a form
    field class.
    """"""
    attrs = {'model': model}
    if fields is not None:
        attrs['fields'] = fields
    if exclude is not None:
        attrs['exclude'] = exclude
    if widgets is not None:
        attrs['widgets'] = widgets
    if localized_fields is not None:
        attrs['localized_fields'] = localized_fields
    if labels is not None:
        attrs['labels'] = labels
    if help_texts is not None:
        attrs['help_texts'] = help_texts
    if error_messages is not None:
        attrs['error_messages'] = error_messages
    if field_classes is not None:
        attrs['field_classes'] = field_classes
    bases = (form.Meta,) if hasattr(form, 'Meta') else ()
    Meta = type('Meta', bases, attrs)
    if formfield_callback:
        Meta.formfield_callback = staticmethod(formfield_callback)
    class_name = model.__name__ + 'Form'
    form_class_attrs = {'Meta': Meta, 'formfield_callback': formfield_callback}
    if getattr(Meta, 'fields', None) is None and getattr(Meta, 'exclude', None) is None:
        raise ImproperlyConfigured(""Calling modelform_factory without defining 'fields' or 'exclude' explicitly is prohibited."")
    return type(form)(class_name, (form,), form_class_attrs)","[{""var"": ""form_class_attrs"", ""rename"": ""model_form_class_attributes""}, {""var"": ""bases"", ""rename"": ""form_meta_bases""}, {""var"": ""attrs"", ""rename"": ""model_form_attributes""}, {""var"": ""Meta"", ""rename"": ""ModelFormMeta""}, {""var"": ""class_name"", ""rename"": ""model_form_class_name""}]"
./django/forms/models.py,__new__,initialize_model_form_class,259,336,"def __new__(mcs, name, bases, attrs):
    base_formfield_callback = None
    for b in bases:
        if hasattr(b, 'Meta') and hasattr(b.Meta, 'formfield_callback'):
            base_formfield_callback = b.Meta.formfield_callback
            break
    formfield_callback = attrs.pop('formfield_callback', base_formfield_callback)
    new_class = super().__new__(mcs, name, bases, attrs)
    if bases == (BaseModelForm,):
        return new_class
    opts = new_class._meta = ModelFormOptions(getattr(new_class, 'Meta', None))
    for opt in ['fields', 'exclude', 'localized_fields']:
        value = getattr(opts, opt)
        if isinstance(value, str) and value != ALL_FIELDS:
            msg = ""%(model)s.Meta.%(opt)s cannot be a string. Did you mean to type: ('%(value)s',)?"" % {'model': new_class.__name__, 'opt': opt, 'value': value}
            raise TypeError(msg)
    if opts.model:
        if opts.fields is None and opts.exclude is None:
            raise ImproperlyConfigured(""Creating a ModelForm without either the 'fields' attribute or the 'exclude' attribute is prohibited; form %s needs updating."" % name)
        if opts.fields == ALL_FIELDS:
            opts.fields = None
        fields = fields_for_model(opts.model, opts.fields, opts.exclude, opts.widgets, formfield_callback, opts.localized_fields, opts.labels, opts.help_texts, opts.error_messages, opts.field_classes, apply_limit_choices_to=False)
        none_model_fields = {k for k, v in fields.items() if not v}
        missing_fields = none_model_fields.difference(new_class.declared_fields)
        if missing_fields:
            message = 'Unknown field(s) (%s) specified for %s'
            message = message % (', '.join(missing_fields), opts.model.__name__)
            raise FieldError(message)
        fields.update(new_class.declared_fields)
    else:
        fields = new_class.declared_fields
    new_class.base_fields = fields
    return new_class","def initialize_model_form_class(mcs, name, bases, attrs):
    base_formfield_callback = None
    for b in bases:
        if hasattr(b, 'Meta') and hasattr(b.Meta, 'formfield_callback'):
            base_formfield_callback = b.Meta.formfield_callback
            break
    formfield_callback = attrs.pop('formfield_callback', base_formfield_callback)
    new_class = super().__new__(mcs, name, bases, attrs)
    if bases == (BaseModelForm,):
        return new_class
    opts = new_class._meta = ModelFormOptions(getattr(new_class, 'Meta', None))
    for opt in ['fields', 'exclude', 'localized_fields']:
        value = getattr(opts, opt)
        if isinstance(value, str) and value != ALL_FIELDS:
            msg = ""%(model)s.Meta.%(opt)s cannot be a string. Did you mean to type: ('%(value)s',)?"" % {'model': new_class.__name__, 'opt': opt, 'value': value}
            raise TypeError(msg)
    if opts.model:
        if opts.fields is None and opts.exclude is None:
            raise ImproperlyConfigured(""Creating a ModelForm without either the 'fields' attribute or the 'exclude' attribute is prohibited; form %s needs updating."" % name)
        if opts.fields == ALL_FIELDS:
            opts.fields = None
        fields = fields_for_model(opts.model, opts.fields, opts.exclude, opts.widgets, formfield_callback, opts.localized_fields, opts.labels, opts.help_texts, opts.error_messages, opts.field_classes, apply_limit_choices_to=False)
        none_model_fields = {k for k, v in fields.items() if not v}
        missing_fields = none_model_fields.difference(new_class.declared_fields)
        if missing_fields:
            message = 'Unknown field(s) (%s) specified for %s'
            message = message % (', '.join(missing_fields), opts.model.__name__)
            raise FieldError(message)
        fields.update(new_class.declared_fields)
    else:
        fields = new_class.declared_fields
    new_class.base_fields = fields
    return new_class","[{""var"": ""formfield_callback"", ""rename"": ""formfield_callback_inheritance""}, {""var"": ""msg"", ""rename"": ""invalid_meta_fields_message""}, {""var"": ""k"", ""rename"": ""field_key""}, {""var"": ""missing_fields"", ""rename"": ""undefined_model_fields""}, {""var"": ""message"", ""rename"": ""missing_field_error_message""}, {""var"": ""opts"", ""rename"": ""model_form_options""}, {""var"": ""opt"", ""rename"": ""form_option_keys""}, {""var"": ""v"", ""rename"": ""meta_class_descriptor""}, {""var"": ""base_formfield_callback"", ""rename"": ""inherited_formfield_callback""}, {""var"": ""new_class"", ""rename"": ""constructed_model_form_class""}, {""var"": ""none_model_fields"", ""rename"": ""unset_form_fields""}, {""var"": ""value"", ""rename"": ""option_value""}, {""var"": ""fields"", ""rename"": ""model_form_fields""}, {""var"": ""b"", ""rename"": ""base_class""}]"
