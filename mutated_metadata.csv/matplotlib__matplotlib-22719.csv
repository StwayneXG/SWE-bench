file,method_name,new_method_name,start_line,end_line,original_code,code,var
./lib/matplotlib/category.py,convert,convert_string_to_float_with_unit_mapping,28,69,"@staticmethod
def convert(value, unit, axis):
    """"""
        Convert strings in *value* to floats using mapping information stored
        in the *unit* object.

        Parameters
        ----------
        value : str or iterable
            Value or list of values to be converted.
        unit : `.UnitData`
            An object mapping strings to integers.
        axis : `~matplotlib.axis.Axis`
            The axis on which the converted value is plotted.

            .. note:: *axis* is unused.

        Returns
        -------
        float or ndarray[float]
        """"""
    if unit is None:
        raise ValueError('Missing category information for StrCategoryConverter; this might be caused by unintendedly mixing categorical and numeric data')
    StrCategoryConverter._validate_unit(unit)
    values = np.atleast_1d(np.array(value, dtype=object))
    with _api.suppress_matplotlib_deprecation_warning():
        is_numlike = all((units.ConversionInterface.is_numlike(v) and (not isinstance(v, (str, bytes))) for v in values))
    if is_numlike:
        _api.warn_deprecated('3.5', message='Support for passing numbers through unit converters is deprecated since %(since)s and support will be removed %(removal)s; use Axis.convert_units instead.')
        return np.asarray(values, dtype=float)
    unit.update(values)
    return np.vectorize(unit._mapping.__getitem__, otypes=[float])(values)","@staticmethod
def convert_string_to_float_with_unit_mapping(value, unit, axis):
    """"""
        Convert strings in *value* to floats using mapping information stored
        in the *unit* object.

        Parameters
        ----------
        value : str or iterable
            Value or list of values to be converted.
        unit : `.UnitData`
            An object mapping strings to integers.
        axis : `~matplotlib.axis.Axis`
            The axis on which the converted value is plotted.

            .. note:: *axis* is unused.

        Returns
        -------
        float or ndarray[float]
        """"""
    if unit is None:
        raise ValueError('Missing category information for StrCategoryConverter; this might be caused by unintendedly mixing categorical and numeric data')
    StrCategoryConverter._validate_unit(unit)
    values = np.atleast_1d(np.array(value, dtype=object))
    with _api.suppress_matplotlib_deprecation_warning():
        is_numlike = all((units.ConversionInterface.is_numlike(v) and (not isinstance(v, (str, bytes))) for v in values))
    if is_numlike:
        _api.warn_deprecated('3.5', message='Support for passing numbers through unit converters is deprecated since %(since)s and support will be removed %(removal)s; use Axis.convert_units instead.')
        return np.asarray(values, dtype=float)
    unit.update(values)
    return np.vectorize(unit._mapping.__getitem__, otypes=[float])(values)","[{""var"": ""values"", ""rename"": ""stringified_values_array""}, {""var"": ""v"", ""rename"": ""convertible_values""}, {""var"": ""is_numlike"", ""rename"": ""are_all_values_numlike""}]"
./lib/matplotlib/category.py,update,assign_integer_identifiers_to_values,209,237,"def update(self, data):
    """"""
        Map new values to integer identifiers.

        Parameters
        ----------
        data : iterable of str or bytes

        Raises
        ------
        TypeError
            If elements in *data* are neither str nor bytes.
        """"""
    data = np.atleast_1d(np.array(data, dtype=object))
    convertible = True
    for val in OrderedDict.fromkeys(data):
        _api.check_isinstance((str, bytes), value=val)
        if convertible:
            convertible = self._str_is_convertible(val)
        if val not in self._mapping:
            self._mapping[val] = next(self._counter)
    if convertible:
        _log.info('Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.')","def assign_integer_identifiers_to_values(self, data):
    """"""
        Map new values to integer identifiers.

        Parameters
        ----------
        data : iterable of str or bytes

        Raises
        ------
        TypeError
            If elements in *data* are neither str nor bytes.
        """"""
    data = np.atleast_1d(np.array(data, dtype=object))
    convertible = True
    for val in OrderedDict.fromkeys(data):
        _api.check_isinstance((str, bytes), value=val)
        if convertible:
            convertible = self._str_is_convertible(val)
        if val not in self._mapping:
            self._mapping[val] = next(self._counter)
    if convertible:
        _log.info('Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.')","[{""var"": ""val"", ""rename"": ""identifier_key""}, {""var"": ""convertible"", ""rename"": ""all_values_convertible""}]"
