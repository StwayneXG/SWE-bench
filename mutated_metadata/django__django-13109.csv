file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/db/models/fields/related.py,validate,validate_foreign_key_exists,909,929,"def validate(self, value, model_instance):
    if self.remote_field.parent_link:
        return
    super().validate(value, model_instance)
    if value is None:
        return
    using = router.db_for_read(self.remote_field.model, instance=model_instance)
    qs = self.remote_field.model._default_manager.using(using).filter(**{self.remote_field.field_name: value})
    qs = qs.complex_filter(self.get_limit_choices_to())
    if not qs.exists():
        raise exceptions.ValidationError(self.error_messages['invalid'], code='invalid', params={'model': self.remote_field.model._meta.verbose_name, 'pk': value, 'field': self.remote_field.field_name, 'value': value})","def validate_foreign_key_exists(self, value, model_instance):
    if self.remote_field.parent_link:
        return
    super().validate(value, model_instance)
    if value is None:
        return
    using = router.db_for_read(self.remote_field.model, instance=model_instance)
    qs = self.remote_field.model._default_manager.using(using).filter(**{self.remote_field.field_name: value})
    qs = qs.complex_filter(self.get_limit_choices_to())
    if not qs.exists():
        raise exceptions.ValidationError(self.error_messages['invalid'], code='invalid', params={'model': self.remote_field.model._meta.verbose_name, 'pk': value, 'field': self.remote_field.field_name, 'value': value})","[{""var"": ""using"", ""rename"": ""database_connection_alias""}, {""var"": ""qs"", ""rename"": ""filtered_queryset""}]"
