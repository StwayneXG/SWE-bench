file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sklearn/utils/_show_versions.py,_get_deps_info,retrieve_dependencies_version_info,33,69,"def _get_deps_info():
    """"""Overview of the installed version of main dependencies

    Returns
    -------
    deps_info: dict
        version information on relevant Python libraries

    """"""
    deps = ['pip', 'setuptools', 'sklearn', 'numpy', 'scipy', 'Cython', 'pandas', 'matplotlib']

    def get_version(module):
        return module.__version__
    deps_info = {}
    for modname in deps:
        try:
            if modname in sys.modules:
                mod = sys.modules[modname]
            else:
                mod = importlib.import_module(modname)
            ver = get_version(mod)
            deps_info[modname] = ver
        except ImportError:
            deps_info[modname] = None
    return deps_info","def retrieve_dependencies_version_info():
    """"""Overview of the installed version of main dependencies

    Returns
    -------
    deps_info: dict
        version information on relevant Python libraries

    """"""
    deps = ['pip', 'setuptools', 'sklearn', 'numpy', 'scipy', 'Cython', 'pandas', 'matplotlib']

    def get_version(module):
        return module.__version__
    deps_info = {}
    for modname in deps:
        try:
            if modname in sys.modules:
                mod = sys.modules[modname]
            else:
                mod = importlib.import_module(modname)
            ver = get_version(mod)
            deps_info[modname] = ver
        except ImportError:
            deps_info[modname] = None
    return deps_info","[{""var"": ""modname"", ""rename"": ""module_name""}, {""var"": ""ver"", ""rename"": ""version_info""}, {""var"": ""mod"", ""rename"": ""module_instance""}, {""var"": ""deps_info"", ""rename"": ""dependencies_version_info""}, {""var"": ""deps"", ""rename"": ""dependency_list""}]"
