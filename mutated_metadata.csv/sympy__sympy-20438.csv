file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sympy/core/relational.py,_eval_simplify,simplify_and_reduce_expression,303,384,"def _eval_simplify(self, **kwargs):
    from .add import Add
    r = self
    r = r.func(*[i.simplify(**kwargs) for i in r.args])
    if r.is_Relational:
        dif = r.lhs - r.rhs
        v = None
        if dif.is_comparable:
            v = dif.n(2)
        elif dif.equals(0):
            v = S.Zero
        if v is not None:
            r = r.func._eval_relation(v, S.Zero)
        r = r.canonical
        free = list(filter(lambda x: x.is_real is not False, r.free_symbols))
        if len(free) == 1:
            try:
                from sympy.solvers.solveset import linear_coeffs
                x = free.pop()
                dif = r.lhs - r.rhs
                m, b = linear_coeffs(dif, x)
                if m.is_zero is False:
                    if m.is_negative:
                        r = r.func(-b / m, x)
                    else:
                        r = r.func(x, -b / m)
                else:
                    r = r.func(b, S.zero)
            except ValueError:
                from sympy.polys import Poly, poly, PolynomialError, gcd
                try:
                    p = poly(dif, x)
                    c = p.all_coeffs()
                    constant = c[-1]
                    c[-1] = 0
                    scale = gcd(c)
                    c = [ctmp / scale for ctmp in c]
                    r = r.func(Poly.from_list(c, x).as_expr(), -constant / scale)
                except PolynomialError:
                    pass
        elif len(free) >= 2:
            try:
                from sympy.solvers.solveset import linear_coeffs
                from sympy.polys import gcd
                free = list(ordered(free))
                dif = r.lhs - r.rhs
                m = linear_coeffs(dif, *free)
                constant = m[-1]
                del m[-1]
                scale = gcd(m)
                m = [mtmp / scale for mtmp in m]
                nzm = list(filter(lambda f: f[0] != 0, list(zip(m, free))))
                if scale.is_zero is False:
                    if constant != 0:
                        newexpr = Add(*[i * j for i, j in nzm])
                        r = r.func(newexpr, -constant / scale)
                    else:
                        lhsterm = nzm[0][0] * nzm[0][1]
                        del nzm[0]
                        newexpr = Add(*[i * j for i, j in nzm])
                        r = r.func(lhsterm, -newexpr)
                else:
                    r = r.func(constant, S.zero)
            except ValueError:
                pass
    r = r.canonical
    measure = kwargs['measure']
    if measure(r) < kwargs['ratio'] * measure(self):
        return r
    else:
        return self","def simplify_and_reduce_expression(self, **kwargs):
    from .add import Add
    r = self
    r = r.func(*[i.simplify(**kwargs) for i in r.args])
    if r.is_Relational:
        dif = r.lhs - r.rhs
        v = None
        if dif.is_comparable:
            v = dif.n(2)
        elif dif.equals(0):
            v = S.Zero
        if v is not None:
            r = r.func._eval_relation(v, S.Zero)
        r = r.canonical
        free = list(filter(lambda x: x.is_real is not False, r.free_symbols))
        if len(free) == 1:
            try:
                from sympy.solvers.solveset import linear_coeffs
                x = free.pop()
                dif = r.lhs - r.rhs
                m, b = linear_coeffs(dif, x)
                if m.is_zero is False:
                    if m.is_negative:
                        r = r.func(-b / m, x)
                    else:
                        r = r.func(x, -b / m)
                else:
                    r = r.func(b, S.zero)
            except ValueError:
                from sympy.polys import Poly, poly, PolynomialError, gcd
                try:
                    p = poly(dif, x)
                    c = p.all_coeffs()
                    constant = c[-1]
                    c[-1] = 0
                    scale = gcd(c)
                    c = [ctmp / scale for ctmp in c]
                    r = r.func(Poly.from_list(c, x).as_expr(), -constant / scale)
                except PolynomialError:
                    pass
        elif len(free) >= 2:
            try:
                from sympy.solvers.solveset import linear_coeffs
                from sympy.polys import gcd
                free = list(ordered(free))
                dif = r.lhs - r.rhs
                m = linear_coeffs(dif, *free)
                constant = m[-1]
                del m[-1]
                scale = gcd(m)
                m = [mtmp / scale for mtmp in m]
                nzm = list(filter(lambda f: f[0] != 0, list(zip(m, free))))
                if scale.is_zero is False:
                    if constant != 0:
                        newexpr = Add(*[i * j for i, j in nzm])
                        r = r.func(newexpr, -constant / scale)
                    else:
                        lhsterm = nzm[0][0] * nzm[0][1]
                        del nzm[0]
                        newexpr = Add(*[i * j for i, j in nzm])
                        r = r.func(lhsterm, -newexpr)
                else:
                    r = r.func(constant, S.zero)
            except ValueError:
                pass
    r = r.canonical
    measure = kwargs['measure']
    if measure(r) < kwargs['ratio'] * measure(self):
        return r
    else:
        return self","[{""var"": ""c"", ""rename"": ""coefficients_list""}, {""var"": ""lhsterm"", ""rename"": ""leading_term""}, {""var"": ""r"", ""rename"": ""simplified_expression""}, {""var"": ""i"", ""rename"": ""arg_simplified_expression""}, {""var"": ""constant"", ""rename"": ""constant_term""}, {""var"": ""p"", ""rename"": ""polynomial_representation""}, {""var"": ""nzm"", ""rename"": ""nonzero_coeff_variable_pairs""}, {""var"": ""mtmp"", ""rename"": ""normalized_coefficients""}, {""var"": ""measure"", ""rename"": ""simplification_measure_fn""}, {""var"": ""ctmp"", ""rename"": ""coefficient_temp""}, {""var"": ""m"", ""rename"": ""slope_coefficient""}, {""var"": ""j"", ""rename"": ""non_zero_coefficients""}, {""var"": ""v"", ""rename"": ""difference_evaluation""}, {""var"": ""free"", ""rename"": ""real_free_symbols""}, {""var"": ""scale"", ""rename"": ""common_factor""}, {""var"": ""dif"", ""rename"": ""difference_expr""}, {""var"": ""newexpr"", ""rename"": ""combined_terms_expression""}, {""var"": ""b"", ""rename"": ""linear_intercept""}]"
./sympy/core/relational.py,_eval_simplify,simplify_linear_equality,558,580,"def _eval_simplify(self, **kwargs):
    from .add import Add
    from sympy.solvers.solveset import linear_coeffs
    e = super()._eval_simplify(**kwargs)
    if not isinstance(e, Equality):
        return e
    free = self.free_symbols
    if len(free) == 1:
        try:
            x = free.pop()
            m, b = linear_coeffs(e.rewrite(Add, evaluate=False), x)
            if m.is_zero is False:
                enew = e.func(x, -b / m)
            else:
                enew = e.func(m * x, -b)
            measure = kwargs['measure']
            if measure(enew) <= kwargs['ratio'] * measure(e):
                e = enew
        except ValueError:
            pass
    return e.canonical","def simplify_linear_equality(self, **kwargs):
    from .add import Add
    from sympy.solvers.solveset import linear_coeffs
    e = super()._eval_simplify(**kwargs)
    if not isinstance(e, Equality):
        return e
    free = self.free_symbols
    if len(free) == 1:
        try:
            x = free.pop()
            m, b = linear_coeffs(e.rewrite(Add, evaluate=False), x)
            if m.is_zero is False:
                enew = e.func(x, -b / m)
            else:
                enew = e.func(m * x, -b)
            measure = kwargs['measure']
            if measure(enew) <= kwargs['ratio'] * measure(e):
                e = enew
        except ValueError:
            pass
    return e.canonical","[{""var"": ""x"", ""rename"": ""target_variable""}, {""var"": ""measure"", ""rename"": ""complexity_measure_function""}, {""var"": ""m"", ""rename"": ""linear_coefficient""}, {""var"": ""e"", ""rename"": ""suggestion_solution""}, {""var"": ""free"", ""rename"": ""single_free_symbol""}, {""var"": ""enew"", ""rename"": ""simplified_equation""}, {""var"": ""b"", ""rename"": ""linear_constant_term""}]"
./sympy/sets/handlers/comparison.py,_eval_is_eq,evaluate_set_equality_with_basic,53,54,"@dispatch(Set, Basic)
def _eval_is_eq(lhs, rhs):
    return False","@dispatch(Set, Basic)
def evaluate_set_equality_with_basic(lhs, rhs):
    return False",[]
