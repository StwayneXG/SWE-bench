file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/contrib/admin/options.py,changelist_view,admin_change_list_view,1914,2091,"@csrf_protect_m
def changelist_view(self, request, extra_context=None):
    """"""
        The 'change list' admin view for this model.
        """"""
    from django.contrib.admin.views.main import ERROR_FLAG
    app_label = self.opts.app_label
    if not self.has_view_or_change_permission(request):
        raise PermissionDenied
    try:
        cl = self.get_changelist_instance(request)
    except IncorrectLookupParameters:
        if ERROR_FLAG in request.GET:
            return SimpleTemplateResponse('admin/invalid_setup.html', {'title': _('Database error')})
        return HttpResponseRedirect(request.path + '?' + ERROR_FLAG + '=1')
    action_failed = False
    selected = request.POST.getlist(helpers.ACTION_CHECKBOX_NAME)
    actions = self.get_actions(request)
    if actions and request.method == 'POST' and ('index' in request.POST) and ('_save' not in request.POST):
        if selected:
            response = self.response_action(request, queryset=cl.get_queryset(request))
            if response:
                return response
            else:
                action_failed = True
        else:
            msg = _('Items must be selected in order to perform actions on them. No items have been changed.')
            self.message_user(request, msg, messages.WARNING)
            action_failed = True
    if actions and request.method == 'POST' and (helpers.ACTION_CHECKBOX_NAME in request.POST) and ('index' not in request.POST) and ('_save' not in request.POST):
        if selected:
            response = self.response_action(request, queryset=cl.get_queryset(request))
            if response:
                return response
            else:
                action_failed = True
    if action_failed:
        return HttpResponseRedirect(request.get_full_path())
    formset = cl.formset = None
    if request.method == 'POST' and cl.list_editable and ('_save' in request.POST):
        if not self.has_change_permission(request):
            raise PermissionDenied
        FormSet = self.get_changelist_formset(request)
        modified_objects = self._get_list_editable_queryset(request, FormSet.get_default_prefix())
        formset = cl.formset = FormSet(request.POST, request.FILES, queryset=modified_objects)
        if formset.is_valid():
            changecount = 0
            for form in formset.forms:
                if form.has_changed():
                    obj = self.save_form(request, form, change=True)
                    self.save_model(request, obj, form, change=True)
                    self.save_related(request, form, formsets=[], change=True)
                    change_msg = self.construct_change_message(request, form, None)
                    self.log_change(request, obj, change_msg)
                    changecount += 1
            if changecount:
                msg = ngettext('%(count)s %(name)s was changed successfully.', '%(count)s %(name)s were changed successfully.', changecount) % {'count': changecount, 'name': model_ngettext(self.opts, changecount)}
                self.message_user(request, msg, messages.SUCCESS)
            return HttpResponseRedirect(request.get_full_path())
    elif cl.list_editable and self.has_change_permission(request):
        FormSet = self.get_changelist_formset(request)
        formset = cl.formset = FormSet(queryset=cl.result_list)
    if formset:
        media = self.media + formset.media
    else:
        media = self.media
    if actions:
        action_form = self.action_form(auto_id=None)
        action_form.fields['action'].choices = self.get_action_choices(request)
        media += action_form.media
    else:
        action_form = None
    selection_note_all = ngettext('%(total_count)s selected', 'All %(total_count)s selected', cl.result_count)
    context = {**self.admin_site.each_context(request), 'module_name': str(self.opts.verbose_name_plural), 'selection_note': _('0 of %(cnt)s selected') % {'cnt': len(cl.result_list)}, 'selection_note_all': selection_note_all % {'total_count': cl.result_count}, 'title': cl.title, 'subtitle': None, 'is_popup': cl.is_popup, 'to_field': cl.to_field, 'cl': cl, 'media': media, 'has_add_permission': self.has_add_permission(request), 'opts': cl.opts, 'action_form': action_form, 'actions_on_top': self.actions_on_top, 'actions_on_bottom': self.actions_on_bottom, 'actions_selection_counter': self.actions_selection_counter, 'preserved_filters': self.get_preserved_filters(request), **(extra_context or {})}
    request.current_app = self.admin_site.name
    return TemplateResponse(request, self.change_list_template or ['admin/%s/%s/change_list.html' % (app_label, self.opts.model_name), 'admin/%s/change_list.html' % app_label, 'admin/change_list.html'], context)","@csrf_protect_m
def admin_change_list_view(self, request, extra_context=None):
    """"""
        The 'change list' admin view for this model.
        """"""
    from django.contrib.admin.views.main import ERROR_FLAG
    app_label = self.opts.app_label
    if not self.has_view_or_change_permission(request):
        raise PermissionDenied
    try:
        cl = self.get_changelist_instance(request)
    except IncorrectLookupParameters:
        if ERROR_FLAG in request.GET:
            return SimpleTemplateResponse('admin/invalid_setup.html', {'title': _('Database error')})
        return HttpResponseRedirect(request.path + '?' + ERROR_FLAG + '=1')
    action_failed = False
    selected = request.POST.getlist(helpers.ACTION_CHECKBOX_NAME)
    actions = self.get_actions(request)
    if actions and request.method == 'POST' and ('index' in request.POST) and ('_save' not in request.POST):
        if selected:
            response = self.response_action(request, queryset=cl.get_queryset(request))
            if response:
                return response
            else:
                action_failed = True
        else:
            msg = _('Items must be selected in order to perform actions on them. No items have been changed.')
            self.message_user(request, msg, messages.WARNING)
            action_failed = True
    if actions and request.method == 'POST' and (helpers.ACTION_CHECKBOX_NAME in request.POST) and ('index' not in request.POST) and ('_save' not in request.POST):
        if selected:
            response = self.response_action(request, queryset=cl.get_queryset(request))
            if response:
                return response
            else:
                action_failed = True
    if action_failed:
        return HttpResponseRedirect(request.get_full_path())
    formset = cl.formset = None
    if request.method == 'POST' and cl.list_editable and ('_save' in request.POST):
        if not self.has_change_permission(request):
            raise PermissionDenied
        FormSet = self.get_changelist_formset(request)
        modified_objects = self._get_list_editable_queryset(request, FormSet.get_default_prefix())
        formset = cl.formset = FormSet(request.POST, request.FILES, queryset=modified_objects)
        if formset.is_valid():
            changecount = 0
            for form in formset.forms:
                if form.has_changed():
                    obj = self.save_form(request, form, change=True)
                    self.save_model(request, obj, form, change=True)
                    self.save_related(request, form, formsets=[], change=True)
                    change_msg = self.construct_change_message(request, form, None)
                    self.log_change(request, obj, change_msg)
                    changecount += 1
            if changecount:
                msg = ngettext('%(count)s %(name)s was changed successfully.', '%(count)s %(name)s were changed successfully.', changecount) % {'count': changecount, 'name': model_ngettext(self.opts, changecount)}
                self.message_user(request, msg, messages.SUCCESS)
            return HttpResponseRedirect(request.get_full_path())
    elif cl.list_editable and self.has_change_permission(request):
        FormSet = self.get_changelist_formset(request)
        formset = cl.formset = FormSet(queryset=cl.result_list)
    if formset:
        media = self.media + formset.media
    else:
        media = self.media
    if actions:
        action_form = self.action_form(auto_id=None)
        action_form.fields['action'].choices = self.get_action_choices(request)
        media += action_form.media
    else:
        action_form = None
    selection_note_all = ngettext('%(total_count)s selected', 'All %(total_count)s selected', cl.result_count)
    context = {**self.admin_site.each_context(request), 'module_name': str(self.opts.verbose_name_plural), 'selection_note': _('0 of %(cnt)s selected') % {'cnt': len(cl.result_list)}, 'selection_note_all': selection_note_all % {'total_count': cl.result_count}, 'title': cl.title, 'subtitle': None, 'is_popup': cl.is_popup, 'to_field': cl.to_field, 'cl': cl, 'media': media, 'has_add_permission': self.has_add_permission(request), 'opts': cl.opts, 'action_form': action_form, 'actions_on_top': self.actions_on_top, 'actions_on_bottom': self.actions_on_bottom, 'actions_selection_counter': self.actions_selection_counter, 'preserved_filters': self.get_preserved_filters(request), **(extra_context or {})}
    request.current_app = self.admin_site.name
    return TemplateResponse(request, self.change_list_template or ['admin/%s/%s/change_list.html' % (app_label, self.opts.model_name), 'admin/%s/change_list.html' % app_label, 'admin/change_list.html'], context)","[{""var"": ""response"", ""rename"": ""action_response""}, {""var"": ""actions"", ""rename"": ""available_actions""}, {""var"": ""selection_note_all"", ""rename"": ""selection_note_total_count""}, {""var"": ""changecount"", ""rename"": ""changed_items_count""}, {""var"": ""action_failed"", ""rename"": ""action_execution_unsuccessful""}, {""var"": ""msg"", ""rename"": ""python\naction_selection_warning_message""}, {""var"": ""selected"", ""rename"": ""selected_items_list""}, {""var"": ""form"", ""rename"": ""change_list_form""}, {""var"": ""obj"", ""rename"": ""saved_object""}, {""var"": ""formset"", ""rename"": ""editable_formset""}, {""var"": ""FormSet"", ""rename"": ""EditableFormSet""}, {""var"": ""change_msg"", ""rename"": ""change_log_message""}, {""var"": ""cl"", ""rename"": ""change_list_instance""}, {""var"": ""modified_objects"", ""rename"": ""editable_objects_queryset""}, {""var"": ""context"", ""rename"": ""admin_view_context_data""}, {""var"": ""action_form"", ""rename"": ""admin_action_form""}, {""var"": ""app_label"", ""rename"": ""application_label""}, {""var"": ""media"", ""rename"": ""combined_media_assets""}]"
