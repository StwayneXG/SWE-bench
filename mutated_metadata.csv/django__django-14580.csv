file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/db/migrations/serializer.py,serialize,get_serialization_signature,274,287,"def serialize(self):
    special_cases = [(models.Model, 'models.Model', []), (type(None), 'type(None)', [])]
    for case, string, imports in special_cases:
        if case is self.value:
            return (string, set(imports))
    if hasattr(self.value, '__module__'):
        module = self.value.__module__
        if module == builtins.__name__:
            return (self.value.__name__, set())
        else:
            return ('%s.%s' % (module, self.value.__qualname__), {'import %s' % module})","def get_serialization_signature(self):
    special_cases = [(models.Model, 'models.Model', []), (type(None), 'type(None)', [])]
    for case, string, imports in special_cases:
        if case is self.value:
            return (string, set(imports))
    if hasattr(self.value, '__module__'):
        module = self.value.__module__
        if module == builtins.__name__:
            return (self.value.__name__, set())
        else:
            return ('%s.%s' % (module, self.value.__qualname__), {'import %s' % module})","[{""var"": ""special_cases"", ""rename"": ""serialization_special_cases""}, {""var"": ""string"", ""rename"": ""qualified_name""}, {""var"": ""case"", ""rename"": ""special_case_type""}, {""var"": ""module"", ""rename"": ""module_name_of_value""}, {""var"": ""imports"", ""rename"": ""required_imports""}]"
