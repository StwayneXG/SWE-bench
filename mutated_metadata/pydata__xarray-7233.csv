file,method_name,new_method_name,start_line,end_line,original_code,code,var
./xarray/core/rolling.py,construct,reshape_coarsen_to_dims,880,981,"def construct(self, window_dim=None, keep_attrs=None, **window_dim_kwargs) -> T_Xarray:
    """"""
        Convert this Coarsen object to a DataArray or Dataset,
        where the coarsening dimension is split or reshaped to two
        new dimensions.

        Parameters
        ----------
        window_dim: mapping
            A mapping from existing dimension name to new dimension names.
            The size of the second dimension will be the length of the
            coarsening window.
        keep_attrs: bool, optional
            Preserve attributes if True
        **window_dim_kwargs : {dim: new_name, ...}
            The keyword arguments form of ``window_dim``.

        Returns
        -------
        Dataset or DataArray with reshaped dimensions

        Examples
        --------
        >>> da = xr.DataArray(np.arange(24), dims=""time"")
        >>> da.coarsen(time=12).construct(time=(""year"", ""month""))
        <xarray.DataArray (year: 2, month: 12)>
        array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],
               [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])
        Dimensions without coordinates: year, month

        See Also
        --------
        DataArrayRolling.construct
        DatasetRolling.construct
        """"""
    from .dataarray import DataArray
    from .dataset import Dataset
    window_dim = either_dict_or_kwargs(window_dim, window_dim_kwargs, 'Coarsen.construct')
    if not window_dim:
        raise ValueError('Either window_dim or window_dim_kwargs need to be specified.')
    bad_new_dims = tuple((win for win, dims in window_dim.items() if len(dims) != 2 or isinstance(dims, str)))
    if bad_new_dims:
        raise ValueError(f'Please provide exactly two dimension names for the following coarsening dimensions: {bad_new_dims}')
    if keep_attrs is None:
        keep_attrs = _get_keep_attrs(default=True)
    missing_dims = set(window_dim) - set(self.windows)
    if missing_dims:
        raise ValueError(f""'window_dim' must contain entries for all dimensions to coarsen. Missing {missing_dims}"")
    extra_windows = set(self.windows) - set(window_dim)
    if extra_windows:
        raise ValueError(f""'window_dim' includes dimensions that will not be coarsened: {extra_windows}"")
    reshaped = Dataset()
    if isinstance(self.obj, DataArray):
        obj = self.obj._to_temp_dataset()
    else:
        obj = self.obj
    reshaped.attrs = obj.attrs if keep_attrs else {}
    for key, var in obj.variables.items():
        reshaped_dims = tuple(itertools.chain(*[window_dim.get(dim, [dim]) for dim in list(var.dims)]))
        if reshaped_dims != var.dims:
            windows = {w: self.windows[w] for w in window_dim if w in var.dims}
            reshaped_var, _ = var.coarsen_reshape(windows, self.boundary, self.side)
            attrs = var.attrs if keep_attrs else {}
            reshaped[key] = (reshaped_dims, reshaped_var, attrs)
        else:
            reshaped[key] = var
    should_be_coords = set(window_dim) & set(self.obj.coords)
    result = reshaped.set_coords(should_be_coords)
    if isinstance(self.obj, DataArray):
        return self.obj._from_temp_dataset(result)
    else:
        return result","def reshape_coarsen_to_dims(self, window_dim=None, keep_attrs=None, **window_dim_kwargs) -> T_Xarray:
    """"""
        Convert this Coarsen object to a DataArray or Dataset,
        where the coarsening dimension is split or reshaped to two
        new dimensions.

        Parameters
        ----------
        window_dim: mapping
            A mapping from existing dimension name to new dimension names.
            The size of the second dimension will be the length of the
            coarsening window.
        keep_attrs: bool, optional
            Preserve attributes if True
        **window_dim_kwargs : {dim: new_name, ...}
            The keyword arguments form of ``window_dim``.

        Returns
        -------
        Dataset or DataArray with reshaped dimensions

        Examples
        --------
        >>> da = xr.DataArray(np.arange(24), dims=""time"")
        >>> da.coarsen(time=12).construct(time=(""year"", ""month""))
        <xarray.DataArray (year: 2, month: 12)>
        array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],
               [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])
        Dimensions without coordinates: year, month

        See Also
        --------
        DataArrayRolling.construct
        DatasetRolling.construct
        """"""
    from .dataarray import DataArray
    from .dataset import Dataset
    window_dim = either_dict_or_kwargs(window_dim, window_dim_kwargs, 'Coarsen.construct')
    if not window_dim:
        raise ValueError('Either window_dim or window_dim_kwargs need to be specified.')
    bad_new_dims = tuple((win for win, dims in window_dim.items() if len(dims) != 2 or isinstance(dims, str)))
    if bad_new_dims:
        raise ValueError(f'Please provide exactly two dimension names for the following coarsening dimensions: {bad_new_dims}')
    if keep_attrs is None:
        keep_attrs = _get_keep_attrs(default=True)
    missing_dims = set(window_dim) - set(self.windows)
    if missing_dims:
        raise ValueError(f""'window_dim' must contain entries for all dimensions to coarsen. Missing {missing_dims}"")
    extra_windows = set(self.windows) - set(window_dim)
    if extra_windows:
        raise ValueError(f""'window_dim' includes dimensions that will not be coarsened: {extra_windows}"")
    reshaped = Dataset()
    if isinstance(self.obj, DataArray):
        obj = self.obj._to_temp_dataset()
    else:
        obj = self.obj
    reshaped.attrs = obj.attrs if keep_attrs else {}
    for key, var in obj.variables.items():
        reshaped_dims = tuple(itertools.chain(*[window_dim.get(dim, [dim]) for dim in list(var.dims)]))
        if reshaped_dims != var.dims:
            windows = {w: self.windows[w] for w in window_dim if w in var.dims}
            reshaped_var, _ = var.coarsen_reshape(windows, self.boundary, self.side)
            attrs = var.attrs if keep_attrs else {}
            reshaped[key] = (reshaped_dims, reshaped_var, attrs)
        else:
            reshaped[key] = var
    should_be_coords = set(window_dim) & set(self.obj.coords)
    result = reshaped.set_coords(should_be_coords)
    if isinstance(self.obj, DataArray):
        return self.obj._from_temp_dataset(result)
    else:
        return result","[{""var"": ""win"", ""rename"": ""invalid_new_dimensions""}, {""var"": ""windows"", ""rename"": ""dimension_windows""}, {""var"": ""extra_windows"", ""rename"": ""unused_coarsening_dimensions""}, {""var"": ""key"", ""rename"": ""variable_name""}, {""var"": ""reshaped_dims"", ""rename"": ""transformed_dimensions""}, {""var"": ""should_be_coords"", ""rename"": ""coarsened_dimension_coords""}, {""var"": ""var"", ""rename"": ""variable_to_coarsen""}, {""var"": ""_"", ""rename"": ""coarsen_to_new_dims""}, {""var"": ""result"", ""rename"": ""reshaped_dataset_with_coords""}, {""var"": ""reshaped"", ""rename"": ""coarsened_dataset""}, {""var"": ""obj"", ""rename"": ""coarsened_data_container""}, {""var"": ""dims"", ""rename"": ""dimension_mapping""}, {""var"": ""w"", ""rename"": ""coarsening_window_mapping""}, {""var"": ""attrs"", ""rename"": ""variable_attributes""}, {""var"": ""dim"", ""rename"": ""dimension_mapping""}, {""var"": ""reshaped_var"", ""rename"": ""reshaped_data_variable""}, {""var"": ""bad_new_dims"", ""rename"": ""invalid_dimension_mappings""}, {""var"": ""missing_dims"", ""rename"": ""unspecified_coarsen_dims""}]"
