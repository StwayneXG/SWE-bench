file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/core/mail/message.py,sanitize_address,format_email_address_pair,74,111,"def sanitize_address(addr, encoding):
    """"""
    Format a pair of (name, address) or an email address string.
    """"""
    address = None
    if not isinstance(addr, tuple):
        addr = force_str(addr)
        try:
            token, rest = parser.get_mailbox(addr)
        except (HeaderParseError, ValueError, IndexError):
            raise ValueError('Invalid address ""%s""' % addr)
        else:
            if rest:
                raise ValueError('Invalid adddress; only %s could be parsed from ""%s""' % (token, addr))
            nm = token.display_name or ''
            localpart = token.local_part
            domain = token.domain or ''
    else:
        nm, address = addr
        localpart, domain = address.rsplit('@', 1)
    nm = Header(nm, encoding).encode()
    try:
        localpart.encode('ascii')
    except UnicodeEncodeError:
        localpart = Header(localpart, encoding).encode()
    try:
        domain.encode('ascii')
    except UnicodeEncodeError:
        domain = domain.encode('idna').decode('ascii')
    parsed_address = Address(nm, username=localpart, domain=domain)
    return str(parsed_address)","def format_email_address_pair(addr, encoding):
    """"""
    Format a pair of (name, address) or an email address string.
    """"""
    address = None
    if not isinstance(addr, tuple):
        addr = force_str(addr)
        try:
            token, rest = parser.get_mailbox(addr)
        except (HeaderParseError, ValueError, IndexError):
            raise ValueError('Invalid address ""%s""' % addr)
        else:
            if rest:
                raise ValueError('Invalid adddress; only %s could be parsed from ""%s""' % (token, addr))
            nm = token.display_name or ''
            localpart = token.local_part
            domain = token.domain or ''
    else:
        nm, address = addr
        localpart, domain = address.rsplit('@', 1)
    nm = Header(nm, encoding).encode()
    try:
        localpart.encode('ascii')
    except UnicodeEncodeError:
        localpart = Header(localpart, encoding).encode()
    try:
        domain.encode('ascii')
    except UnicodeEncodeError:
        domain = domain.encode('idna').decode('ascii')
    parsed_address = Address(nm, username=localpart, domain=domain)
    return str(parsed_address)","[{""var"": ""address"", ""rename"": ""formatted_email_address""}, {""var"": ""localpart"", ""rename"": ""email_username_part""}, {""var"": ""rest"", ""rename"": ""unparsed_part""}, {""var"": ""token"", ""rename"": ""parsed_email_token""}, {""var"": ""domain"", ""rename"": ""email_domain_part""}, {""var"": ""parsed_address"", ""rename"": ""formatted_email_address""}, {""var"": ""nm"", ""rename"": ""display_name""}]"
./django/core/validators.py,__call__,validate_and_normalize_url,110,149,"def __call__(self, value):
    scheme = value.split('://')[0].lower()
    if scheme not in self.schemes:
        raise ValidationError(self.message, code=self.code)
    try:
        super().__call__(value)
    except ValidationError as e:
        if value:
            try:
                scheme, netloc, path, query, fragment = urlsplit(value)
            except ValueError:
                raise ValidationError(self.message, code=self.code)
            try:
                netloc = netloc.encode('idna').decode('ascii')
            except UnicodeError:
                raise e
            url = urlunsplit((scheme, netloc, path, query, fragment))
            super().__call__(url)
        else:
            raise
    else:
        host_match = re.search('^\\[(.+)\\](?::\\d{2,5})?$', urlsplit(value).netloc)
        if host_match:
            potential_ip = host_match.groups()[0]
            try:
                validate_ipv6_address(potential_ip)
            except ValidationError:
                raise ValidationError(self.message, code=self.code)
    if len(urlsplit(value).netloc) > 253:
        raise ValidationError(self.message, code=self.code)","def validate_and_normalize_url(self, value):
    scheme = value.split('://')[0].lower()
    if scheme not in self.schemes:
        raise ValidationError(self.message, code=self.code)
    try:
        super().__call__(value)
    except ValidationError as e:
        if value:
            try:
                scheme, netloc, path, query, fragment = urlsplit(value)
            except ValueError:
                raise ValidationError(self.message, code=self.code)
            try:
                netloc = netloc.encode('idna').decode('ascii')
            except UnicodeError:
                raise e
            url = urlunsplit((scheme, netloc, path, query, fragment))
            super().__call__(url)
        else:
            raise
    else:
        host_match = re.search('^\\[(.+)\\](?::\\d{2,5})?$', urlsplit(value).netloc)
        if host_match:
            potential_ip = host_match.groups()[0]
            try:
                validate_ipv6_address(potential_ip)
            except ValidationError:
                raise ValidationError(self.message, code=self.code)
    if len(urlsplit(value).netloc) > 253:
        raise ValidationError(self.message, code=self.code)","[{""var"": ""url"", ""rename"": ""validated_url""}, {""var"": ""query"", ""rename"": ""url_query_component""}, {""var"": ""path"", ""rename"": ""url_path_component""}, {""var"": ""fragment"", ""rename"": ""url_fragment""}, {""var"": ""host_match"", ""rename"": ""ipv6_bracketed_host_match""}, {""var"": ""netloc"", ""rename"": ""network_location""}, {""var"": ""scheme"", ""rename"": ""url_scheme""}, {""var"": ""potential_ip"", ""rename"": ""extracted_ipv6_address""}]"
./django/core/validators.py,__call__,validate_email_address,189,208,"def __call__(self, value):
    if not value or '@' not in value:
        raise ValidationError(self.message, code=self.code)
    user_part, domain_part = value.rsplit('@', 1)
    if not self.user_regex.match(user_part):
        raise ValidationError(self.message, code=self.code)
    if domain_part not in self.domain_whitelist and (not self.validate_domain_part(domain_part)):
        try:
            domain_part = domain_part.encode('idna').decode('ascii')
        except UnicodeError:
            pass
        else:
            if self.validate_domain_part(domain_part):
                return
        raise ValidationError(self.message, code=self.code)","def validate_email_address(self, value):
    if not value or '@' not in value:
        raise ValidationError(self.message, code=self.code)
    user_part, domain_part = value.rsplit('@', 1)
    if not self.user_regex.match(user_part):
        raise ValidationError(self.message, code=self.code)
    if domain_part not in self.domain_whitelist and (not self.validate_domain_part(domain_part)):
        try:
            domain_part = domain_part.encode('idna').decode('ascii')
        except UnicodeError:
            pass
        else:
            if self.validate_domain_part(domain_part):
                return
        raise ValidationError(self.message, code=self.code)","[{""var"": ""user_part"", ""rename"": ""email_local_part""}, {""var"": ""domain_part"", ""rename"": ""email_domain_segment""}]"
./django/utils/encoding.py,repercent_broken_unicode,reencode_malformed_utf8_octets,221,233,"def repercent_broken_unicode(path):
    """"""
    As per section 3.2 of RFC 3987, step three of converting a URI into an IRI,
    repercent-encode any octet produced that is not part of a strictly legal
    UTF-8 octet sequence.
    """"""
    try:
        path.decode()
    except UnicodeDecodeError as e:
        repercent = quote(path[e.start:e.end], safe=b""/#%[]=:;$&()+,!?*@'~"")
        path = repercent_broken_unicode(path[:e.start] + force_bytes(repercent) + path[e.end:])
    return path","def reencode_malformed_utf8_octets(path):
    """"""
    As per section 3.2 of RFC 3987, step three of converting a URI into an IRI,
    repercent-encode any octet produced that is not part of a strictly legal
    UTF-8 octet sequence.
    """"""
    try:
        path.decode()
    except UnicodeDecodeError as e:
        repercent = quote(path[e.start:e.end], safe=b""/#%[]=:;$&()+,!?*@'~"")
        path = repercent_broken_unicode(path[:e.start] + force_bytes(repercent) + path[e.end:])
    return path","[{""var"": ""repercent"", ""rename"": ""reencoded_segment""}]"
./django/utils/html.py,smart_urlquote,ensure_url_quoted_compliance,196,228,"def smart_urlquote(url):
    """"""Quote a URL if it isn't already quoted.""""""

    def unquote_quote(segment):
        segment = unquote(segment)
        return quote(segment, safe=RFC3986_SUBDELIMS + RFC3986_GENDELIMS + '~')
    try:
        scheme, netloc, path, query, fragment = urlsplit(url)
    except ValueError:
        return unquote_quote(url)
    try:
        netloc = netloc.encode('idna').decode('ascii')
    except UnicodeError:
        return unquote_quote(url)
    if query:
        query_parts = [(unquote(q[0]), unquote(q[1])) for q in parse_qsl(query, keep_blank_values=True)]
        query = urlencode(query_parts)
    path = unquote_quote(path)
    fragment = unquote_quote(fragment)
    return urlunsplit((scheme, netloc, path, query, fragment))","def ensure_url_quoted_compliance(url):
    """"""Quote a URL if it isn't already quoted.""""""

    def unquote_quote(segment):
        segment = unquote(segment)
        return quote(segment, safe=RFC3986_SUBDELIMS + RFC3986_GENDELIMS + '~')
    try:
        scheme, netloc, path, query, fragment = urlsplit(url)
    except ValueError:
        return unquote_quote(url)
    try:
        netloc = netloc.encode('idna').decode('ascii')
    except UnicodeError:
        return unquote_quote(url)
    if query:
        query_parts = [(unquote(q[0]), unquote(q[1])) for q in parse_qsl(query, keep_blank_values=True)]
        query = urlencode(query_parts)
    path = unquote_quote(path)
    fragment = unquote_quote(fragment)
    return urlunsplit((scheme, netloc, path, query, fragment))","[{""var"": ""query"", ""rename"": ""query_string""}, {""var"": ""path"", ""rename"": ""url_path_segment""}, {""var"": ""fragment"", ""rename"": ""url_fragment""}, {""var"": ""query_parts"", ""rename"": ""decoded_encoded_query_pairs""}, {""var"": ""netloc"", ""rename"": ""encoded_hostname""}, {""var"": ""q"", ""rename"": ""query_pair""}, {""var"": ""scheme"", ""rename"": ""url_scheme""}]"
./django/utils/html.py,urlize,convert_urls_to_clickable_links,232,345,"@keep_lazy_text
def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):
    """"""
    Convert any URLs in text into clickable links.

    Works on http://, https://, www. links, and also on links ending in one of
    the original seven gTLDs (.com, .edu, .gov, .int, .mil, .net, and .org).
    Links can have trailing punctuation (periods, commas, close-parens) and
    leading punctuation (opening parens) and it'll still do the right thing.

    If trim_url_limit is not None, truncate the URLs in the link text longer
    than this limit to trim_url_limit - 1 characters and append an ellipsis.

    If nofollow is True, give the links a rel=""nofollow"" attribute.

    If autoescape is True, autoescape the link text and URLs.
    """"""
    safe_input = isinstance(text, SafeData)

    def trim_url(x, limit=trim_url_limit):
        if limit is None or len(x) <= limit:
            return x
        return '%s…' % x[:max(0, limit - 1)]

    def trim_punctuation(lead, middle, trail):
        """"""
        Trim trailing and wrapping punctuation from `middle`. Return the items
        of the new state.
        """"""
        trimmed_something = True
        while trimmed_something:
            trimmed_something = False
            for opening, closing in WRAPPING_PUNCTUATION:
                if middle.startswith(opening):
                    middle = middle[len(opening):]
                    lead += opening
                    trimmed_something = True
                if middle.endswith(closing) and middle.count(closing) == middle.count(opening) + 1:
                    middle = middle[:-len(closing)]
                    trail = closing + trail
                    trimmed_something = True
            middle_unescaped = html.unescape(middle)
            stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
            if middle_unescaped != stripped:
                trail = middle[len(stripped):] + trail
                middle = middle[:len(stripped) - len(middle_unescaped)]
                trimmed_something = True
        return (lead, middle, trail)

    def is_email_simple(value):
        """"""Return True if value looks like an email address.""""""
        if '@' not in value or value.startswith('@') or value.endswith('@'):
            return False
        try:
            p1, p2 = value.split('@')
        except ValueError:
            return False
        if '.' not in p2 or p2.startswith('.'):
            return False
        return True
    words = word_split_re.split(str(text))
    for i, word in enumerate(words):
        if '.' in word or '@' in word or ':' in word:
            lead, middle, trail = ('', word, '')
            lead, middle, trail = trim_punctuation(lead, middle, trail)
            url = None
            nofollow_attr = ' rel=""nofollow""' if nofollow else ''
            if simple_url_re.match(middle):
                url = smart_urlquote(html.unescape(middle))
            elif simple_url_2_re.match(middle):
                url = smart_urlquote('http://%s' % html.unescape(middle))
            elif ':' not in middle and is_email_simple(middle):
                local, domain = middle.rsplit('@', 1)
                try:
                    domain = domain.encode('idna').decode('ascii')
                except UnicodeError:
                    continue
                url = 'mailto:%s@%s' % (local, domain)
                nofollow_attr = ''
            if url:
                trimmed = trim_url(middle)
                if autoescape and (not safe_input):
                    lead, trail = (escape(lead), escape(trail))
                    trimmed = escape(trimmed)
                middle = '<a href=""%s""%s>%s</a>' % (escape(url), nofollow_attr, trimmed)
                words[i] = mark_safe('%s%s%s' % (lead, middle, trail))
            elif safe_input:
                words[i] = mark_safe(word)
            elif autoescape:
                words[i] = escape(word)
        elif safe_input:
            words[i] = mark_safe(word)
        elif autoescape:
            words[i] = escape(word)
    return ''.join(words)","@keep_lazy_text
def convert_urls_to_clickable_links(text, trim_url_limit=None, nofollow=False, autoescape=False):
    """"""
    Convert any URLs in text into clickable links.

    Works on http://, https://, www. links, and also on links ending in one of
    the original seven gTLDs (.com, .edu, .gov, .int, .mil, .net, and .org).
    Links can have trailing punctuation (periods, commas, close-parens) and
    leading punctuation (opening parens) and it'll still do the right thing.

    If trim_url_limit is not None, truncate the URLs in the link text longer
    than this limit to trim_url_limit - 1 characters and append an ellipsis.

    If nofollow is True, give the links a rel=""nofollow"" attribute.

    If autoescape is True, autoescape the link text and URLs.
    """"""
    safe_input = isinstance(text, SafeData)

    def trim_url(x, limit=trim_url_limit):
        if limit is None or len(x) <= limit:
            return x
        return '%s…' % x[:max(0, limit - 1)]

    def trim_punctuation(lead, middle, trail):
        """"""
        Trim trailing and wrapping punctuation from `middle`. Return the items
        of the new state.
        """"""
        trimmed_something = True
        while trimmed_something:
            trimmed_something = False
            for opening, closing in WRAPPING_PUNCTUATION:
                if middle.startswith(opening):
                    middle = middle[len(opening):]
                    lead += opening
                    trimmed_something = True
                if middle.endswith(closing) and middle.count(closing) == middle.count(opening) + 1:
                    middle = middle[:-len(closing)]
                    trail = closing + trail
                    trimmed_something = True
            middle_unescaped = html.unescape(middle)
            stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
            if middle_unescaped != stripped:
                trail = middle[len(stripped):] + trail
                middle = middle[:len(stripped) - len(middle_unescaped)]
                trimmed_something = True
        return (lead, middle, trail)

    def is_email_simple(value):
        """"""Return True if value looks like an email address.""""""
        if '@' not in value or value.startswith('@') or value.endswith('@'):
            return False
        try:
            p1, p2 = value.split('@')
        except ValueError:
            return False
        if '.' not in p2 or p2.startswith('.'):
            return False
        return True
    words = word_split_re.split(str(text))
    for i, word in enumerate(words):
        if '.' in word or '@' in word or ':' in word:
            lead, middle, trail = ('', word, '')
            lead, middle, trail = trim_punctuation(lead, middle, trail)
            url = None
            nofollow_attr = ' rel=""nofollow""' if nofollow else ''
            if simple_url_re.match(middle):
                url = smart_urlquote(html.unescape(middle))
            elif simple_url_2_re.match(middle):
                url = smart_urlquote('http://%s' % html.unescape(middle))
            elif ':' not in middle and is_email_simple(middle):
                local, domain = middle.rsplit('@', 1)
                try:
                    domain = domain.encode('idna').decode('ascii')
                except UnicodeError:
                    continue
                url = 'mailto:%s@%s' % (local, domain)
                nofollow_attr = ''
            if url:
                trimmed = trim_url(middle)
                if autoescape and (not safe_input):
                    lead, trail = (escape(lead), escape(trail))
                    trimmed = escape(trimmed)
                middle = '<a href=""%s""%s>%s</a>' % (escape(url), nofollow_attr, trimmed)
                words[i] = mark_safe('%s%s%s' % (lead, middle, trail))
            elif safe_input:
                words[i] = mark_safe(word)
            elif autoescape:
                words[i] = escape(word)
        elif safe_input:
            words[i] = mark_safe(word)
        elif autoescape:
            words[i] = escape(word)
    return ''.join(words)","[{""var"": ""stripped"", ""rename"": ""stripped_trailing_punctuation""}, {""var"": ""url"", ""rename"": ""clickable_url""}, {""var"": ""middle_unescaped"", ""rename"": ""unescaped_middle_segment""}, {""var"": ""words"", ""rename"": ""text_fragments""}, {""var"": ""local"", ""rename"": ""local_part""}, {""var"": ""p1"", ""rename"": ""local_part""}, {""var"": ""i"", ""rename"": ""word_index""}, {""var"": ""closing"", ""rename"": ""closing_punctuation""}, {""var"": ""trimmed"", ""rename"": ""truncatedUrl""}, {""var"": ""trimmed_something"", ""rename"": ""punctuation_trimmed""}, {""var"": ""p2"", ""rename"": ""domain_part""}, {""var"": ""domain"", ""rename"": ""email_domain_part""}, {""var"": ""opening"", ""rename"": ""opening_punctuation""}, {""var"": ""safe_input"", ""rename"": ""is_safe_data""}, {""var"": ""nofollow_attr"", ""rename"": ""rel_nofollow_attribute""}, {""var"": ""word"", ""rename"": ""text_component""}]"
