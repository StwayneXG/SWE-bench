file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sphinx/util/docfields.py,transform,process_field_list_to_structured_entries,226,344,"def transform(self, node: nodes.field_list) -> None:
    """"""Transform a single field list *node*.""""""
    typemap = self.typemap
    entries: List[Union[nodes.field, Tuple[Field, Any]]] = []
    groupindices: Dict[str, int] = {}
    types: Dict[str, Dict] = {}
    for field in cast(List[nodes.field], node):
        assert len(field) == 2
        field_name = cast(nodes.field_name, field[0])
        field_body = cast(nodes.field_body, field[1])
        try:
            fieldtype_name, fieldarg = field_name.astext().split(None, 1)
        except ValueError:
            fieldtype_name, fieldarg = (field_name.astext(), '')
        typedesc, is_typefield = typemap.get(fieldtype_name, (None, None))
        if _is_single_paragraph(field_body):
            paragraph = cast(nodes.paragraph, field_body[0])
            content = paragraph.children
        else:
            content = field_body.children
        if typedesc is None or typedesc.has_arg != bool(fieldarg):
            new_fieldname = fieldtype_name[0:1].upper() + fieldtype_name[1:]
            if fieldarg:
                new_fieldname += ' ' + fieldarg
            field_name[0] = nodes.Text(new_fieldname)
            entries.append(field)
            if typedesc and is_typefield and content and (len(content) == 1) and isinstance(content[0], nodes.Text):
                typed_field = cast(TypedField, typedesc)
                target = content[0].astext()
                xrefs = typed_field.make_xrefs(typed_field.typerolename, self.directive.domain, target, contnode=content[0], env=self.directive.state.document.settings.env)
                if _is_single_paragraph(field_body):
                    paragraph = cast(nodes.paragraph, field_body[0])
                    paragraph.clear()
                    paragraph.extend(xrefs)
                else:
                    field_body.clear()
                    field_body += nodes.paragraph('', '', *xrefs)
            continue
        typename = typedesc.name
        if is_typefield:
            content = [n for n in content if isinstance(n, nodes.Inline) or isinstance(n, nodes.Text)]
            if content:
                types.setdefault(typename, {})[fieldarg] = content
            continue
        if typedesc.is_typed:
            try:
                argtype, argname = fieldarg.split(None, 1)
            except ValueError:
                pass
            else:
                types.setdefault(typename, {})[argname] = [nodes.Text(argtype)]
                fieldarg = argname
        translatable_content = nodes.inline(field_body.rawsource, translatable=True)
        translatable_content.document = field_body.parent.document
        translatable_content.source = field_body.parent.source
        translatable_content.line = field_body.parent.line
        translatable_content += content
        if typedesc.is_grouped:
            if typename in groupindices:
                group = cast(Tuple[Field, List], entries[groupindices[typename]])
            else:
                groupindices[typename] = len(entries)
                group = (typedesc, [])
                entries.append(group)
            new_entry = typedesc.make_entry(fieldarg, [translatable_content])
            group[1].append(new_entry)
        else:
            new_entry = typedesc.make_entry(fieldarg, [translatable_content])
            entries.append((typedesc, new_entry))
    new_list = nodes.field_list()
    for entry in entries:
        if isinstance(entry, nodes.field):
            new_list += entry
        else:
            fieldtype, items = entry
            fieldtypes = types.get(fieldtype.name, {})
            env = self.directive.state.document.settings.env
            new_list += fieldtype.make_field(fieldtypes, self.directive.domain, items, env=env)
    node.replace_self(new_list)","def process_field_list_to_structured_entries(self, node: nodes.field_list) -> None:
    """"""Transform a single field list *node*.""""""
    typemap = self.typemap
    entries: List[Union[nodes.field, Tuple[Field, Any]]] = []
    groupindices: Dict[str, int] = {}
    types: Dict[str, Dict] = {}
    for field in cast(List[nodes.field], node):
        assert len(field) == 2
        field_name = cast(nodes.field_name, field[0])
        field_body = cast(nodes.field_body, field[1])
        try:
            fieldtype_name, fieldarg = field_name.astext().split(None, 1)
        except ValueError:
            fieldtype_name, fieldarg = (field_name.astext(), '')
        typedesc, is_typefield = typemap.get(fieldtype_name, (None, None))
        if _is_single_paragraph(field_body):
            paragraph = cast(nodes.paragraph, field_body[0])
            content = paragraph.children
        else:
            content = field_body.children
        if typedesc is None or typedesc.has_arg != bool(fieldarg):
            new_fieldname = fieldtype_name[0:1].upper() + fieldtype_name[1:]
            if fieldarg:
                new_fieldname += ' ' + fieldarg
            field_name[0] = nodes.Text(new_fieldname)
            entries.append(field)
            if typedesc and is_typefield and content and (len(content) == 1) and isinstance(content[0], nodes.Text):
                typed_field = cast(TypedField, typedesc)
                target = content[0].astext()
                xrefs = typed_field.make_xrefs(typed_field.typerolename, self.directive.domain, target, contnode=content[0], env=self.directive.state.document.settings.env)
                if _is_single_paragraph(field_body):
                    paragraph = cast(nodes.paragraph, field_body[0])
                    paragraph.clear()
                    paragraph.extend(xrefs)
                else:
                    field_body.clear()
                    field_body += nodes.paragraph('', '', *xrefs)
            continue
        typename = typedesc.name
        if is_typefield:
            content = [n for n in content if isinstance(n, nodes.Inline) or isinstance(n, nodes.Text)]
            if content:
                types.setdefault(typename, {})[fieldarg] = content
            continue
        if typedesc.is_typed:
            try:
                argtype, argname = fieldarg.split(None, 1)
            except ValueError:
                pass
            else:
                types.setdefault(typename, {})[argname] = [nodes.Text(argtype)]
                fieldarg = argname
        translatable_content = nodes.inline(field_body.rawsource, translatable=True)
        translatable_content.document = field_body.parent.document
        translatable_content.source = field_body.parent.source
        translatable_content.line = field_body.parent.line
        translatable_content += content
        if typedesc.is_grouped:
            if typename in groupindices:
                group = cast(Tuple[Field, List], entries[groupindices[typename]])
            else:
                groupindices[typename] = len(entries)
                group = (typedesc, [])
                entries.append(group)
            new_entry = typedesc.make_entry(fieldarg, [translatable_content])
            group[1].append(new_entry)
        else:
            new_entry = typedesc.make_entry(fieldarg, [translatable_content])
            entries.append((typedesc, new_entry))
    new_list = nodes.field_list()
    for entry in entries:
        if isinstance(entry, nodes.field):
            new_list += entry
        else:
            fieldtype, items = entry
            fieldtypes = types.get(fieldtype.name, {})
            env = self.directive.state.document.settings.env
            new_list += fieldtype.make_field(fieldtypes, self.directive.domain, items, env=env)
    node.replace_self(new_list)","[{""var"": ""content"", ""rename"": ""field_children_content""}, {""var"": ""n"", ""rename"": ""transformation_node""}, {""var"": ""group"", ""rename"": ""typed_group""}, {""var"": ""paragraph"", ""rename"": ""first_paragraph_content""}, {""var"": ""typemap"", ""rename"": ""field_type_mapping""}, {""var"": ""env"", ""rename"": ""execution_context""}, {""var"": ""argname"", ""rename"": ""argument_name""}, {""var"": ""typed_field"", ""rename"": ""typed_field_descriptor""}, {""var"": ""entries"", ""rename"": ""transformed_fields""}, {""var"": ""entry"", ""rename"": ""transformed_field_entries""}, {""var"": ""fieldtype"", ""rename"": ""field_type_name""}, {""var"": ""new_entry"", ""rename"": ""formatted_entry""}, {""var"": ""fieldtype_name"", ""rename"": ""field_category_identifier""}, {""var"": ""field_body"", ""rename"": ""field_content""}, {""var"": ""xrefs"", ""rename"": ""cross_references""}, {""var"": ""target"", ""rename"": ""field_content_text""}, {""var"": ""groupindices"", ""rename"": ""typeGroupIndices""}, {""var"": ""typedesc"", ""rename"": ""type_description""}, {""var"": ""types"", ""rename"": ""type_content_map""}, {""var"": ""fieldtypes"", ""rename"": ""field_transformations""}, {""var"": ""items"", ""rename"": ""transformed_fields""}, {""var"": ""field"", ""rename"": ""field_entry""}, {""var"": ""new_list"", ""rename"": ""transformed_field_list""}, {""var"": ""is_typefield"", ""rename"": ""is_documented_typefield""}, {""var"": ""typename"", ""rename"": ""fieldTypeName""}, {""var"": ""field_name"", ""rename"": ""field_identifier""}, {""var"": ""translatable_content"", ""rename"": ""translated_inline_content""}, {""var"": ""argtype"", ""rename"": ""argument_type""}, {""var"": ""new_fieldname"", ""rename"": ""formatted_fieldname""}, {""var"": ""fieldarg"", ""rename"": ""field_argument""}]"
