file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sympy/polys/polytools.py,_symbolic_factor_list,compute_symbolic_factorization_list,5898,5953,"def _symbolic_factor_list(expr, opt, method):
    """"""Helper function for :func:`_symbolic_factor`. """"""
    coeff, factors = (S.One, [])
    args = [i._eval_factor() if hasattr(i, '_eval_factor') else i for i in Mul.make_args(expr)]
    for arg in args:
        if arg.is_Number:
            coeff *= arg
            continue
        if arg.is_Mul:
            args.extend(arg.args)
            continue
        if arg.is_Pow:
            base, exp = arg.args
            if base.is_Number and exp.is_Number:
                coeff *= arg
                continue
            if base.is_Number:
                factors.append((base, exp))
                continue
        else:
            base, exp = (arg, S.One)
        try:
            poly, _ = _poly_from_expr(base, opt)
        except PolificationFailed as exc:
            factors.append((exc.expr, exp))
        else:
            func = getattr(poly, method + '_list')
            _coeff, _factors = func()
            if _coeff is not S.One:
                if exp.is_Integer:
                    coeff *= _coeff ** exp
                elif _coeff.is_positive:
                    factors.append((_coeff, exp))
                else:
                    _factors.append((_coeff, S.One))
            if exp is S.One:
                factors.extend(_factors)
            elif exp.is_integer:
                factors.extend([(f, k * exp) for f, k in _factors])
            else:
                other = []
                for f, k in _factors:
                    if f.as_expr().is_positive:
                        factors.append((f, k * exp))
                    else:
                        other.append((f, k))
                factors.append((_factors_product(other), exp))
    return (coeff, factors)","def compute_symbolic_factorization_list(expr, opt, method):
    """"""Helper function for :func:`_symbolic_factor`. """"""
    coeff, factors = (S.One, [])
    args = [i._eval_factor() if hasattr(i, '_eval_factor') else i for i in Mul.make_args(expr)]
    for arg in args:
        if arg.is_Number:
            coeff *= arg
            continue
        if arg.is_Mul:
            args.extend(arg.args)
            continue
        if arg.is_Pow:
            base, exp = arg.args
            if base.is_Number and exp.is_Number:
                coeff *= arg
                continue
            if base.is_Number:
                factors.append((base, exp))
                continue
        else:
            base, exp = (arg, S.One)
        try:
            poly, _ = _poly_from_expr(base, opt)
        except PolificationFailed as exc:
            factors.append((exc.expr, exp))
        else:
            func = getattr(poly, method + '_list')
            _coeff, _factors = func()
            if _coeff is not S.One:
                if exp.is_Integer:
                    coeff *= _coeff ** exp
                elif _coeff.is_positive:
                    factors.append((_coeff, exp))
                else:
                    _factors.append((_coeff, S.One))
            if exp is S.One:
                factors.extend(_factors)
            elif exp.is_integer:
                factors.extend([(f, k * exp) for f, k in _factors])
            else:
                other = []
                for f, k in _factors:
                    if f.as_expr().is_positive:
                        factors.append((f, k * exp))
                    else:
                        other.append((f, k))
                factors.append((_factors_product(other), exp))
    return (coeff, factors)","[{""var"": ""exp"", ""rename"": ""exponent""}, {""var"": ""_factors"", ""rename"": ""polynomial_factors""}, {""var"": ""coeff"", ""rename"": ""numerical_coefficient""}, {""var"": ""poly"", ""rename"": ""polynomial_expressions""}, {""var"": ""k"", ""rename"": ""factorial_exponent""}, {""var"": ""arg"", ""rename"": ""expression_argument""}, {""var"": ""i"", ""rename"": ""expression_element""}, {""var"": ""other"", ""rename"": ""unresolved_factors""}, {""var"": ""f"", ""rename"": ""symbolic_factors_result""}, {""var"": ""_"", ""rename"": ""symbolic_factor_decomposition""}, {""var"": ""_coeff"", ""rename"": ""coefficient_product""}, {""var"": ""base"", ""rename"": ""base_expression""}, {""var"": ""func"", ""rename"": ""factorization_method_function""}, {""var"": ""args"", ""rename"": ""expression_components""}, {""var"": ""factors"", ""rename"": ""symbolic_factor_tuples""}]"
