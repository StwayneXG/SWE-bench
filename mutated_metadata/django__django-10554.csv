file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/db/models/sql/compiler.py,get_order_by,generate_order_by_clause_details,254,371,"def get_order_by(self):
    """"""
        Return a list of 2-tuples of form (expr, (sql, params, is_ref)) for the
        ORDER BY clause.

        The order_by clause can alter the select clause (for example it
        can add aliases to clauses that do not yet have one, or it can
        add totally new select clauses).
        """"""
    if self.query.extra_order_by:
        ordering = self.query.extra_order_by
    elif not self.query.default_ordering:
        ordering = self.query.order_by
    elif self.query.order_by:
        ordering = self.query.order_by
    elif self.query.get_meta().ordering:
        ordering = self.query.get_meta().ordering
        self._meta_ordering = ordering
    else:
        ordering = []
    if self.query.standard_ordering:
        asc, desc = ORDER_DIR['ASC']
    else:
        asc, desc = ORDER_DIR['DESC']
    order_by = []
    for field in ordering:
        if hasattr(field, 'resolve_expression'):
            if isinstance(field, Value):
                field = Cast(field, field.output_field)
            if not isinstance(field, OrderBy):
                field = field.asc()
            if not self.query.standard_ordering:
                field = field.copy()
                field.reverse_ordering()
            order_by.append((field, False))
            continue
        if field == '?':
            order_by.append((OrderBy(Random()), False))
            continue
        col, order = get_order_dir(field, asc)
        descending = order == 'DESC'
        if col in self.query.annotation_select:
            order_by.append((OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending), True))
            continue
        if col in self.query.annotations:
            expr = self.query.annotations[col]
            if isinstance(expr, Value):
                expr = Cast(expr, expr.output_field)
            order_by.append((OrderBy(expr, descending=descending), False))
            continue
        if '.' in field:
            table, col = col.split('.', 1)
            order_by.append((OrderBy(RawSQL('%s.%s' % (self.quote_name_unless_alias(table), col), []), descending=descending), False))
            continue
        if not self.query.extra or col not in self.query.extra:
            order_by.extend(self.find_ordering_name(field, self.query.get_meta(), default_order=asc))
        elif col not in self.query.extra_select:
            order_by.append((OrderBy(RawSQL(*self.query.extra[col]), descending=descending), False))
        else:
            order_by.append((OrderBy(Ref(col, RawSQL(*self.query.extra[col])), descending=descending), True))
    result = []
    seen = set()
    for expr, is_ref in order_by:
        resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)
        if self.query.combinator:
            src = resolved.get_source_expressions()[0]
            for idx, (sel_expr, _, col_alias) in enumerate(self.select):
                if is_ref and col_alias == src.refs:
                    src = src.source
                elif col_alias:
                    continue
                if src == sel_expr:
                    resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
                    break
            else:
                raise DatabaseError('ORDER BY term does not match any column in the result set.')
        sql, params = self.compile(resolved)
        without_ordering = self.ordering_parts.search(sql).group(1)
        params_hash = make_hashable(params)
        if (without_ordering, params_hash) in seen:
            continue
        seen.add((without_ordering, params_hash))
        result.append((resolved, (sql, params, is_ref)))
    return result","def generate_order_by_clause_details(self):
    """"""
        Return a list of 2-tuples of form (expr, (sql, params, is_ref)) for the
        ORDER BY clause.

        The order_by clause can alter the select clause (for example it
        can add aliases to clauses that do not yet have one, or it can
        add totally new select clauses).
        """"""
    if self.query.extra_order_by:
        ordering = self.query.extra_order_by
    elif not self.query.default_ordering:
        ordering = self.query.order_by
    elif self.query.order_by:
        ordering = self.query.order_by
    elif self.query.get_meta().ordering:
        ordering = self.query.get_meta().ordering
        self._meta_ordering = ordering
    else:
        ordering = []
    if self.query.standard_ordering:
        asc, desc = ORDER_DIR['ASC']
    else:
        asc, desc = ORDER_DIR['DESC']
    order_by = []
    for field in ordering:
        if hasattr(field, 'resolve_expression'):
            if isinstance(field, Value):
                field = Cast(field, field.output_field)
            if not isinstance(field, OrderBy):
                field = field.asc()
            if not self.query.standard_ordering:
                field = field.copy()
                field.reverse_ordering()
            order_by.append((field, False))
            continue
        if field == '?':
            order_by.append((OrderBy(Random()), False))
            continue
        col, order = get_order_dir(field, asc)
        descending = order == 'DESC'
        if col in self.query.annotation_select:
            order_by.append((OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending), True))
            continue
        if col in self.query.annotations:
            expr = self.query.annotations[col]
            if isinstance(expr, Value):
                expr = Cast(expr, expr.output_field)
            order_by.append((OrderBy(expr, descending=descending), False))
            continue
        if '.' in field:
            table, col = col.split('.', 1)
            order_by.append((OrderBy(RawSQL('%s.%s' % (self.quote_name_unless_alias(table), col), []), descending=descending), False))
            continue
        if not self.query.extra or col not in self.query.extra:
            order_by.extend(self.find_ordering_name(field, self.query.get_meta(), default_order=asc))
        elif col not in self.query.extra_select:
            order_by.append((OrderBy(RawSQL(*self.query.extra[col]), descending=descending), False))
        else:
            order_by.append((OrderBy(Ref(col, RawSQL(*self.query.extra[col])), descending=descending), True))
    result = []
    seen = set()
    for expr, is_ref in order_by:
        resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)
        if self.query.combinator:
            src = resolved.get_source_expressions()[0]
            for idx, (sel_expr, _, col_alias) in enumerate(self.select):
                if is_ref and col_alias == src.refs:
                    src = src.source
                elif col_alias:
                    continue
                if src == sel_expr:
                    resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
                    break
            else:
                raise DatabaseError('ORDER BY term does not match any column in the result set.')
        sql, params = self.compile(resolved)
        without_ordering = self.ordering_parts.search(sql).group(1)
        params_hash = make_hashable(params)
        if (without_ordering, params_hash) in seen:
            continue
        seen.add((without_ordering, params_hash))
        result.append((resolved, (sql, params, is_ref)))
    return result","[{""var"": ""params"", ""rename"": ""order_by_parameters""}, {""var"": ""params_hash"", ""rename"": ""hashed_query_parameters""}, {""var"": ""expr"", ""rename"": ""annotation_expression""}, {""var"": ""without_ordering"", ""rename"": ""original_sql_without_ordering""}, {""var"": ""result"", ""rename"": ""order_by_clauses_with_metadata""}, {""var"": ""seen"", ""rename"": ""processed_orders_set""}, {""var"": ""resolved"", ""rename"": ""resolved_expression""}, {""var"": ""desc"", ""rename"": ""descending_order_flag""}, {""var"": ""sql"", ""rename"": ""sql_query_fragment""}, {""var"": ""asc"", ""rename"": ""ascending_order_token""}, {""var"": ""order"", ""rename"": ""order_by_clause_components""}, {""var"": ""col"", ""rename"": ""column_name""}, {""var"": ""ordering"", ""rename"": ""order_criteria""}, {""var"": ""order_by"", ""rename"": ""ordering_criteria""}, {""var"": ""idx"", ""rename"": ""selection_index""}, {""var"": ""col_alias"", ""rename"": ""column_alias""}, {""var"": ""field"", ""rename"": ""ordering_field""}, {""var"": ""sel_expr"", ""rename"": ""selected_expression""}, {""var"": ""_"", ""rename"": ""order_by_clause_details""}, {""var"": ""src"", ""rename"": ""source_expression""}, {""var"": ""is_ref"", ""rename"": ""is_reference_expression""}, {""var"": ""descending"", ""rename"": ""is_descending_order""}, {""var"": ""table"", ""rename"": ""order_table_name""}]"
./django/db/models/sql/query.py,set_select,configure_selected_columns,1777,1779,"def set_select(self, cols):
    self.default_cols = False
    self.select = tuple(cols)","def configure_selected_columns(self, cols):
    self.default_cols = False
    self.select = tuple(cols)",[]
