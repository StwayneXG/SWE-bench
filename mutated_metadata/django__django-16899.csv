file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/contrib/admin/checks.py,_check_readonly_fields_item,"python
validate_readonly_field_in_object_or_model",761,786,"def _check_readonly_fields_item(self, obj, field_name, label):
    if callable(field_name):
        return []
    elif hasattr(obj, field_name):
        return []
    elif hasattr(obj.model, field_name):
        return []
    else:
        try:
            obj.model._meta.get_field(field_name)
        except FieldDoesNotExist:
            return [checks.Error(""The value of '%s' is not a callable, an attribute of '%s', or an attribute of '%s'."" % (label, obj.__class__.__name__, obj.model._meta.label), obj=obj.__class__, id='admin.E035')]
        else:
            return []","def python
validate_readonly_field_in_object_or_model(self, obj, field_name, label):
    if callable(field_name):
        return []
    elif hasattr(obj, field_name):
        return []
    elif hasattr(obj.model, field_name):
        return []
    else:
        try:
            obj.model._meta.get_field(field_name)
        except FieldDoesNotExist:
            return [checks.Error(""The value of '%s' is not a callable, an attribute of '%s', or an attribute of '%s'."" % (label, obj.__class__.__name__, obj.model._meta.label), obj=obj.__class__, id='admin.E035')]
        else:
            return []",[]
