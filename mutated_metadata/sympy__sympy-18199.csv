file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sympy/ntheory/residue_ntheory.py,nthroot_mod,compute_nth_root_modulo,746,807,"def nthroot_mod(a, n, p, all_roots=False):
    """"""
    Find the solutions to ``x**n = a mod p``

    Parameters
    ==========

    a : integer
    n : positive integer
    p : positive integer
    all_roots : if False returns the smallest root, else the list of roots

    Examples
    ========

    >>> from sympy.ntheory.residue_ntheory import nthroot_mod
    >>> nthroot_mod(11, 4, 19)
    8
    >>> nthroot_mod(11, 4, 19, True)
    [8, 11]
    >>> nthroot_mod(68, 3, 109)
    23
    """"""
    from sympy.core.numbers import igcdex
    a, n, p = (as_int(a), as_int(n), as_int(p))
    if n == 2:
        return sqrt_mod(a, p, all_roots)
    if not is_nthpow_residue(a, n, p):
        return None
    if not isprime(p):
        raise NotImplementedError('Not implemented for composite p')
    if (p - 1) % n == 0:
        return _nthroot_mod1(a, n, p, all_roots)
    pa = n
    pb = p - 1
    b = 1
    if pa < pb:
        a, pa, b, pb = (b, pb, a, pa)
    while pb:
        q, r = divmod(pa, pb)
        c = pow(b, q, p)
        c = igcdex(c, p)[0]
        c = c * a % p
        pa, pb = (pb, r)
        a, b = (b, c)
    if pa == 1:
        if all_roots:
            res = [a]
        else:
            res = a
    elif pa == 2:
        return sqrt_mod(a, p, all_roots)
    else:
        res = _nthroot_mod1(a, pa, p, all_roots)
    return res","def compute_nth_root_modulo(a, n, p, all_roots=False):
    """"""
    Find the solutions to ``x**n = a mod p``

    Parameters
    ==========

    a : integer
    n : positive integer
    p : positive integer
    all_roots : if False returns the smallest root, else the list of roots

    Examples
    ========

    >>> from sympy.ntheory.residue_ntheory import nthroot_mod
    >>> nthroot_mod(11, 4, 19)
    8
    >>> nthroot_mod(11, 4, 19, True)
    [8, 11]
    >>> nthroot_mod(68, 3, 109)
    23
    """"""
    from sympy.core.numbers import igcdex
    a, n, p = (as_int(a), as_int(n), as_int(p))
    if n == 2:
        return sqrt_mod(a, p, all_roots)
    if not is_nthpow_residue(a, n, p):
        return None
    if not isprime(p):
        raise NotImplementedError('Not implemented for composite p')
    if (p - 1) % n == 0:
        return _nthroot_mod1(a, n, p, all_roots)
    pa = n
    pb = p - 1
    b = 1
    if pa < pb:
        a, pa, b, pb = (b, pb, a, pa)
    while pb:
        q, r = divmod(pa, pb)
        c = pow(b, q, p)
        c = igcdex(c, p)[0]
        c = c * a % p
        pa, pb = (pb, r)
        a, b = (b, c)
    if pa == 1:
        if all_roots:
            res = [a]
        else:
            res = a
    elif pa == 2:
        return sqrt_mod(a, p, all_roots)
    else:
        res = _nthroot_mod1(a, pa, p, all_roots)
    return res","[{""var"": ""c"", ""rename"": ""temp_coefficient""}, {""var"": ""r"", ""rename"": ""remainder""}, {""var"": ""pb"", ""rename"": ""modulus_order_minus_one""}, {""var"": ""res"", ""rename"": ""root_solution""}, {""var"": ""pa"", ""rename"": ""exponent_value""}, {""var"": ""q"", ""rename"": ""quotient""}, {""var"": ""b"", ""rename"": ""temp_modular_value""}]"
./sympy/ntheory/residue_ntheory.py,quadratic_residues,compute_quadratic_residues_modulo,810,825,"def quadratic_residues(p):
    """"""
    Returns the list of quadratic residues.

    Examples
    ========

    >>> from sympy.ntheory.residue_ntheory import quadratic_residues
    >>> quadratic_residues(7)
    [0, 1, 2, 4]
    """"""
    p = as_int(p)
    r = set()
    for i in range(p // 2 + 1):
        r.add(pow(i, 2, p))
    return sorted(list(r))","def compute_quadratic_residues_modulo(p):
    """"""
    Returns the list of quadratic residues.

    Examples
    ========

    >>> from sympy.ntheory.residue_ntheory import quadratic_residues
    >>> quadratic_residues(7)
    [0, 1, 2, 4]
    """"""
    p = as_int(p)
    r = set()
    for i in range(p // 2 + 1):
        r.add(pow(i, 2, p))
    return sorted(list(r))","[{""var"": ""i"", ""rename"": ""possible_residue_candidate""}, {""var"": ""r"", ""rename"": ""quadratic_residue_set""}]"
