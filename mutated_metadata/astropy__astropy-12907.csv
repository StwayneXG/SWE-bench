file,method_name,new_method_name,start_line,end_line,original_code,code,var
./astropy/modeling/separable.py,_cstack,combine_and_stack_models,219,247,"def _cstack(left, right):
    """"""
    Function corresponding to '&' operation.

    Parameters
    ----------
    left, right : `astropy.modeling.Model` or ndarray
        If input is of an array, it is the output of `coord_matrix`.

    Returns
    -------
    result : ndarray
        Result from this operation.

    """"""
    noutp = _compute_n_outputs(left, right)
    if isinstance(left, Model):
        cleft = _coord_matrix(left, 'left', noutp)
    else:
        cleft = np.zeros((noutp, left.shape[1]))
        cleft[:left.shape[0], :left.shape[1]] = left
    if isinstance(right, Model):
        cright = _coord_matrix(right, 'right', noutp)
    else:
        cright = np.zeros((noutp, right.shape[1]))
        cright[-right.shape[0]:, -right.shape[1]:] = 1
    return np.hstack([cleft, cright])","def combine_and_stack_models(left, right):
    """"""
    Function corresponding to '&' operation.

    Parameters
    ----------
    left, right : `astropy.modeling.Model` or ndarray
        If input is of an array, it is the output of `coord_matrix`.

    Returns
    -------
    result : ndarray
        Result from this operation.

    """"""
    noutp = _compute_n_outputs(left, right)
    if isinstance(left, Model):
        cleft = _coord_matrix(left, 'left', noutp)
    else:
        cleft = np.zeros((noutp, left.shape[1]))
        cleft[:left.shape[0], :left.shape[1]] = left
    if isinstance(right, Model):
        cright = _coord_matrix(right, 'right', noutp)
    else:
        cright = np.zeros((noutp, right.shape[1]))
        cright[-right.shape[0]:, -right.shape[1]:] = 1
    return np.hstack([cleft, cright])","[{""var"": ""noutp"", ""rename"": ""num_output_channels""}, {""var"": ""cleft"", ""rename"": ""left_coord_matrix""}, {""var"": ""cright"", ""rename"": ""right_coord_matrix""}]"
