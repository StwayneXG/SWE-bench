file,method_name,new_method_name,start_line,end_line,original_code,code,var
./xarray/core/computation.py,where,conditional_select,1730,1820,"def where(cond, x, y):
    """"""Return elements from `x` or `y` depending on `cond`.

    Performs xarray-like broadcasting across input arguments.

    All dimension coordinates on `x` and `y`  must be aligned with each
    other and with `cond`.

    Parameters
    ----------
    cond : scalar, array, Variable, DataArray or Dataset
        When True, return values from `x`, otherwise returns values from `y`.
    x : scalar, array, Variable, DataArray or Dataset
        values to choose from where `cond` is True
    y : scalar, array, Variable, DataArray or Dataset
        values to choose from where `cond` is False

    Returns
    -------
    Dataset, DataArray, Variable or array
        In priority order: Dataset, DataArray, Variable or array, whichever
        type appears as an input argument.

    Examples
    --------
    >>> x = xr.DataArray(
    ...     0.1 * np.arange(10),
    ...     dims=[""lat""],
    ...     coords={""lat"": np.arange(10)},
    ...     name=""sst"",
    ... )
    >>> x
    <xarray.DataArray 'sst' (lat: 10)>
    array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])
    Coordinates:
      * lat      (lat) int64 0 1 2 3 4 5 6 7 8 9

    >>> xr.where(x < 0.5, x, x * 100)
    <xarray.DataArray 'sst' (lat: 10)>
    array([ 0. ,  0.1,  0.2,  0.3,  0.4, 50. , 60. , 70. , 80. , 90. ])
    Coordinates:
      * lat      (lat) int64 0 1 2 3 4 5 6 7 8 9

    >>> y = xr.DataArray(
    ...     0.1 * np.arange(9).reshape(3, 3),
    ...     dims=[""lat"", ""lon""],
    ...     coords={""lat"": np.arange(3), ""lon"": 10 + np.arange(3)},
    ...     name=""sst"",
    ... )
    >>> y
    <xarray.DataArray 'sst' (lat: 3, lon: 3)>
    array([[0. , 0.1, 0.2],
           [0.3, 0.4, 0.5],
           [0.6, 0.7, 0.8]])
    Coordinates:
      * lat      (lat) int64 0 1 2
      * lon      (lon) int64 10 11 12

    >>> xr.where(y.lat < 1, y, -1)
    <xarray.DataArray (lat: 3, lon: 3)>
    array([[ 0. ,  0.1,  0.2],
           [-1. , -1. , -1. ],
           [-1. , -1. , -1. ]])
    Coordinates:
      * lat      (lat) int64 0 1 2
      * lon      (lon) int64 10 11 12

    >>> cond = xr.DataArray([True, False], dims=[""x""])
    >>> x = xr.DataArray([1, 2], dims=[""y""])
    >>> xr.where(cond, x, 0)
    <xarray.DataArray (x: 2, y: 2)>
    array([[1, 2],
           [0, 0]])
    Dimensions without coordinates: x, y

    See Also
    --------
    numpy.where : corresponding numpy function
    Dataset.where, DataArray.where :
        equivalent methods
    """"""
    return apply_ufunc(duck_array_ops.where, cond, x, y, join='exact', dataset_join='exact', dask='allowed')","def conditional_select(cond, x, y):
    """"""Return elements from `x` or `y` depending on `cond`.

    Performs xarray-like broadcasting across input arguments.

    All dimension coordinates on `x` and `y`  must be aligned with each
    other and with `cond`.

    Parameters
    ----------
    cond : scalar, array, Variable, DataArray or Dataset
        When True, return values from `x`, otherwise returns values from `y`.
    x : scalar, array, Variable, DataArray or Dataset
        values to choose from where `cond` is True
    y : scalar, array, Variable, DataArray or Dataset
        values to choose from where `cond` is False

    Returns
    -------
    Dataset, DataArray, Variable or array
        In priority order: Dataset, DataArray, Variable or array, whichever
        type appears as an input argument.

    Examples
    --------
    >>> x = xr.DataArray(
    ...     0.1 * np.arange(10),
    ...     dims=[""lat""],
    ...     coords={""lat"": np.arange(10)},
    ...     name=""sst"",
    ... )
    >>> x
    <xarray.DataArray 'sst' (lat: 10)>
    array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])
    Coordinates:
      * lat      (lat) int64 0 1 2 3 4 5 6 7 8 9

    >>> xr.where(x < 0.5, x, x * 100)
    <xarray.DataArray 'sst' (lat: 10)>
    array([ 0. ,  0.1,  0.2,  0.3,  0.4, 50. , 60. , 70. , 80. , 90. ])
    Coordinates:
      * lat      (lat) int64 0 1 2 3 4 5 6 7 8 9

    >>> y = xr.DataArray(
    ...     0.1 * np.arange(9).reshape(3, 3),
    ...     dims=[""lat"", ""lon""],
    ...     coords={""lat"": np.arange(3), ""lon"": 10 + np.arange(3)},
    ...     name=""sst"",
    ... )
    >>> y
    <xarray.DataArray 'sst' (lat: 3, lon: 3)>
    array([[0. , 0.1, 0.2],
           [0.3, 0.4, 0.5],
           [0.6, 0.7, 0.8]])
    Coordinates:
      * lat      (lat) int64 0 1 2
      * lon      (lon) int64 10 11 12

    >>> xr.where(y.lat < 1, y, -1)
    <xarray.DataArray (lat: 3, lon: 3)>
    array([[ 0. ,  0.1,  0.2],
           [-1. , -1. , -1. ],
           [-1. , -1. , -1. ]])
    Coordinates:
      * lat      (lat) int64 0 1 2
      * lon      (lon) int64 10 11 12

    >>> cond = xr.DataArray([True, False], dims=[""x""])
    >>> x = xr.DataArray([1, 2], dims=[""y""])
    >>> xr.where(cond, x, 0)
    <xarray.DataArray (x: 2, y: 2)>
    array([[1, 2],
           [0, 0]])
    Dimensions without coordinates: x, y

    See Also
    --------
    numpy.where : corresponding numpy function
    Dataset.where, DataArray.where :
        equivalent methods
    """"""
    return apply_ufunc(duck_array_ops.where, cond, x, y, join='exact', dataset_join='exact', dask='allowed')",[]
./xarray/core/computation.py,polyval,evaluate_polynomial_on_coordinates,1823,1852,"def polyval(coord, coeffs, degree_dim='degree'):
    """"""Evaluate a polynomial at specific values

    Parameters
    ----------
    coord : DataArray
        The 1D coordinate along which to evaluate the polynomial.
    coeffs : DataArray
        Coefficients of the polynomials.
    degree_dim : str, default: ""degree""
        Name of the polynomial degree dimension in `coeffs`.

    See Also
    --------
    xarray.DataArray.polyfit
    numpy.polyval
    """"""
    from .dataarray import DataArray
    from .missing import get_clean_interp_index
    x = get_clean_interp_index(coord, coord.name, strict=False)
    deg_coord = coeffs[degree_dim]
    lhs = DataArray(np.vander(x, int(deg_coord.max()) + 1), dims=(coord.name, degree_dim), coords={coord.name: coord, degree_dim: np.arange(deg_coord.max() + 1)[::-1]})
    return (lhs * coeffs).sum(degree_dim)","def evaluate_polynomial_on_coordinates(coord, coeffs, degree_dim='degree'):
    """"""Evaluate a polynomial at specific values

    Parameters
    ----------
    coord : DataArray
        The 1D coordinate along which to evaluate the polynomial.
    coeffs : DataArray
        Coefficients of the polynomials.
    degree_dim : str, default: ""degree""
        Name of the polynomial degree dimension in `coeffs`.

    See Also
    --------
    xarray.DataArray.polyfit
    numpy.polyval
    """"""
    from .dataarray import DataArray
    from .missing import get_clean_interp_index
    x = get_clean_interp_index(coord, coord.name, strict=False)
    deg_coord = coeffs[degree_dim]
    lhs = DataArray(np.vander(x, int(deg_coord.max()) + 1), dims=(coord.name, degree_dim), coords={coord.name: coord, degree_dim: np.arange(deg_coord.max() + 1)[::-1]})
    return (lhs * coeffs).sum(degree_dim)","[{""var"": ""x"", ""rename"": ""clean_interp_index""}, {""var"": ""deg_coord"", ""rename"": ""polynomial_degree_values""}, {""var"": ""lhs"", ""rename"": ""vandermonde_matrix""}]"
