file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sympy/assumptions/ask.py,get_known_facts,establish_mathematical_relations,1476,1527,"@cacheit
def get_known_facts():
    return And(Implies(Q.infinite, ~Q.finite), Implies(Q.real, Q.complex), Implies(Q.real, Q.hermitian), Equivalent(Q.extended_real, Q.real | Q.infinite), Equivalent(Q.even | Q.odd, Q.integer), Implies(Q.even, ~Q.odd), Equivalent(Q.prime, Q.integer & Q.positive & ~Q.composite), Implies(Q.integer, Q.rational), Implies(Q.rational, Q.algebraic), Implies(Q.algebraic, Q.complex), Equivalent(Q.transcendental | Q.algebraic, Q.complex), Implies(Q.transcendental, ~Q.algebraic), Implies(Q.imaginary, Q.complex & ~Q.real), Implies(Q.imaginary, Q.antihermitian), Implies(Q.antihermitian, ~Q.hermitian), Equivalent(Q.irrational | Q.rational, Q.real), Implies(Q.irrational, ~Q.rational), Implies(Q.zero, Q.even), Equivalent(Q.real, Q.negative | Q.zero | Q.positive), Implies(Q.zero, ~Q.negative & ~Q.positive), Implies(Q.negative, ~Q.positive), Equivalent(Q.nonnegative, Q.zero | Q.positive), Equivalent(Q.nonpositive, Q.zero | Q.negative), Equivalent(Q.nonzero, Q.negative | Q.positive), Implies(Q.orthogonal, Q.positive_definite), Implies(Q.orthogonal, Q.unitary), Implies(Q.unitary & Q.real, Q.orthogonal), Implies(Q.unitary, Q.normal), Implies(Q.unitary, Q.invertible), Implies(Q.normal, Q.square), Implies(Q.diagonal, Q.normal), Implies(Q.positive_definite, Q.invertible), Implies(Q.diagonal, Q.upper_triangular), Implies(Q.diagonal, Q.lower_triangular), Implies(Q.lower_triangular, Q.triangular), Implies(Q.upper_triangular, Q.triangular), Implies(Q.triangular, Q.upper_triangular | Q.lower_triangular), Implies(Q.upper_triangular & Q.lower_triangular, Q.diagonal), Implies(Q.diagonal, Q.symmetric), Implies(Q.unit_triangular, Q.triangular), Implies(Q.invertible, Q.fullrank), Implies(Q.invertible, Q.square), Implies(Q.symmetric, Q.square), Implies(Q.fullrank & Q.square, Q.invertible), Equivalent(Q.invertible, ~Q.singular), Implies(Q.integer_elements, Q.real_elements), Implies(Q.real_elements, Q.complex_elements))","@cacheit
def establish_mathematical_relations():
    return And(Implies(Q.infinite, ~Q.finite), Implies(Q.real, Q.complex), Implies(Q.real, Q.hermitian), Equivalent(Q.extended_real, Q.real | Q.infinite), Equivalent(Q.even | Q.odd, Q.integer), Implies(Q.even, ~Q.odd), Equivalent(Q.prime, Q.integer & Q.positive & ~Q.composite), Implies(Q.integer, Q.rational), Implies(Q.rational, Q.algebraic), Implies(Q.algebraic, Q.complex), Equivalent(Q.transcendental | Q.algebraic, Q.complex), Implies(Q.transcendental, ~Q.algebraic), Implies(Q.imaginary, Q.complex & ~Q.real), Implies(Q.imaginary, Q.antihermitian), Implies(Q.antihermitian, ~Q.hermitian), Equivalent(Q.irrational | Q.rational, Q.real), Implies(Q.irrational, ~Q.rational), Implies(Q.zero, Q.even), Equivalent(Q.real, Q.negative | Q.zero | Q.positive), Implies(Q.zero, ~Q.negative & ~Q.positive), Implies(Q.negative, ~Q.positive), Equivalent(Q.nonnegative, Q.zero | Q.positive), Equivalent(Q.nonpositive, Q.zero | Q.negative), Equivalent(Q.nonzero, Q.negative | Q.positive), Implies(Q.orthogonal, Q.positive_definite), Implies(Q.orthogonal, Q.unitary), Implies(Q.unitary & Q.real, Q.orthogonal), Implies(Q.unitary, Q.normal), Implies(Q.unitary, Q.invertible), Implies(Q.normal, Q.square), Implies(Q.diagonal, Q.normal), Implies(Q.positive_definite, Q.invertible), Implies(Q.diagonal, Q.upper_triangular), Implies(Q.diagonal, Q.lower_triangular), Implies(Q.lower_triangular, Q.triangular), Implies(Q.upper_triangular, Q.triangular), Implies(Q.triangular, Q.upper_triangular | Q.lower_triangular), Implies(Q.upper_triangular & Q.lower_triangular, Q.diagonal), Implies(Q.diagonal, Q.symmetric), Implies(Q.unit_triangular, Q.triangular), Implies(Q.invertible, Q.fullrank), Implies(Q.invertible, Q.square), Implies(Q.symmetric, Q.square), Implies(Q.fullrank & Q.square, Q.invertible), Equivalent(Q.invertible, ~Q.singular), Implies(Q.integer_elements, Q.real_elements), Implies(Q.real_elements, Q.complex_elements))",[]
./sympy/assumptions/ask_generated.py,get_known_facts_cnf,derive_logical_facts_from_propositions,15,86,"@cacheit
def get_known_facts_cnf():
    return And(Q.invertible | Q.singular, Q.algebraic | ~Q.rational, Q.antihermitian | ~Q.imaginary, Q.complex | ~Q.algebraic, Q.complex | ~Q.imaginary, Q.complex | ~Q.real, Q.complex | ~Q.transcendental, Q.complex_elements | ~Q.real_elements, Q.even | ~Q.zero, Q.extended_real | ~Q.infinite, Q.extended_real | ~Q.real, Q.fullrank | ~Q.invertible, Q.hermitian | ~Q.real, Q.integer | ~Q.even, Q.integer | ~Q.odd, Q.integer | ~Q.prime, Q.invertible | ~Q.positive_definite, Q.invertible | ~Q.unitary, Q.lower_triangular | ~Q.diagonal, Q.nonnegative | ~Q.positive, Q.nonnegative | ~Q.zero, Q.nonpositive | ~Q.negative, Q.nonpositive | ~Q.zero, Q.nonzero | ~Q.negative, Q.nonzero | ~Q.positive, Q.normal | ~Q.diagonal, Q.normal | ~Q.unitary, Q.positive | ~Q.prime, Q.positive_definite | ~Q.orthogonal, Q.rational | ~Q.integer, Q.real | ~Q.irrational, Q.real | ~Q.negative, Q.real | ~Q.positive, Q.real | ~Q.rational, Q.real | ~Q.zero, Q.real_elements | ~Q.integer_elements, Q.square | ~Q.invertible, Q.square | ~Q.normal, Q.square | ~Q.symmetric, Q.symmetric | ~Q.diagonal, Q.triangular | ~Q.lower_triangular, Q.triangular | ~Q.unit_triangular, Q.triangular | ~Q.upper_triangular, Q.unitary | ~Q.orthogonal, Q.upper_triangular | ~Q.diagonal, ~Q.algebraic | ~Q.transcendental, ~Q.antihermitian | ~Q.hermitian, ~Q.composite | ~Q.prime, ~Q.even | ~Q.odd, ~Q.finite | ~Q.infinite, ~Q.imaginary | ~Q.real, ~Q.invertible | ~Q.singular, ~Q.irrational | ~Q.rational, ~Q.negative | ~Q.positive, ~Q.negative | ~Q.zero, ~Q.positive | ~Q.zero, Q.algebraic | Q.transcendental | ~Q.complex, Q.even | Q.odd | ~Q.integer, Q.infinite | Q.real | ~Q.extended_real, Q.irrational | Q.rational | ~Q.real, Q.lower_triangular | Q.upper_triangular | ~Q.triangular, Q.negative | Q.positive | ~Q.nonzero, Q.negative | Q.zero | ~Q.nonpositive, Q.positive | Q.zero | ~Q.nonnegative, Q.diagonal | ~Q.lower_triangular | ~Q.upper_triangular, Q.invertible | ~Q.fullrank | ~Q.square, Q.orthogonal | ~Q.real | ~Q.unitary, Q.negative | Q.positive | Q.zero | ~Q.real, Q.composite | Q.prime | ~Q.integer | ~Q.positive)","@cacheit
def derive_logical_facts_from_propositions():
    return And(Q.invertible | Q.singular, Q.algebraic | ~Q.rational, Q.antihermitian | ~Q.imaginary, Q.complex | ~Q.algebraic, Q.complex | ~Q.imaginary, Q.complex | ~Q.real, Q.complex | ~Q.transcendental, Q.complex_elements | ~Q.real_elements, Q.even | ~Q.zero, Q.extended_real | ~Q.infinite, Q.extended_real | ~Q.real, Q.fullrank | ~Q.invertible, Q.hermitian | ~Q.real, Q.integer | ~Q.even, Q.integer | ~Q.odd, Q.integer | ~Q.prime, Q.invertible | ~Q.positive_definite, Q.invertible | ~Q.unitary, Q.lower_triangular | ~Q.diagonal, Q.nonnegative | ~Q.positive, Q.nonnegative | ~Q.zero, Q.nonpositive | ~Q.negative, Q.nonpositive | ~Q.zero, Q.nonzero | ~Q.negative, Q.nonzero | ~Q.positive, Q.normal | ~Q.diagonal, Q.normal | ~Q.unitary, Q.positive | ~Q.prime, Q.positive_definite | ~Q.orthogonal, Q.rational | ~Q.integer, Q.real | ~Q.irrational, Q.real | ~Q.negative, Q.real | ~Q.positive, Q.real | ~Q.rational, Q.real | ~Q.zero, Q.real_elements | ~Q.integer_elements, Q.square | ~Q.invertible, Q.square | ~Q.normal, Q.square | ~Q.symmetric, Q.symmetric | ~Q.diagonal, Q.triangular | ~Q.lower_triangular, Q.triangular | ~Q.unit_triangular, Q.triangular | ~Q.upper_triangular, Q.unitary | ~Q.orthogonal, Q.upper_triangular | ~Q.diagonal, ~Q.algebraic | ~Q.transcendental, ~Q.antihermitian | ~Q.hermitian, ~Q.composite | ~Q.prime, ~Q.even | ~Q.odd, ~Q.finite | ~Q.infinite, ~Q.imaginary | ~Q.real, ~Q.invertible | ~Q.singular, ~Q.irrational | ~Q.rational, ~Q.negative | ~Q.positive, ~Q.negative | ~Q.zero, ~Q.positive | ~Q.zero, Q.algebraic | Q.transcendental | ~Q.complex, Q.even | Q.odd | ~Q.integer, Q.infinite | Q.real | ~Q.extended_real, Q.irrational | Q.rational | ~Q.real, Q.lower_triangular | Q.upper_triangular | ~Q.triangular, Q.negative | Q.positive | ~Q.nonzero, Q.negative | Q.zero | ~Q.nonpositive, Q.positive | Q.zero | ~Q.nonnegative, Q.diagonal | ~Q.lower_triangular | ~Q.upper_triangular, Q.invertible | ~Q.fullrank | ~Q.square, Q.orthogonal | ~Q.real | ~Q.unitary, Q.negative | Q.positive | Q.zero | ~Q.real, Q.composite | Q.prime | ~Q.integer | ~Q.positive)",[]
./sympy/assumptions/ask_generated.py,get_known_facts_dict,generate_property_implications_map,90,153,"@cacheit
def get_known_facts_dict():
    return {Q.algebraic: set([Q.algebraic, Q.complex]), Q.antihermitian: set([Q.antihermitian]), Q.commutative: set([Q.commutative]), Q.complex: set([Q.complex]), Q.complex_elements: set([Q.complex_elements]), Q.composite: set([Q.composite]), Q.diagonal: set([Q.diagonal, Q.lower_triangular, Q.normal, Q.square, Q.symmetric, Q.triangular, Q.upper_triangular]), Q.even: set([Q.algebraic, Q.complex, Q.even, Q.extended_real, Q.hermitian, Q.integer, Q.rational, Q.real]), Q.extended_real: set([Q.extended_real]), Q.finite: set([Q.finite]), Q.fullrank: set([Q.fullrank]), Q.hermitian: set([Q.hermitian]), Q.imaginary: set([Q.antihermitian, Q.complex, Q.imaginary]), Q.infinite: set([Q.extended_real, Q.infinite]), Q.integer: set([Q.algebraic, Q.complex, Q.extended_real, Q.hermitian, Q.integer, Q.rational, Q.real]), Q.integer_elements: set([Q.complex_elements, Q.integer_elements, Q.real_elements]), Q.invertible: set([Q.fullrank, Q.invertible, Q.square]), Q.irrational: set([Q.complex, Q.extended_real, Q.hermitian, Q.irrational, Q.nonzero, Q.real]), Q.is_true: set([Q.is_true]), Q.lower_triangular: set([Q.lower_triangular, Q.triangular]), Q.negative: set([Q.complex, Q.extended_real, Q.hermitian, Q.negative, Q.nonpositive, Q.nonzero, Q.real]), Q.nonnegative: set([Q.complex, Q.extended_real, Q.hermitian, Q.nonnegative, Q.real]), Q.nonpositive: set([Q.complex, Q.extended_real, Q.hermitian, Q.nonpositive, Q.real]), Q.nonzero: set([Q.complex, Q.extended_real, Q.hermitian, Q.nonzero, Q.real]), Q.normal: set([Q.normal, Q.square]), Q.odd: set([Q.algebraic, Q.complex, Q.extended_real, Q.hermitian, Q.integer, Q.nonzero, Q.odd, Q.rational, Q.real]), Q.orthogonal: set([Q.fullrank, Q.invertible, Q.normal, Q.orthogonal, Q.positive_definite, Q.square, Q.unitary]), Q.positive: set([Q.complex, Q.extended_real, Q.hermitian, Q.nonnegative, Q.nonzero, Q.positive, Q.real]), Q.positive_definite: set([Q.fullrank, Q.invertible, Q.positive_definite, Q.square]), Q.prime: set([Q.algebraic, Q.complex, Q.extended_real, Q.hermitian, Q.integer, Q.nonnegative, Q.nonzero, Q.positive, Q.prime, Q.rational, Q.real]), Q.rational: set([Q.algebraic, Q.complex, Q.extended_real, Q.hermitian, Q.rational, Q.real]), Q.real: set([Q.complex, Q.extended_real, Q.hermitian, Q.real]), Q.real_elements: set([Q.complex_elements, Q.real_elements]), Q.singular: set([Q.singular]), Q.square: set([Q.square]), Q.symmetric: set([Q.square, Q.symmetric]), Q.transcendental: set([Q.complex, Q.transcendental]), Q.triangular: set([Q.triangular]), Q.unit_triangular: set([Q.triangular, Q.unit_triangular]), Q.unitary: set([Q.fullrank, Q.invertible, Q.normal, Q.square, Q.unitary]), Q.upper_triangular: set([Q.triangular, Q.upper_triangular]), Q.zero: set([Q.algebraic, Q.complex, Q.even, Q.extended_real, Q.hermitian, Q.integer, Q.nonnegative, Q.nonpositive, Q.rational, Q.real, Q.zero])}","@cacheit
def generate_property_implications_map():
    return {Q.algebraic: set([Q.algebraic, Q.complex]), Q.antihermitian: set([Q.antihermitian]), Q.commutative: set([Q.commutative]), Q.complex: set([Q.complex]), Q.complex_elements: set([Q.complex_elements]), Q.composite: set([Q.composite]), Q.diagonal: set([Q.diagonal, Q.lower_triangular, Q.normal, Q.square, Q.symmetric, Q.triangular, Q.upper_triangular]), Q.even: set([Q.algebraic, Q.complex, Q.even, Q.extended_real, Q.hermitian, Q.integer, Q.rational, Q.real]), Q.extended_real: set([Q.extended_real]), Q.finite: set([Q.finite]), Q.fullrank: set([Q.fullrank]), Q.hermitian: set([Q.hermitian]), Q.imaginary: set([Q.antihermitian, Q.complex, Q.imaginary]), Q.infinite: set([Q.extended_real, Q.infinite]), Q.integer: set([Q.algebraic, Q.complex, Q.extended_real, Q.hermitian, Q.integer, Q.rational, Q.real]), Q.integer_elements: set([Q.complex_elements, Q.integer_elements, Q.real_elements]), Q.invertible: set([Q.fullrank, Q.invertible, Q.square]), Q.irrational: set([Q.complex, Q.extended_real, Q.hermitian, Q.irrational, Q.nonzero, Q.real]), Q.is_true: set([Q.is_true]), Q.lower_triangular: set([Q.lower_triangular, Q.triangular]), Q.negative: set([Q.complex, Q.extended_real, Q.hermitian, Q.negative, Q.nonpositive, Q.nonzero, Q.real]), Q.nonnegative: set([Q.complex, Q.extended_real, Q.hermitian, Q.nonnegative, Q.real]), Q.nonpositive: set([Q.complex, Q.extended_real, Q.hermitian, Q.nonpositive, Q.real]), Q.nonzero: set([Q.complex, Q.extended_real, Q.hermitian, Q.nonzero, Q.real]), Q.normal: set([Q.normal, Q.square]), Q.odd: set([Q.algebraic, Q.complex, Q.extended_real, Q.hermitian, Q.integer, Q.nonzero, Q.odd, Q.rational, Q.real]), Q.orthogonal: set([Q.fullrank, Q.invertible, Q.normal, Q.orthogonal, Q.positive_definite, Q.square, Q.unitary]), Q.positive: set([Q.complex, Q.extended_real, Q.hermitian, Q.nonnegative, Q.nonzero, Q.positive, Q.real]), Q.positive_definite: set([Q.fullrank, Q.invertible, Q.positive_definite, Q.square]), Q.prime: set([Q.algebraic, Q.complex, Q.extended_real, Q.hermitian, Q.integer, Q.nonnegative, Q.nonzero, Q.positive, Q.prime, Q.rational, Q.real]), Q.rational: set([Q.algebraic, Q.complex, Q.extended_real, Q.hermitian, Q.rational, Q.real]), Q.real: set([Q.complex, Q.extended_real, Q.hermitian, Q.real]), Q.real_elements: set([Q.complex_elements, Q.real_elements]), Q.singular: set([Q.singular]), Q.square: set([Q.square]), Q.symmetric: set([Q.square, Q.symmetric]), Q.transcendental: set([Q.complex, Q.transcendental]), Q.triangular: set([Q.triangular]), Q.unit_triangular: set([Q.triangular, Q.unit_triangular]), Q.unitary: set([Q.fullrank, Q.invertible, Q.normal, Q.square, Q.unitary]), Q.upper_triangular: set([Q.triangular, Q.upper_triangular]), Q.zero: set([Q.algebraic, Q.complex, Q.even, Q.extended_real, Q.hermitian, Q.integer, Q.nonnegative, Q.nonpositive, Q.rational, Q.real, Q.zero])}",[]
./sympy/core/power.py,_eval_is_rational,determine_rationality_of_expression,1182,1198,"def _eval_is_rational(self):
    p = self.func(*self.as_base_exp())
    if not p.is_Pow:
        return p.is_rational
    b, e = p.as_base_exp()
    if e.is_Rational and b.is_Rational:
        return False
    if e.is_integer:
        if b.is_rational:
            if fuzzy_not(b.is_zero) or e.is_nonnegative:
                return True
            if b == e:
                return True
        elif b.is_irrational:
            return e.is_zero","def determine_rationality_of_expression(self):
    p = self.func(*self.as_base_exp())
    if not p.is_Pow:
        return p.is_rational
    b, e = p.as_base_exp()
    if e.is_Rational and b.is_Rational:
        return False
    if e.is_integer:
        if b.is_rational:
            if fuzzy_not(b.is_zero) or e.is_nonnegative:
                return True
            if b == e:
                return True
        elif b.is_irrational:
            return e.is_zero","[{""var"": ""p"", ""rename"": ""base_expression""}, {""var"": ""e"", ""rename"": ""exponent""}, {""var"": ""b"", ""rename"": ""base_value""}]"
./sympy/printing/tree.py,print_tree,display_symbolic_expression_tree,75,125,"def print_tree(node):
    """"""
    Prints a tree representation of ""node"".

    Examples
    ========

    >>> from sympy.printing import print_tree
    >>> from sympy import Symbol
    >>> x = Symbol('x', odd=True)
    >>> y = Symbol('y', even=True)
    >>> print_tree(y**x)
    Pow: y**x
    +-Symbol: y
    | algebraic: True
    | commutative: True
    | complex: True
    | even: True
    | hermitian: True
    | imaginary: False
    | integer: True
    | irrational: False
    | noninteger: False
    | odd: False
    | rational: True
    | real: True
    | transcendental: False
    +-Symbol: x
      algebraic: True
      commutative: True
      complex: True
      even: False
      hermitian: True
      imaginary: False
      integer: True
      irrational: False
      noninteger: False
      nonzero: True
      odd: True
      rational: True
      real: True
      transcendental: False
      zero: False

    See Also
    ========

    tree

    """"""
    print(tree(node))","def display_symbolic_expression_tree(node):
    """"""
    Prints a tree representation of ""node"".

    Examples
    ========

    >>> from sympy.printing import print_tree
    >>> from sympy import Symbol
    >>> x = Symbol('x', odd=True)
    >>> y = Symbol('y', even=True)
    >>> print_tree(y**x)
    Pow: y**x
    +-Symbol: y
    | algebraic: True
    | commutative: True
    | complex: True
    | even: True
    | hermitian: True
    | imaginary: False
    | integer: True
    | irrational: False
    | noninteger: False
    | odd: False
    | rational: True
    | real: True
    | transcendental: False
    +-Symbol: x
      algebraic: True
      commutative: True
      complex: True
      even: False
      hermitian: True
      imaginary: False
      integer: True
      irrational: False
      noninteger: False
      nonzero: True
      odd: True
      rational: True
      real: True
      transcendental: False
      zero: False

    See Also
    ========

    tree

    """"""
    print(tree(node))",[]
./sympy/tensor/indexed.py,__new__,create_index_object,585,622,"def __new__(cls, label, range=None, **kw_args):
    from sympy.utilities.misc import filldedent
    if isinstance(label, string_types):
        label = Symbol(label, integer=True)
    label, range = list(map(sympify, (label, range)))
    if label.is_Number:
        if not label.is_integer:
            raise TypeError('Index is not an integer number.')
        return label
    if not label.is_integer:
        raise TypeError('Idx object requires an integer label.')
    elif is_sequence(range):
        if len(range) != 2:
            raise ValueError(filldedent('\n                    Idx range tuple must have length 2, but got %s' % len(range)))
        for bound in range:
            if bound.is_integer is False:
                raise TypeError('Idx object requires integer bounds.')
        args = (label, Tuple(*range))
    elif isinstance(range, Expr):
        if not (range.is_integer or range is S.Infinity):
            raise TypeError('Idx object requires an integer dimension.')
        args = (label, Tuple(0, range - 1))
    elif range:
        raise TypeError(filldedent('\n                The range must be an ordered iterable or\n                integer SymPy expression.'))
    else:
        args = (label,)
    obj = Expr.__new__(cls, *args, **kw_args)
    obj._assumptions['finite'] = True
    obj._assumptions['real'] = True
    return obj","def create_index_object(cls, label, range=None, **kw_args):
    from sympy.utilities.misc import filldedent
    if isinstance(label, string_types):
        label = Symbol(label, integer=True)
    label, range = list(map(sympify, (label, range)))
    if label.is_Number:
        if not label.is_integer:
            raise TypeError('Index is not an integer number.')
        return label
    if not label.is_integer:
        raise TypeError('Idx object requires an integer label.')
    elif is_sequence(range):
        if len(range) != 2:
            raise ValueError(filldedent('\n                    Idx range tuple must have length 2, but got %s' % len(range)))
        for bound in range:
            if bound.is_integer is False:
                raise TypeError('Idx object requires integer bounds.')
        args = (label, Tuple(*range))
    elif isinstance(range, Expr):
        if not (range.is_integer or range is S.Infinity):
            raise TypeError('Idx object requires an integer dimension.')
        args = (label, Tuple(0, range - 1))
    elif range:
        raise TypeError(filldedent('\n                The range must be an ordered iterable or\n                integer SymPy expression.'))
    else:
        args = (label,)
    obj = Expr.__new__(cls, *args, **kw_args)
    obj._assumptions['finite'] = True
    obj._assumptions['real'] = True
    return obj","[{""var"": ""bound"", ""rename"": ""range_boundary""}, {""var"": ""obj"", ""rename"": ""indexed_expression""}, {""var"": ""args"", ""rename"": ""index_parameters""}]"
