file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/core/management/commands/makemigrations.py,add_arguments,configure_migration_parser_arguments,29,92,"def add_arguments(self, parser):
    parser.add_argument('args', metavar='app_label', nargs='*', help='Specify the app label(s) to create migrations for.')
    parser.add_argument('--dry-run', action='store_true', help=""Just show what migrations would be made; don't actually write them."")
    parser.add_argument('--merge', action='store_true', help='Enable fixing of migration conflicts.')
    parser.add_argument('--empty', action='store_true', help='Create an empty migration.')
    parser.add_argument('--noinput', '--no-input', action='store_false', dest='interactive', help='Tells Django to NOT prompt the user for input of any kind.')
    parser.add_argument('-n', '--name', help='Use this name for migration file(s).')
    parser.add_argument('--no-header', action='store_false', dest='include_header', help='Do not add header comments to new migration file(s).')
    parser.add_argument('--check', action='store_true', dest='check_changes', help='Exit with a non-zero status if model changes are missing migrations.')
    parser.add_argument('--scriptable', action='store_true', dest='scriptable', help='Divert log output and input prompts to stderr, writing only paths of generated migration files to stdout.')
    parser.add_argument('--update', action='store_true', dest='update', help='Merge model changes into the latest migration and optimize the resulting operations.')","def configure_migration_parser_arguments(self, parser):
    parser.add_argument('args', metavar='app_label', nargs='*', help='Specify the app label(s) to create migrations for.')
    parser.add_argument('--dry-run', action='store_true', help=""Just show what migrations would be made; don't actually write them."")
    parser.add_argument('--merge', action='store_true', help='Enable fixing of migration conflicts.')
    parser.add_argument('--empty', action='store_true', help='Create an empty migration.')
    parser.add_argument('--noinput', '--no-input', action='store_false', dest='interactive', help='Tells Django to NOT prompt the user for input of any kind.')
    parser.add_argument('-n', '--name', help='Use this name for migration file(s).')
    parser.add_argument('--no-header', action='store_false', dest='include_header', help='Do not add header comments to new migration file(s).')
    parser.add_argument('--check', action='store_true', dest='check_changes', help='Exit with a non-zero status if model changes are missing migrations.')
    parser.add_argument('--scriptable', action='store_true', dest='scriptable', help='Divert log output and input prompts to stderr, writing only paths of generated migration files to stdout.')
    parser.add_argument('--update', action='store_true', dest='update', help='Merge model changes into the latest migration and optimize the resulting operations.')",[]
./django/core/management/commands/makemigrations.py,handle,manage_migrations,102,256,"@no_translations
def handle(self, *app_labels, **options):
    self.written_files = []
    self.verbosity = options['verbosity']
    self.interactive = options['interactive']
    self.dry_run = options['dry_run']
    self.merge = options['merge']
    self.empty = options['empty']
    self.migration_name = options['name']
    if self.migration_name and (not self.migration_name.isidentifier()):
        raise CommandError('The migration name must be a valid Python identifier.')
    self.include_header = options['include_header']
    check_changes = options['check_changes']
    self.scriptable = options['scriptable']
    self.update = options['update']
    if self.scriptable:
        self.stderr.style_func = None
    app_labels = set(app_labels)
    has_bad_labels = False
    for app_label in app_labels:
        try:
            apps.get_app_config(app_label)
        except LookupError as err:
            self.stderr.write(str(err))
            has_bad_labels = True
    if has_bad_labels:
        sys.exit(2)
    loader = MigrationLoader(None, ignore_no_migrations=True)
    consistency_check_labels = {config.label for config in apps.get_app_configs()}
    aliases_to_check = connections if settings.DATABASE_ROUTERS else [DEFAULT_DB_ALIAS]
    for alias in sorted(aliases_to_check):
        connection = connections[alias]
        if connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any((router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name) for app_label in consistency_check_labels for model in apps.get_app_config(app_label).get_models())):
            try:
                loader.check_consistent_history(connection)
            except OperationalError as error:
                warnings.warn(""Got an error checking a consistent migration history performed for database connection '%s': %s"" % (alias, error), RuntimeWarning)
    conflicts = loader.detect_conflicts()
    if app_labels:
        conflicts = {app_label: conflict for app_label, conflict in conflicts.items() if app_label in app_labels}
    if conflicts and (not self.merge):
        name_str = '; '.join(('%s in %s' % (', '.join(names), app) for app, names in conflicts.items()))
        raise CommandError(""Conflicting migrations detected; multiple leaf nodes in the migration graph: (%s).\nTo fix them run 'python manage.py makemigrations --merge'"" % name_str)
    if self.merge and (not conflicts):
        self.log('No conflicts detected to merge.')
        return
    if self.merge and conflicts:
        return self.handle_merge(loader, conflicts)
    if self.interactive:
        questioner = InteractiveMigrationQuestioner(specified_apps=app_labels, dry_run=self.dry_run, prompt_output=self.log_output)
    else:
        questioner = NonInteractiveMigrationQuestioner(specified_apps=app_labels, dry_run=self.dry_run, verbosity=self.verbosity, log=self.log)
    autodetector = MigrationAutodetector(loader.project_state(), ProjectState.from_apps(apps), questioner)
    if self.empty:
        if not app_labels:
            raise CommandError('You must supply at least one app label when using --empty.')
        changes = {app: [Migration('custom', app)] for app in app_labels}
        changes = autodetector.arrange_for_graph(changes=changes, graph=loader.graph, migration_name=self.migration_name)
        self.write_migration_files(changes)
        return
    changes = autodetector.changes(graph=loader.graph, trim_to_apps=app_labels or None, convert_apps=app_labels or None, migration_name=self.migration_name)
    if not changes:
        if self.verbosity >= 1:
            if app_labels:
                if len(app_labels) == 1:
                    self.log(""No changes detected in app '%s'"" % app_labels.pop())
                else:
                    self.log(""No changes detected in apps '%s'"" % ""', '"".join(app_labels))
            else:
                self.log('No changes detected')
    else:
        if self.update:
            self.write_to_last_migration_files(changes)
        else:
            self.write_migration_files(changes)
        if check_changes:
            sys.exit(1)","@no_translations
def manage_migrations(self, *app_labels, **options):
    self.written_files = []
    self.verbosity = options['verbosity']
    self.interactive = options['interactive']
    self.dry_run = options['dry_run']
    self.merge = options['merge']
    self.empty = options['empty']
    self.migration_name = options['name']
    if self.migration_name and (not self.migration_name.isidentifier()):
        raise CommandError('The migration name must be a valid Python identifier.')
    self.include_header = options['include_header']
    check_changes = options['check_changes']
    self.scriptable = options['scriptable']
    self.update = options['update']
    if self.scriptable:
        self.stderr.style_func = None
    app_labels = set(app_labels)
    has_bad_labels = False
    for app_label in app_labels:
        try:
            apps.get_app_config(app_label)
        except LookupError as err:
            self.stderr.write(str(err))
            has_bad_labels = True
    if has_bad_labels:
        sys.exit(2)
    loader = MigrationLoader(None, ignore_no_migrations=True)
    consistency_check_labels = {config.label for config in apps.get_app_configs()}
    aliases_to_check = connections if settings.DATABASE_ROUTERS else [DEFAULT_DB_ALIAS]
    for alias in sorted(aliases_to_check):
        connection = connections[alias]
        if connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any((router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name) for app_label in consistency_check_labels for model in apps.get_app_config(app_label).get_models())):
            try:
                loader.check_consistent_history(connection)
            except OperationalError as error:
                warnings.warn(""Got an error checking a consistent migration history performed for database connection '%s': %s"" % (alias, error), RuntimeWarning)
    conflicts = loader.detect_conflicts()
    if app_labels:
        conflicts = {app_label: conflict for app_label, conflict in conflicts.items() if app_label in app_labels}
    if conflicts and (not self.merge):
        name_str = '; '.join(('%s in %s' % (', '.join(names), app) for app, names in conflicts.items()))
        raise CommandError(""Conflicting migrations detected; multiple leaf nodes in the migration graph: (%s).\nTo fix them run 'python manage.py makemigrations --merge'"" % name_str)
    if self.merge and (not conflicts):
        self.log('No conflicts detected to merge.')
        return
    if self.merge and conflicts:
        return self.handle_merge(loader, conflicts)
    if self.interactive:
        questioner = InteractiveMigrationQuestioner(specified_apps=app_labels, dry_run=self.dry_run, prompt_output=self.log_output)
    else:
        questioner = NonInteractiveMigrationQuestioner(specified_apps=app_labels, dry_run=self.dry_run, verbosity=self.verbosity, log=self.log)
    autodetector = MigrationAutodetector(loader.project_state(), ProjectState.from_apps(apps), questioner)
    if self.empty:
        if not app_labels:
            raise CommandError('You must supply at least one app label when using --empty.')
        changes = {app: [Migration('custom', app)] for app in app_labels}
        changes = autodetector.arrange_for_graph(changes=changes, graph=loader.graph, migration_name=self.migration_name)
        self.write_migration_files(changes)
        return
    changes = autodetector.changes(graph=loader.graph, trim_to_apps=app_labels or None, convert_apps=app_labels or None, migration_name=self.migration_name)
    if not changes:
        if self.verbosity >= 1:
            if app_labels:
                if len(app_labels) == 1:
                    self.log(""No changes detected in app '%s'"" % app_labels.pop())
                else:
                    self.log(""No changes detected in apps '%s'"" % ""', '"".join(app_labels))
            else:
                self.log('No changes detected')
    else:
        if self.update:
            self.write_to_last_migration_files(changes)
        else:
            self.write_migration_files(changes)
        if check_changes:
            sys.exit(1)","[{""var"": ""alias"", ""rename"": ""database_alias""}, {""var"": ""consistency_check_labels"", ""rename"": ""migration_consistency_app_labels""}, {""var"": ""connection"", ""rename"": ""database_connection""}, {""var"": ""conflict"", ""rename"": ""migration_conflicts""}, {""var"": ""changes"", ""rename"": ""migration_changeset""}, {""var"": ""name_str"", ""rename"": ""conflict_summary""}, {""var"": ""aliases_to_check"", ""rename"": ""database_aliases_to_evaluate""}, {""var"": ""model"", ""rename"": ""migration_model""}, {""var"": ""has_bad_labels"", ""rename"": ""has_invalid_app_labels""}, {""var"": ""loader"", ""rename"": ""migration_loader""}, {""var"": ""conflicts"", ""rename"": ""migration_conflicts""}, {""var"": ""autodetector"", ""rename"": ""migration_change_detector""}, {""var"": ""app"", ""rename"": ""application_labels""}, {""var"": ""check_changes"", ""rename"": ""verify_migration_changes""}, {""var"": ""names"", ""rename"": ""conflict_migration_names""}, {""var"": ""config"", ""rename"": ""application_config""}, {""var"": ""app_label"", ""rename"": ""target_app_labels""}, {""var"": ""questioner"", ""rename"": ""migration_questioner""}]"
