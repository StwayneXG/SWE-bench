file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/db/migrations/operations/models.py,database_forwards,update_database_schema_for_model_transition,319,368,"def database_forwards(self, app_label, schema_editor, from_state, to_state):
    new_model = to_state.apps.get_model(app_label, self.new_name)
    if self.allow_migrate_model(schema_editor.connection.alias, new_model):
        old_model = from_state.apps.get_model(app_label, self.old_name)
        schema_editor.alter_db_table(new_model, old_model._meta.db_table, new_model._meta.db_table)
        for related_object in old_model._meta.related_objects:
            if related_object.related_model == old_model:
                model = new_model
                related_key = (app_label, self.new_name_lower)
            else:
                model = related_object.related_model
                related_key = (related_object.related_model._meta.app_label, related_object.related_model._meta.model_name)
            to_field = to_state.apps.get_model(*related_key)._meta.get_field(related_object.field.name)
            schema_editor.alter_field(model, related_object.field, to_field)
        fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)
        for old_field, new_field in fields:
            if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:
                continue
            old_m2m_model = old_field.remote_field.through
            new_m2m_model = new_field.remote_field.through
            schema_editor.alter_db_table(new_m2m_model, old_m2m_model._meta.db_table, new_m2m_model._meta.db_table)
            schema_editor.alter_field(new_m2m_model, old_m2m_model._meta.get_field(old_model._meta.model_name), new_m2m_model._meta.get_field(new_model._meta.model_name))","def update_database_schema_for_model_transition(self, app_label, schema_editor, from_state, to_state):
    new_model = to_state.apps.get_model(app_label, self.new_name)
    if self.allow_migrate_model(schema_editor.connection.alias, new_model):
        old_model = from_state.apps.get_model(app_label, self.old_name)
        schema_editor.alter_db_table(new_model, old_model._meta.db_table, new_model._meta.db_table)
        for related_object in old_model._meta.related_objects:
            if related_object.related_model == old_model:
                model = new_model
                related_key = (app_label, self.new_name_lower)
            else:
                model = related_object.related_model
                related_key = (related_object.related_model._meta.app_label, related_object.related_model._meta.model_name)
            to_field = to_state.apps.get_model(*related_key)._meta.get_field(related_object.field.name)
            schema_editor.alter_field(model, related_object.field, to_field)
        fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)
        for old_field, new_field in fields:
            if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:
                continue
            old_m2m_model = old_field.remote_field.through
            new_m2m_model = new_field.remote_field.through
            schema_editor.alter_db_table(new_m2m_model, old_m2m_model._meta.db_table, new_m2m_model._meta.db_table)
            schema_editor.alter_field(new_m2m_model, old_m2m_model._meta.get_field(old_model._meta.model_name), new_m2m_model._meta.get_field(new_model._meta.model_name))","[{""var"": ""old_m2m_model"", ""rename"": ""previous_m2m_through_model""}, {""var"": ""new_m2m_model"", ""rename"": ""updated_m2m_link_model""}, {""var"": ""new_field"", ""rename"": ""updated_many_to_many_field""}, {""var"": ""model"", ""rename"": ""current_model""}, {""var"": ""old_model"", ""rename"": ""legacy_model_instance""}, {""var"": ""new_model"", ""rename"": ""upgraded_model_instance""}, {""var"": ""related_key"", ""rename"": ""related_model_key""}, {""var"": ""to_field"", ""rename"": ""target_field""}, {""var"": ""old_field"", ""rename"": ""previous_m2m_field""}, {""var"": ""fields"", ""rename"": ""m2m_field_pairs""}, {""var"": ""related_object"", ""rename"": ""legacy_related_object""}]"
