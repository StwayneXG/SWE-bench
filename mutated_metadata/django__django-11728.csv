file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/contrib/admindocs/utils.py,replace_named_groups,substitute_named_groups_with_identifiers,153,187,"def replace_named_groups(pattern):
    """"""
    Find named groups in `pattern` and replace them with the group name. E.g.,
    1. ^(?P<a>\\w+)/b/(\\w+)$ ==> ^<a>/b/(\\w+)$
    2. ^(?P<a>\\w+)/b/(?P<c>\\w+)/$ ==> ^<a>/b/<c>/$
    """"""
    named_group_indices = [(m.start(0), m.end(0), m.group(1)) for m in named_group_matcher.finditer(pattern)]
    group_pattern_and_name = []
    for start, end, group_name in named_group_indices:
        unmatched_open_brackets, prev_char = (1, None)
        for idx, val in enumerate(pattern[end:]):
            if unmatched_open_brackets == 0:
                group_pattern_and_name.append((pattern[start:end + idx], group_name))
                break
            if val == '(' and prev_char != '\\':
                unmatched_open_brackets += 1
            elif val == ')' and prev_char != '\\':
                unmatched_open_brackets -= 1
            prev_char = val
    for group_pattern, group_name in group_pattern_and_name:
        pattern = pattern.replace(group_pattern, group_name)
    return pattern","def substitute_named_groups_with_identifiers(pattern):
    """"""
    Find named groups in `pattern` and replace them with the group name. E.g.,
    1. ^(?P<a>\\w+)/b/(\\w+)$ ==> ^<a>/b/(\\w+)$
    2. ^(?P<a>\\w+)/b/(?P<c>\\w+)/$ ==> ^<a>/b/<c>/$
    """"""
    named_group_indices = [(m.start(0), m.end(0), m.group(1)) for m in named_group_matcher.finditer(pattern)]
    group_pattern_and_name = []
    for start, end, group_name in named_group_indices:
        unmatched_open_brackets, prev_char = (1, None)
        for idx, val in enumerate(pattern[end:]):
            if unmatched_open_brackets == 0:
                group_pattern_and_name.append((pattern[start:end + idx], group_name))
                break
            if val == '(' and prev_char != '\\':
                unmatched_open_brackets += 1
            elif val == ')' and prev_char != '\\':
                unmatched_open_brackets -= 1
            prev_char = val
    for group_pattern, group_name in group_pattern_and_name:
        pattern = pattern.replace(group_pattern, group_name)
    return pattern","[{""var"": ""end"", ""rename"": ""group_end_index""}, {""var"": ""val"", ""rename"": ""current_character""}, {""var"": ""named_group_indices"", ""rename"": ""named_group_positions""}, {""var"": ""prev_char"", ""rename"": ""previous_character""}, {""var"": ""m"", ""rename"": ""named_group_match""}, {""var"": ""group_pattern_and_name"", ""rename"": ""group_structure_with_names""}, {""var"": ""group_name"", ""rename"": ""named_group_identifier""}, {""var"": ""start"", ""rename"": ""group_start_index""}, {""var"": ""unmatched_open_brackets"", ""rename"": ""pending_open_bracket_count""}, {""var"": ""group_pattern"", ""rename"": ""pattern_with_named_groups""}, {""var"": ""idx"", ""rename"": ""current_index_in_pattern""}]"
./django/contrib/admindocs/utils.py,replace_unnamed_groups,substitute_anonymous_regex_groups,190,237,"def replace_unnamed_groups(pattern):
    """"""
    Find unnamed groups in `pattern` and replace them with '<var>'. E.g.,
    1. ^(?P<a>\\w+)/b/(\\w+)$ ==> ^(?P<a>\\w+)/b/<var>$
    2. ^(?P<a>\\w+)/b/((x|y)\\w+)$ ==> ^(?P<a>\\w+)/b/<var>$
    """"""
    unnamed_group_indices = [m.start(0) for m in unnamed_group_matcher.finditer(pattern)]
    group_indices = []
    for start in unnamed_group_indices:
        unmatched_open_brackets, prev_char = (1, None)
        for idx, val in enumerate(pattern[start + 1:]):
            if unmatched_open_brackets == 0:
                group_indices.append((start, start + 1 + idx))
                break
            if val == '(' and prev_char != '\\':
                unmatched_open_brackets += 1
            elif val == ')' and prev_char != '\\':
                unmatched_open_brackets -= 1
            prev_char = val
    group_start_end_indices = []
    prev_end = None
    for start, end in group_indices:
        if prev_end and start > prev_end or not prev_end:
            group_start_end_indices.append((start, end))
        prev_end = end
    if group_start_end_indices:
        final_pattern, prev_end = ([], None)
        for start, end in group_start_end_indices:
            if prev_end:
                final_pattern.append(pattern[prev_end:start])
            final_pattern.append(pattern[:start] + '<var>')
            prev_end = end
        final_pattern.append(pattern[prev_end:])
        return ''.join(final_pattern)
    else:
        return pattern","def substitute_anonymous_regex_groups(pattern):
    """"""
    Find unnamed groups in `pattern` and replace them with '<var>'. E.g.,
    1. ^(?P<a>\\w+)/b/(\\w+)$ ==> ^(?P<a>\\w+)/b/<var>$
    2. ^(?P<a>\\w+)/b/((x|y)\\w+)$ ==> ^(?P<a>\\w+)/b/<var>$
    """"""
    unnamed_group_indices = [m.start(0) for m in unnamed_group_matcher.finditer(pattern)]
    group_indices = []
    for start in unnamed_group_indices:
        unmatched_open_brackets, prev_char = (1, None)
        for idx, val in enumerate(pattern[start + 1:]):
            if unmatched_open_brackets == 0:
                group_indices.append((start, start + 1 + idx))
                break
            if val == '(' and prev_char != '\\':
                unmatched_open_brackets += 1
            elif val == ')' and prev_char != '\\':
                unmatched_open_brackets -= 1
            prev_char = val
    group_start_end_indices = []
    prev_end = None
    for start, end in group_indices:
        if prev_end and start > prev_end or not prev_end:
            group_start_end_indices.append((start, end))
        prev_end = end
    if group_start_end_indices:
        final_pattern, prev_end = ([], None)
        for start, end in group_start_end_indices:
            if prev_end:
                final_pattern.append(pattern[prev_end:start])
            final_pattern.append(pattern[:start] + '<var>')
            prev_end = end
        final_pattern.append(pattern[prev_end:])
        return ''.join(final_pattern)
    else:
        return pattern","[{""var"": ""val"", ""rename"": ""character""}, {""var"": ""end"", ""rename"": ""group_end_index""}, {""var"": ""prev_char"", ""rename"": ""previous_character""}, {""var"": ""group_start_end_indices"", ""rename"": ""unnamed_group_boundaries""}, {""var"": ""group_indices"", ""rename"": ""group_start_end_positions""}, {""var"": ""m"", ""rename"": ""match_object""}, {""var"": ""idx"", ""rename"": ""current_pattern_index""}, {""var"": ""prev_end"", ""rename"": ""previous_group_end_index""}, {""var"": ""start"", ""rename"": ""starting_index""}, {""var"": ""unmatched_open_brackets"", ""rename"": ""nested_parentheses_count""}, {""var"": ""unnamed_group_indices"", ""rename"": ""unnamed_group_start_indices""}, {""var"": ""final_pattern"", ""rename"": ""transformed_pattern_with_replacements""}]"
