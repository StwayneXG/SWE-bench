file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sympy/polys/matrices/normalforms.py,_hermite_normal_form,compute_hermite_normal_form_zz,177,248,"def _hermite_normal_form(A):
    """"""
    Compute the Hermite Normal Form of DomainMatrix *A* over :ref:`ZZ`.

    Parameters
    ==========

    A : :py:class:`~.DomainMatrix` over domain :ref:`ZZ`.

    Returns
    =======

    :py:class:`~.DomainMatrix`
        The HNF of matrix *A*.

    Raises
    ======

    DMDomainError
        If the domain of the matrix is not :ref:`ZZ`.

    References
    ==========

    .. [1] Cohen, H. *A Course in Computational Algebraic Number Theory.*
       (See Algorithm 2.4.5.)

    """"""
    if not A.domain.is_ZZ:
        raise DMDomainError('Matrix must be over domain ZZ.')
    m, n = A.shape
    rows = min(m, n)
    A = A.to_dense().rep.copy()
    k = n
    for i in range(m - 1, m - 1 - rows, -1):
        k -= 1
        for j in range(k - 1, -1, -1):
            if A[i][j] != 0:
                u, v, d = _gcdex(A[i][k], A[i][j])
                r, s = (A[i][k] // d, A[i][j] // d)
                add_columns(A, k, j, u, v, -s, r)
        b = A[i][k]
        if b < 0:
            add_columns(A, k, k, -1, 0, -1, 0)
            b = -b
        if b == 0:
            k += 1
        else:
            for j in range(k + 1, n):
                q = A[i][j] // b
                add_columns(A, j, k, 1, -q, 0, 1)
    return DomainMatrix.from_rep(A)[:, k:]","def compute_hermite_normal_form_zz(A):
    """"""
    Compute the Hermite Normal Form of DomainMatrix *A* over :ref:`ZZ`.

    Parameters
    ==========

    A : :py:class:`~.DomainMatrix` over domain :ref:`ZZ`.

    Returns
    =======

    :py:class:`~.DomainMatrix`
        The HNF of matrix *A*.

    Raises
    ======

    DMDomainError
        If the domain of the matrix is not :ref:`ZZ`.

    References
    ==========

    .. [1] Cohen, H. *A Course in Computational Algebraic Number Theory.*
       (See Algorithm 2.4.5.)

    """"""
    if not A.domain.is_ZZ:
        raise DMDomainError('Matrix must be over domain ZZ.')
    m, n = A.shape
    rows = min(m, n)
    A = A.to_dense().rep.copy()
    k = n
    for i in range(m - 1, m - 1 - rows, -1):
        k -= 1
        for j in range(k - 1, -1, -1):
            if A[i][j] != 0:
                u, v, d = _gcdex(A[i][k], A[i][j])
                r, s = (A[i][k] // d, A[i][j] // d)
                add_columns(A, k, j, u, v, -s, r)
        b = A[i][k]
        if b < 0:
            add_columns(A, k, k, -1, 0, -1, 0)
            b = -b
        if b == 0:
            k += 1
        else:
            for j in range(k + 1, n):
                q = A[i][j] // b
                add_columns(A, j, k, 1, -q, 0, 1)
    return DomainMatrix.from_rep(A)[:, k:]","[{""var"": ""s"", ""rename"": ""column_coefficient""}, {""var"": ""k"", ""rename"": ""rightmost_nonzero_col_index""}, {""var"": ""r"", ""rename"": ""reduced_numerator""}, {""var"": ""n"", ""rename"": ""num_columns""}, {""var"": ""i"", ""rename"": ""row_index""}, {""var"": ""u"", ""rename"": ""gcd_coefficient_u""}, {""var"": ""m"", ""rename"": ""num_rows""}, {""var"": ""rows"", ""rename"": ""min_dimension""}, {""var"": ""j"", ""rename"": ""python\nupper_bound_column""}, {""var"": ""v"", ""rename"": ""gcd_v_coefficient""}, {""var"": ""q"", ""rename"": ""column_scaling_factor""}, {""var"": ""d"", ""rename"": ""gcd_coefficient""}, {""var"": ""b"", ""rename"": ""pivot_element""}]"
