file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sympy/printing/codeprinter.py,_print_Mul,_multiply_and_format_expression,454,503,"def _print_Mul(self, expr):
    prec = precedence(expr)
    c, e = expr.as_coeff_Mul()
    if c < 0:
        expr = _keep_coeff(-c, e)
        sign = '-'
    else:
        sign = ''
    a = []
    b = []
    pow_paren = []
    if self.order not in ('old', 'none'):
        args = expr.as_ordered_factors()
    else:
        args = Mul.make_args(expr)
    for item in args:
        if item.is_commutative and item.is_Pow and item.exp.is_Rational and item.exp.is_negative:
            if item.exp != -1:
                b.append(Pow(item.base, -item.exp, evaluate=False))
            else:
                if len(item.args[0].args) != 1 and isinstance(item.base, Mul):
                    pow_paren.append(item)
                b.append(Pow(item.base, -item.exp))
        else:
            a.append(item)
    a = a or [S.One]
    a_str = [self.parenthesize(x, prec) for x in a]
    b_str = [self.parenthesize(x, prec) for x in b]
    for item in pow_paren:
        if item.base in b:
            b_str[b.index(item.base)] = '(%s)' % b_str[b.index(item.base)]
    if not b:
        return sign + '*'.join(a_str)
    elif len(b) == 1:
        return sign + '*'.join(a_str) + '/' + b_str[0]
    else:
        return sign + '*'.join(a_str) + '/(%s)' % '*'.join(b_str)","def _multiply_and_format_expression(self, expr):
    prec = precedence(expr)
    c, e = expr.as_coeff_Mul()
    if c < 0:
        expr = _keep_coeff(-c, e)
        sign = '-'
    else:
        sign = ''
    a = []
    b = []
    pow_paren = []
    if self.order not in ('old', 'none'):
        args = expr.as_ordered_factors()
    else:
        args = Mul.make_args(expr)
    for item in args:
        if item.is_commutative and item.is_Pow and item.exp.is_Rational and item.exp.is_negative:
            if item.exp != -1:
                b.append(Pow(item.base, -item.exp, evaluate=False))
            else:
                if len(item.args[0].args) != 1 and isinstance(item.base, Mul):
                    pow_paren.append(item)
                b.append(Pow(item.base, -item.exp))
        else:
            a.append(item)
    a = a or [S.One]
    a_str = [self.parenthesize(x, prec) for x in a]
    b_str = [self.parenthesize(x, prec) for x in b]
    for item in pow_paren:
        if item.base in b:
            b_str[b.index(item.base)] = '(%s)' % b_str[b.index(item.base)]
    if not b:
        return sign + '*'.join(a_str)
    elif len(b) == 1:
        return sign + '*'.join(a_str) + '/' + b_str[0]
    else:
        return sign + '*'.join(a_str) + '/(%s)' % '*'.join(b_str)","[{""var"": ""c"", ""rename"": ""python\ncoefficient""}, {""var"": ""a"", ""rename"": ""positive_factors""}, {""var"": ""x"", ""rename"": ""numerator_terms""}, {""var"": ""a_str"", ""rename"": ""numerator_str_list""}, {""var"": ""item"", ""rename"": ""factor_term""}, {""var"": ""e"", ""rename"": ""expr_without_coeff""}, {""var"": ""pow_paren"", ""rename"": ""negative_exponent_with_parens""}, {""var"": ""sign"", ""rename"": ""sign_prefix""}, {""var"": ""b_str"", ""rename"": ""denominator_terms_str""}, {""var"": ""args"", ""rename"": ""ordered_factors""}, {""var"": ""prec"", ""rename"": ""expression_precedence""}, {""var"": ""b"", ""rename"": ""negative_power_factors""}]"
