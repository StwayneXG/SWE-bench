file,method_name,new_method_name,start_line,end_line,original_code,code,var
./lib/matplotlib/axes/_base.py,set_xlim,configure_x_axis_limits,3161,3284,"def set_xlim(self, left=None, right=None, emit=True, auto=False, *, xmin=None, xmax=None):
    """"""
        Set the x-axis view limits.

        .. ACCEPTS: (left: float, right: float)

        Parameters
        ----------
        left : scalar, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.

            The left and right xlims may be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).

        right : scalar, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.

        emit : bool, optional
            Whether to notify observers of limit change (default: True).

        auto : bool or None, optional
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off (default action), None leaves unchanged.

        xmin, xmax : scalar, optional
            They are equivalent to left and right respectively,
            and it is an error to pass both *xmin* and *left* or
            *xmax* and *right*.

        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.

        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted

        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.

        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)

        One limit may be left unchanged.

        >>> set_xlim(right=right_lim)

        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.

        >>> set_xlim(5000, 0)

        """"""
    if right is None and np.iterable(left):
        left, right = left
    if xmin is not None:
        if left is not None:
            raise TypeError('Cannot pass both `xmin` and `left`')
        left = xmin
    if xmax is not None:
        if right is not None:
            raise TypeError('Cannot pass both `xmax` and `right`')
        right = xmax
    self._process_unit_info(xdata=(left, right))
    left = self._validate_converted_limits(left, self.convert_xunits)
    right = self._validate_converted_limits(right, self.convert_xunits)
    old_left, old_right = self.get_xlim()
    if left is None:
        left = old_left
    if right is None:
        right = old_right
    if self.get_xscale() == 'log':
        if left <= 0:
            cbook._warn_external('Attempted to set non-positive left xlim on a log-scaled axis.\nInvalid limit will be ignored.')
            left = old_left
        if right <= 0:
            cbook._warn_external('Attempted to set non-positive right xlim on a log-scaled axis.\nInvalid limit will be ignored.')
            right = old_right
    if left == right:
        cbook._warn_external(f'Attempting to set identical left == right == {left} results in singular transformations; automatically expanding.')
    left, right = self.xaxis.get_major_locator().nonsingular(left, right)
    left, right = self.xaxis.limit_range_for_scale(left, right)
    self.viewLim.intervalx = (left, right)
    if auto is not None:
        self._autoscaleXon = bool(auto)
    if emit:
        self.callbacks.process('xlim_changed', self)
        for other in self._shared_x_axes.get_siblings(self):
            if other is not self:
                other.set_xlim(self.viewLim.intervalx, emit=False, auto=auto)
                if other.figure != self.figure:
                    other.figure.canvas.draw_idle()
    self.stale = True
    return (left, right)","def configure_x_axis_limits(self, left=None, right=None, emit=True, auto=False, *, xmin=None, xmax=None):
    """"""
        Set the x-axis view limits.

        .. ACCEPTS: (left: float, right: float)

        Parameters
        ----------
        left : scalar, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.

            The left and right xlims may be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).

        right : scalar, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.

        emit : bool, optional
            Whether to notify observers of limit change (default: True).

        auto : bool or None, optional
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off (default action), None leaves unchanged.

        xmin, xmax : scalar, optional
            They are equivalent to left and right respectively,
            and it is an error to pass both *xmin* and *left* or
            *xmax* and *right*.

        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.

        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted

        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.

        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)

        One limit may be left unchanged.

        >>> set_xlim(right=right_lim)

        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.

        >>> set_xlim(5000, 0)

        """"""
    if right is None and np.iterable(left):
        left, right = left
    if xmin is not None:
        if left is not None:
            raise TypeError('Cannot pass both `xmin` and `left`')
        left = xmin
    if xmax is not None:
        if right is not None:
            raise TypeError('Cannot pass both `xmax` and `right`')
        right = xmax
    self._process_unit_info(xdata=(left, right))
    left = self._validate_converted_limits(left, self.convert_xunits)
    right = self._validate_converted_limits(right, self.convert_xunits)
    old_left, old_right = self.get_xlim()
    if left is None:
        left = old_left
    if right is None:
        right = old_right
    if self.get_xscale() == 'log':
        if left <= 0:
            cbook._warn_external('Attempted to set non-positive left xlim on a log-scaled axis.\nInvalid limit will be ignored.')
            left = old_left
        if right <= 0:
            cbook._warn_external('Attempted to set non-positive right xlim on a log-scaled axis.\nInvalid limit will be ignored.')
            right = old_right
    if left == right:
        cbook._warn_external(f'Attempting to set identical left == right == {left} results in singular transformations; automatically expanding.')
    left, right = self.xaxis.get_major_locator().nonsingular(left, right)
    left, right = self.xaxis.limit_range_for_scale(left, right)
    self.viewLim.intervalx = (left, right)
    if auto is not None:
        self._autoscaleXon = bool(auto)
    if emit:
        self.callbacks.process('xlim_changed', self)
        for other in self._shared_x_axes.get_siblings(self):
            if other is not self:
                other.set_xlim(self.viewLim.intervalx, emit=False, auto=auto)
                if other.figure != self.figure:
                    other.figure.canvas.draw_idle()
    self.stale = True
    return (left, right)","[{""var"": ""old_left"", ""rename"": ""previous_left_xlim""}, {""var"": ""old_right"", ""rename"": ""previous_right_limit""}, {""var"": ""other"", ""rename"": ""sibling_axes""}]"
./lib/matplotlib/axes/_base.py,set_ylim,update_y_axis_limits,3540,3664,"def set_ylim(self, bottom=None, top=None, emit=True, auto=False, *, ymin=None, ymax=None):
    """"""
        Set the y-axis view limits.

        .. ACCEPTS: (bottom: float, top: float)

        Parameters
        ----------
        bottom : scalar, optional
            The bottom ylim in data coordinates. Passing *None* leaves the
            limit unchanged.

            The bottom and top ylims may be passed as the tuple
            (*bottom*, *top*) as the first positional argument (or as
            the *bottom* keyword argument).

        top : scalar, optional
            The top ylim in data coordinates. Passing *None* leaves the
            limit unchanged.

        emit : bool, optional
            Whether to notify observers of limit change (default: ``True``).

        auto : bool or None, optional
            Whether to turn on autoscaling of the y-axis. *True* turns on,
            *False* turns off (default action), *None* leaves unchanged.

        ymin, ymax : scalar, optional
            They are equivalent to bottom and top respectively,
            and it is an error to pass both *ymin* and *bottom* or
            *ymax* and *top*.

        Returns
        -------
        bottom, top : (float, float)
            The new y-axis limits in data coordinates.

        See Also
        --------
        get_ylim
        set_ybound, get_ybound
        invert_yaxis, yaxis_inverted

        Notes
        -----
        The *bottom* value may be greater than the *top* value, in which
        case the y-axis values will decrease from *bottom* to *top*.

        Examples
        --------
        >>> set_ylim(bottom, top)
        >>> set_ylim((bottom, top))
        >>> bottom, top = set_ylim(bottom, top)

        One limit may be left unchanged.

        >>> set_ylim(top=top_lim)

        Limits may be passed in reverse order to flip the direction of
        the y-axis. For example, suppose ``y`` represents depth of the
        ocean in m. The y-axis limits might be set like the following
        so 5000 m depth is at the bottom of the plot and the surface,
        0 m, is at the top.

        >>> set_ylim(5000, 0)
        """"""
    if top is None and np.iterable(bottom):
        bottom, top = bottom
    if ymin is not None:
        if bottom is not None:
            raise TypeError('Cannot pass both `ymin` and `bottom`')
        bottom = ymin
    if ymax is not None:
        if top is not None:
            raise TypeError('Cannot pass both `ymax` and `top`')
        top = ymax
    self._process_unit_info(ydata=(bottom, top))
    bottom = self._validate_converted_limits(bottom, self.convert_yunits)
    top = self._validate_converted_limits(top, self.convert_yunits)
    old_bottom, old_top = self.get_ylim()
    if bottom is None:
        bottom = old_bottom
    if top is None:
        top = old_top
    if self.get_yscale() == 'log':
        if bottom <= 0:
            cbook._warn_external('Attempted to set non-positive bottom ylim on a log-scaled axis.\nInvalid limit will be ignored.')
            bottom = old_bottom
        if top <= 0:
            cbook._warn_external('Attempted to set non-positive top ylim on a log-scaled axis.\nInvalid limit will be ignored.')
            top = old_top
    if bottom == top:
        cbook._warn_external(f'Attempting to set identical bottom == top == {bottom} results in singular transformations; automatically expanding.')
    bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)
    bottom, top = self.yaxis.limit_range_for_scale(bottom, top)
    self.viewLim.intervaly = (bottom, top)
    if auto is not None:
        self._autoscaleYon = bool(auto)
    if emit:
        self.callbacks.process('ylim_changed', self)
        for other in self._shared_y_axes.get_siblings(self):
            if other is not self:
                other.set_ylim(self.viewLim.intervaly, emit=False, auto=auto)
                if other.figure != self.figure:
                    other.figure.canvas.draw_idle()
    self.stale = True
    return (bottom, top)","def update_y_axis_limits(self, bottom=None, top=None, emit=True, auto=False, *, ymin=None, ymax=None):
    """"""
        Set the y-axis view limits.

        .. ACCEPTS: (bottom: float, top: float)

        Parameters
        ----------
        bottom : scalar, optional
            The bottom ylim in data coordinates. Passing *None* leaves the
            limit unchanged.

            The bottom and top ylims may be passed as the tuple
            (*bottom*, *top*) as the first positional argument (or as
            the *bottom* keyword argument).

        top : scalar, optional
            The top ylim in data coordinates. Passing *None* leaves the
            limit unchanged.

        emit : bool, optional
            Whether to notify observers of limit change (default: ``True``).

        auto : bool or None, optional
            Whether to turn on autoscaling of the y-axis. *True* turns on,
            *False* turns off (default action), *None* leaves unchanged.

        ymin, ymax : scalar, optional
            They are equivalent to bottom and top respectively,
            and it is an error to pass both *ymin* and *bottom* or
            *ymax* and *top*.

        Returns
        -------
        bottom, top : (float, float)
            The new y-axis limits in data coordinates.

        See Also
        --------
        get_ylim
        set_ybound, get_ybound
        invert_yaxis, yaxis_inverted

        Notes
        -----
        The *bottom* value may be greater than the *top* value, in which
        case the y-axis values will decrease from *bottom* to *top*.

        Examples
        --------
        >>> set_ylim(bottom, top)
        >>> set_ylim((bottom, top))
        >>> bottom, top = set_ylim(bottom, top)

        One limit may be left unchanged.

        >>> set_ylim(top=top_lim)

        Limits may be passed in reverse order to flip the direction of
        the y-axis. For example, suppose ``y`` represents depth of the
        ocean in m. The y-axis limits might be set like the following
        so 5000 m depth is at the bottom of the plot and the surface,
        0 m, is at the top.

        >>> set_ylim(5000, 0)
        """"""
    if top is None and np.iterable(bottom):
        bottom, top = bottom
    if ymin is not None:
        if bottom is not None:
            raise TypeError('Cannot pass both `ymin` and `bottom`')
        bottom = ymin
    if ymax is not None:
        if top is not None:
            raise TypeError('Cannot pass both `ymax` and `top`')
        top = ymax
    self._process_unit_info(ydata=(bottom, top))
    bottom = self._validate_converted_limits(bottom, self.convert_yunits)
    top = self._validate_converted_limits(top, self.convert_yunits)
    old_bottom, old_top = self.get_ylim()
    if bottom is None:
        bottom = old_bottom
    if top is None:
        top = old_top
    if self.get_yscale() == 'log':
        if bottom <= 0:
            cbook._warn_external('Attempted to set non-positive bottom ylim on a log-scaled axis.\nInvalid limit will be ignored.')
            bottom = old_bottom
        if top <= 0:
            cbook._warn_external('Attempted to set non-positive top ylim on a log-scaled axis.\nInvalid limit will be ignored.')
            top = old_top
    if bottom == top:
        cbook._warn_external(f'Attempting to set identical bottom == top == {bottom} results in singular transformations; automatically expanding.')
    bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)
    bottom, top = self.yaxis.limit_range_for_scale(bottom, top)
    self.viewLim.intervaly = (bottom, top)
    if auto is not None:
        self._autoscaleYon = bool(auto)
    if emit:
        self.callbacks.process('ylim_changed', self)
        for other in self._shared_y_axes.get_siblings(self):
            if other is not self:
                other.set_ylim(self.viewLim.intervaly, emit=False, auto=auto)
                if other.figure != self.figure:
                    other.figure.canvas.draw_idle()
    self.stale = True
    return (bottom, top)","[{""var"": ""old_bottom"", ""rename"": ""previous_y_axis_limit_bottom""}, {""var"": ""other"", ""rename"": ""sibling_axis""}, {""var"": ""old_top"", ""rename"": ""previous_top_limit""}]"
./lib/matplotlib/ticker.py,nonsingular,adjust_range_to_avoid_singularities,1523,1525,"def nonsingular(self, v0, v1):
    """"""Modify the endpoints of a range as needed to avoid singularities.""""""
    return mtransforms.nonsingular(v0, v1, increasing=False, expander=0.05)","def adjust_range_to_avoid_singularities(self, v0, v1):
    """"""Modify the endpoints of a range as needed to avoid singularities.""""""
    return mtransforms.nonsingular(v0, v1, increasing=False, expander=0.05)",[]
./lib/mpl_toolkits/mplot3d/axes3d.py,set_xlim3d,set_3d_x_axis_limits,589,643,"def set_xlim3d(self, left=None, right=None, emit=True, auto=False, *, xmin=None, xmax=None):
    """"""
        Set 3D x limits.

        See :meth:`matplotlib.axes.Axes.set_xlim` for full documentation.

        """"""
    if right is None and np.iterable(left):
        left, right = left
    if xmin is not None:
        cbook.warn_deprecated('3.0', name='`xmin`', alternative='`left`', obj_type='argument')
        if left is not None:
            raise TypeError('Cannot pass both `xmin` and `left`')
        left = xmin
    if xmax is not None:
        cbook.warn_deprecated('3.0', name='`xmax`', alternative='`right`', obj_type='argument')
        if right is not None:
            raise TypeError('Cannot pass both `xmax` and `right`')
        right = xmax
    self._process_unit_info(xdata=(left, right))
    left = self._validate_converted_limits(left, self.convert_xunits)
    right = self._validate_converted_limits(right, self.convert_xunits)
    old_left, old_right = self.get_xlim()
    if left is None:
        left = old_left
    if right is None:
        right = old_right
    if left == right:
        cbook._warn_external(f'Attempting to set identical left == right == {left} results in singular transformations; automatically expanding.')
    left, right = self.xaxis.get_major_locator().nonsingular(left, right)
    left, right = self.xaxis.limit_range_for_scale(left, right)
    self.xy_viewLim.intervalx = (left, right)
    if auto is not None:
        self._autoscaleXon = bool(auto)
    if emit:
        self.callbacks.process('xlim_changed', self)
        for other in self._shared_x_axes.get_siblings(self):
            if other is not self:
                other.set_xlim(self.xy_viewLim.intervalx, emit=False, auto=auto)
                if other.figure != self.figure:
                    other.figure.canvas.draw_idle()
    self.stale = True
    return (left, right)","def set_3d_x_axis_limits(self, left=None, right=None, emit=True, auto=False, *, xmin=None, xmax=None):
    """"""
        Set 3D x limits.

        See :meth:`matplotlib.axes.Axes.set_xlim` for full documentation.

        """"""
    if right is None and np.iterable(left):
        left, right = left
    if xmin is not None:
        cbook.warn_deprecated('3.0', name='`xmin`', alternative='`left`', obj_type='argument')
        if left is not None:
            raise TypeError('Cannot pass both `xmin` and `left`')
        left = xmin
    if xmax is not None:
        cbook.warn_deprecated('3.0', name='`xmax`', alternative='`right`', obj_type='argument')
        if right is not None:
            raise TypeError('Cannot pass both `xmax` and `right`')
        right = xmax
    self._process_unit_info(xdata=(left, right))
    left = self._validate_converted_limits(left, self.convert_xunits)
    right = self._validate_converted_limits(right, self.convert_xunits)
    old_left, old_right = self.get_xlim()
    if left is None:
        left = old_left
    if right is None:
        right = old_right
    if left == right:
        cbook._warn_external(f'Attempting to set identical left == right == {left} results in singular transformations; automatically expanding.')
    left, right = self.xaxis.get_major_locator().nonsingular(left, right)
    left, right = self.xaxis.limit_range_for_scale(left, right)
    self.xy_viewLim.intervalx = (left, right)
    if auto is not None:
        self._autoscaleXon = bool(auto)
    if emit:
        self.callbacks.process('xlim_changed', self)
        for other in self._shared_x_axes.get_siblings(self):
            if other is not self:
                other.set_xlim(self.xy_viewLim.intervalx, emit=False, auto=auto)
                if other.figure != self.figure:
                    other.figure.canvas.draw_idle()
    self.stale = True
    return (left, right)","[{""var"": ""old_left"", ""rename"": ""previous_left_limit""}, {""var"": ""old_right"", ""rename"": ""previous_right_limit""}, {""var"": ""other"", ""rename"": ""shared_axes_sibling""}]"
./lib/mpl_toolkits/mplot3d/axes3d.py,set_ylim3d,configure_3d_y_axis_limits,646,701,"def set_ylim3d(self, bottom=None, top=None, emit=True, auto=False, *, ymin=None, ymax=None):
    """"""
        Set 3D y limits.

        See :meth:`matplotlib.axes.Axes.set_ylim` for full documentation.

        """"""
    if top is None and np.iterable(bottom):
        bottom, top = bottom
    if ymin is not None:
        cbook.warn_deprecated('3.0', name='`ymin`', alternative='`bottom`', obj_type='argument')
        if bottom is not None:
            raise TypeError('Cannot pass both `ymin` and `bottom`')
        bottom = ymin
    if ymax is not None:
        cbook.warn_deprecated('3.0', name='`ymax`', alternative='`top`', obj_type='argument')
        if top is not None:
            raise TypeError('Cannot pass both `ymax` and `top`')
        top = ymax
    self._process_unit_info(ydata=(bottom, top))
    bottom = self._validate_converted_limits(bottom, self.convert_yunits)
    top = self._validate_converted_limits(top, self.convert_yunits)
    old_bottom, old_top = self.get_ylim()
    if bottom is None:
        bottom = old_bottom
    if top is None:
        top = old_top
    if bottom == top:
        cbook._warn_external(f'Attempting to set identical bottom == top == {bottom} results in singular transformations; automatically expanding.')
    bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)
    bottom, top = self.yaxis.limit_range_for_scale(bottom, top)
    self.xy_viewLim.intervaly = (bottom, top)
    if auto is not None:
        self._autoscaleYon = bool(auto)
    if emit:
        self.callbacks.process('ylim_changed', self)
        for other in self._shared_y_axes.get_siblings(self):
            if other is not self:
                other.set_ylim(self.xy_viewLim.intervaly, emit=False, auto=auto)
                if other.figure != self.figure:
                    other.figure.canvas.draw_idle()
    self.stale = True
    return (bottom, top)","def configure_3d_y_axis_limits(self, bottom=None, top=None, emit=True, auto=False, *, ymin=None, ymax=None):
    """"""
        Set 3D y limits.

        See :meth:`matplotlib.axes.Axes.set_ylim` for full documentation.

        """"""
    if top is None and np.iterable(bottom):
        bottom, top = bottom
    if ymin is not None:
        cbook.warn_deprecated('3.0', name='`ymin`', alternative='`bottom`', obj_type='argument')
        if bottom is not None:
            raise TypeError('Cannot pass both `ymin` and `bottom`')
        bottom = ymin
    if ymax is not None:
        cbook.warn_deprecated('3.0', name='`ymax`', alternative='`top`', obj_type='argument')
        if top is not None:
            raise TypeError('Cannot pass both `ymax` and `top`')
        top = ymax
    self._process_unit_info(ydata=(bottom, top))
    bottom = self._validate_converted_limits(bottom, self.convert_yunits)
    top = self._validate_converted_limits(top, self.convert_yunits)
    old_bottom, old_top = self.get_ylim()
    if bottom is None:
        bottom = old_bottom
    if top is None:
        top = old_top
    if bottom == top:
        cbook._warn_external(f'Attempting to set identical bottom == top == {bottom} results in singular transformations; automatically expanding.')
    bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)
    bottom, top = self.yaxis.limit_range_for_scale(bottom, top)
    self.xy_viewLim.intervaly = (bottom, top)
    if auto is not None:
        self._autoscaleYon = bool(auto)
    if emit:
        self.callbacks.process('ylim_changed', self)
        for other in self._shared_y_axes.get_siblings(self):
            if other is not self:
                other.set_ylim(self.xy_viewLim.intervaly, emit=False, auto=auto)
                if other.figure != self.figure:
                    other.figure.canvas.draw_idle()
    self.stale = True
    return (bottom, top)","[{""var"": ""old_bottom"", ""rename"": ""previous_y_limit_lower""}, {""var"": ""other"", ""rename"": ""linked_axes_sibling""}, {""var"": ""old_top"", ""rename"": ""previous_top_limit""}]"
./lib/mpl_toolkits/mplot3d/axes3d.py,set_zlim3d,set_3d_axis_z_limits,704,759,"def set_zlim3d(self, bottom=None, top=None, emit=True, auto=False, *, zmin=None, zmax=None):
    """"""
        Set 3D z limits.

        See :meth:`matplotlib.axes.Axes.set_ylim` for full documentation

        """"""
    if top is None and np.iterable(bottom):
        bottom, top = bottom
    if zmin is not None:
        cbook.warn_deprecated('3.0', name='`zmin`', alternative='`bottom`', obj_type='argument')
        if bottom is not None:
            raise TypeError('Cannot pass both `zmin` and `bottom`')
        bottom = zmin
    if zmax is not None:
        cbook.warn_deprecated('3.0', name='`zmax`', alternative='`top`', obj_type='argument')
        if top is not None:
            raise TypeError('Cannot pass both `zmax` and `top`')
        top = zmax
    self._process_unit_info(zdata=(bottom, top))
    bottom = self._validate_converted_limits(bottom, self.convert_zunits)
    top = self._validate_converted_limits(top, self.convert_zunits)
    old_bottom, old_top = self.get_zlim()
    if bottom is None:
        bottom = old_bottom
    if top is None:
        top = old_top
    if bottom == top:
        cbook._warn_external(f'Attempting to set identical bottom == top == {bottom} results in singular transformations; automatically expanding.')
    bottom, top = self.zaxis.get_major_locator().nonsingular(bottom, top)
    bottom, top = self.zaxis.limit_range_for_scale(bottom, top)
    self.zz_viewLim.intervalx = (bottom, top)
    if auto is not None:
        self._autoscaleZon = bool(auto)
    if emit:
        self.callbacks.process('zlim_changed', self)
        for other in self._shared_z_axes.get_siblings(self):
            if other is not self:
                other.set_zlim(self.zz_viewLim.intervalx, emit=False, auto=auto)
                if other.figure != self.figure:
                    other.figure.canvas.draw_idle()
    self.stale = True
    return (bottom, top)","def set_3d_axis_z_limits(self, bottom=None, top=None, emit=True, auto=False, *, zmin=None, zmax=None):
    """"""
        Set 3D z limits.

        See :meth:`matplotlib.axes.Axes.set_ylim` for full documentation

        """"""
    if top is None and np.iterable(bottom):
        bottom, top = bottom
    if zmin is not None:
        cbook.warn_deprecated('3.0', name='`zmin`', alternative='`bottom`', obj_type='argument')
        if bottom is not None:
            raise TypeError('Cannot pass both `zmin` and `bottom`')
        bottom = zmin
    if zmax is not None:
        cbook.warn_deprecated('3.0', name='`zmax`', alternative='`top`', obj_type='argument')
        if top is not None:
            raise TypeError('Cannot pass both `zmax` and `top`')
        top = zmax
    self._process_unit_info(zdata=(bottom, top))
    bottom = self._validate_converted_limits(bottom, self.convert_zunits)
    top = self._validate_converted_limits(top, self.convert_zunits)
    old_bottom, old_top = self.get_zlim()
    if bottom is None:
        bottom = old_bottom
    if top is None:
        top = old_top
    if bottom == top:
        cbook._warn_external(f'Attempting to set identical bottom == top == {bottom} results in singular transformations; automatically expanding.')
    bottom, top = self.zaxis.get_major_locator().nonsingular(bottom, top)
    bottom, top = self.zaxis.limit_range_for_scale(bottom, top)
    self.zz_viewLim.intervalx = (bottom, top)
    if auto is not None:
        self._autoscaleZon = bool(auto)
    if emit:
        self.callbacks.process('zlim_changed', self)
        for other in self._shared_z_axes.get_siblings(self):
            if other is not self:
                other.set_zlim(self.zz_viewLim.intervalx, emit=False, auto=auto)
                if other.figure != self.figure:
                    other.figure.canvas.draw_idle()
    self.stale = True
    return (bottom, top)","[{""var"": ""old_bottom"", ""rename"": ""previous_zlim_bottom""}, {""var"": ""other"", ""rename"": ""sibling_axes""}, {""var"": ""old_top"", ""rename"": ""previous_top_limit""}]"
