file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sympy/algebras/quaternion.py,to_rotation_matrix,quaternion_to_transformation_matrix,489,551,"def to_rotation_matrix(self, v=None):
    """"""Returns the equivalent rotation transformation matrix of the quaternion
        which represents rotation about the origin if v is not passed.

        Example
        ========

        >>> from sympy.algebras.quaternion import Quaternion
        >>> from sympy import symbols, trigsimp, cos, sin
        >>> x = symbols('x')
        >>> q = Quaternion(cos(x/2), 0, 0, sin(x/2))
        >>> trigsimp(q.to_rotation_matrix())
        Matrix([
        [cos(x), -sin(x), 0],
        [sin(x),  cos(x), 0],
        [     0,       0, 1]])

        Generates a 4x4 transformation matrix (used for rotation about a point
        other than the origin) if the point(v) is passed as an argument.

        Example
        ========

        >>> from sympy.algebras.quaternion import Quaternion
        >>> from sympy import symbols, trigsimp, cos, sin
        >>> x = symbols('x')
        >>> q = Quaternion(cos(x/2), 0, 0, sin(x/2))
        >>> trigsimp(q.to_rotation_matrix((1, 1, 1)))
         Matrix([
        [cos(x), -sin(x), 0,  sin(x) - cos(x) + 1],
        [sin(x),  cos(x), 0, -sin(x) - cos(x) + 1],
        [     0,       0, 1,                    0],
        [     0,       0, 0,                    1]])
        """"""
    q = self
    s = q.norm() ** (-2)
    m00 = 1 - 2 * s * (q.c ** 2 + q.d ** 2)
    m01 = 2 * s * (q.b * q.c - q.d * q.a)
    m02 = 2 * s * (q.b * q.d + q.c * q.a)
    m10 = 2 * s * (q.b * q.c + q.d * q.a)
    m11 = 1 - 2 * s * (q.b ** 2 + q.d ** 2)
    m12 = 2 * s * (q.c * q.d + q.b * q.a)
    m20 = 2 * s * (q.b * q.d - q.c * q.a)
    m21 = 2 * s * (q.c * q.d + q.b * q.a)
    m22 = 1 - 2 * s * (q.b ** 2 + q.c ** 2)
    if not v:
        return Matrix([[m00, m01, m02], [m10, m11, m12], [m20, m21, m22]])
    else:
        x, y, z = v
        m03 = x - x * m00 - y * m01 - z * m02
        m13 = y - x * m10 - y * m11 - z * m12
        m23 = z - x * m20 - y * m21 - z * m22
        m30 = m31 = m32 = 0
        m33 = 1
        return Matrix([[m00, m01, m02, m03], [m10, m11, m12, m13], [m20, m21, m22, m23], [m30, m31, m32, m33]])","def quaternion_to_transformation_matrix(self, v=None):
    """"""Returns the equivalent rotation transformation matrix of the quaternion
        which represents rotation about the origin if v is not passed.

        Example
        ========

        >>> from sympy.algebras.quaternion import Quaternion
        >>> from sympy import symbols, trigsimp, cos, sin
        >>> x = symbols('x')
        >>> q = Quaternion(cos(x/2), 0, 0, sin(x/2))
        >>> trigsimp(q.to_rotation_matrix())
        Matrix([
        [cos(x), -sin(x), 0],
        [sin(x),  cos(x), 0],
        [     0,       0, 1]])

        Generates a 4x4 transformation matrix (used for rotation about a point
        other than the origin) if the point(v) is passed as an argument.

        Example
        ========

        >>> from sympy.algebras.quaternion import Quaternion
        >>> from sympy import symbols, trigsimp, cos, sin
        >>> x = symbols('x')
        >>> q = Quaternion(cos(x/2), 0, 0, sin(x/2))
        >>> trigsimp(q.to_rotation_matrix((1, 1, 1)))
         Matrix([
        [cos(x), -sin(x), 0,  sin(x) - cos(x) + 1],
        [sin(x),  cos(x), 0, -sin(x) - cos(x) + 1],
        [     0,       0, 1,                    0],
        [     0,       0, 0,                    1]])
        """"""
    q = self
    s = q.norm() ** (-2)
    m00 = 1 - 2 * s * (q.c ** 2 + q.d ** 2)
    m01 = 2 * s * (q.b * q.c - q.d * q.a)
    m02 = 2 * s * (q.b * q.d + q.c * q.a)
    m10 = 2 * s * (q.b * q.c + q.d * q.a)
    m11 = 1 - 2 * s * (q.b ** 2 + q.d ** 2)
    m12 = 2 * s * (q.c * q.d + q.b * q.a)
    m20 = 2 * s * (q.b * q.d - q.c * q.a)
    m21 = 2 * s * (q.c * q.d + q.b * q.a)
    m22 = 1 - 2 * s * (q.b ** 2 + q.c ** 2)
    if not v:
        return Matrix([[m00, m01, m02], [m10, m11, m12], [m20, m21, m22]])
    else:
        x, y, z = v
        m03 = x - x * m00 - y * m01 - z * m02
        m13 = y - x * m10 - y * m11 - z * m12
        m23 = z - x * m20 - y * m21 - z * m22
        m30 = m31 = m32 = 0
        m33 = 1
        return Matrix([[m00, m01, m02, m03], [m10, m11, m12, m13], [m20, m21, m22, m23], [m30, m31, m32, m33]])","[{""var"": ""m01"", ""rename"": ""rotation_matrix_yz_component""}, {""var"": ""y"", ""rename"": ""y_offset""}, {""var"": ""x"", ""rename"": ""rotation_axis_angle""}, {""var"": ""m31"", ""rename"": ""transformation_matrix_element_31""}, {""var"": ""m00"", ""rename"": ""rotation_matrix_00""}, {""var"": ""m10"", ""rename"": ""matrix_element_row1_col0""}, {""var"": ""m02"", ""rename"": ""rotation_matrix_element_02""}, {""var"": ""m13"", ""rename"": ""translation_y_offset""}, {""var"": ""m22"", ""rename"": ""rotation_matrix_m22""}, {""var"": ""m33"", ""rename"": ""homogeneous_scale""}, {""var"": ""m21"", ""rename"": ""m21_component_yz""}, {""var"": ""m12"", ""rename"": ""matrix_m12_rotation_z""}, {""var"": ""m32"", ""rename"": ""transform_zero_xz""}, {""var"": ""s"", ""rename"": ""inverse_quaternion_norm_squared""}, {""var"": ""m23"", ""rename"": ""translation_component_z""}, {""var"": ""m30"", ""rename"": ""last_row_zero""}, {""var"": ""q"", ""rename"": ""quaternion_instance""}, {""var"": ""m11"", ""rename"": ""rotation_matrix_1_1""}, {""var"": ""z"", ""rename"": ""rotation_origin_z""}, {""var"": ""m20"", ""rename"": ""m20_row2_column0""}, {""var"": ""m03"", ""rename"": ""translation_component_x""}]"
