file,method_name,new_method_name,start_line,end_line,original_code,code,var
./src/_pytest/skipping.py,pytest_runtest_setup,handle_test_skip_and_xfail_setup,233,244,"@hookimpl(tryfirst=True)
def pytest_runtest_setup(item: Item) -> None:
    item._store[skipped_by_mark_key] = False
    skipped = evaluate_skip_marks(item)
    if skipped:
        item._store[skipped_by_mark_key] = True
        skip(skipped.reason)
    if not item.config.option.runxfail:
        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)
        if xfailed and (not xfailed.run):
            xfail('[NOTRUN] ' + xfailed.reason)","@hookimpl(tryfirst=True)
def handle_test_skip_and_xfail_setup(item: Item) -> None:
    item._store[skipped_by_mark_key] = False
    skipped = evaluate_skip_marks(item)
    if skipped:
        item._store[skipped_by_mark_key] = True
        skip(skipped.reason)
    if not item.config.option.runxfail:
        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)
        if xfailed and (not xfailed.run):
            xfail('[NOTRUN] ' + xfailed.reason)","[{""var"": ""skipped"", ""rename"": ""should_skip_test""}, {""var"": ""xfailed"", ""rename"": ""expected_failure_info""}]"
./src/_pytest/skipping.py,pytest_runtest_call,process_test_execution_with_xfail_handling,248,257,"@hookimpl(hookwrapper=True)
def pytest_runtest_call(item: Item) -> Generator[None, None, None]:
    xfailed = item._store.get(xfailed_key, None)
    if xfailed is None:
        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)
    if not item.config.option.runxfail:
        if xfailed and (not xfailed.run):
            xfail('[NOTRUN] ' + xfailed.reason)
    yield","@hookimpl(hookwrapper=True)
def process_test_execution_with_xfail_handling(item: Item) -> Generator[None, None, None]:
    xfailed = item._store.get(xfailed_key, None)
    if xfailed is None:
        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)
    if not item.config.option.runxfail:
        if xfailed and (not xfailed.run):
            xfail('[NOTRUN] ' + xfailed.reason)
    yield","[{""var"": ""xfailed"", ""rename"": ""expected_failure_info""}]"
