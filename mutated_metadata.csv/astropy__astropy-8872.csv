file,method_name,new_method_name,start_line,end_line,original_code,code,var
./astropy/units/quantity.py,__new__,create_quantity_with_unit_handling,272,392,"def __new__(cls, value, unit=None, dtype=None, copy=True, order=None, subok=False, ndmin=0):
    if unit is not None:
        unit = Unit(unit)
        if subok:
            qcls = getattr(unit, '_quantity_class', cls)
            if issubclass(qcls, cls):
                cls = qcls
    if isinstance(value, Quantity):
        if unit is not None and unit is not value.unit:
            value = value.to(unit)
            copy = False
        if type(value) is not cls and (not (subok and isinstance(value, cls))):
            value = value.view(cls)
        if dtype is None:
            if not copy:
                return value
            if not (np.can_cast(np.float32, value.dtype) or value.dtype.fields):
                dtype = float
        return np.array(value, dtype=dtype, copy=copy, order=order, subok=True, ndmin=ndmin)
    value_unit = None
    if not isinstance(value, np.ndarray):
        if isinstance(value, str):
            pattern = '\\s*[+-]?((\\d+\\.?\\d*)|(\\.\\d+)|([nN][aA][nN])|([iI][nN][fF]([iI][nN][iI][tT][yY]){0,1}))([eE][+-]?\\d+)?[.+-]?'
            v = re.match(pattern, value)
            unit_string = None
            try:
                value = float(v.group())
            except Exception:
                raise TypeError('Cannot parse ""{0}"" as a {1}. It does not start with a number.'.format(value, cls.__name__))
            unit_string = v.string[v.end():].strip()
            if unit_string:
                value_unit = Unit(unit_string)
                if unit is None:
                    unit = value_unit
        elif isiterable(value) and len(value) > 0 and all((isinstance(v, Quantity) for v in value)):
            if unit is None:
                unit = value[0].unit
            value = [q.to_value(unit) for q in value]
            value_unit = unit
    if value_unit is None:
        value_unit = getattr(value, 'unit', None)
        if value_unit is None:
            if unit is None:
                unit = cls._default_unit
            value_unit = unit
        else:
            try:
                value_unit = Unit(value_unit)
            except Exception as exc:
                raise TypeError('The unit attribute {0!r} of the input could not be parsed as an astropy Unit, raising the following exception:\n{1}'.format(value.unit, exc))
            if unit is None:
                unit = value_unit
            elif unit is not value_unit:
                copy = False
    value = np.array(value, dtype=dtype, copy=copy, order=order, subok=False, ndmin=ndmin)
    if value.dtype.kind in 'OSU' and (not (value.dtype.kind == 'O' and isinstance(value.item(() if value.ndim == 0 else 0), numbers.Number))):
        raise TypeError('The value must be a valid Python or Numpy numeric type.')
    if dtype is None and (not (np.can_cast(np.float32, value.dtype) or value.dtype.fields) or value.dtype.kind == 'O'):
        value = value.astype(float)
    value = value.view(cls)
    value._set_unit(value_unit)
    if unit is value_unit:
        return value
    else:
        return value.to(unit)","def create_quantity_with_unit_handling(cls, value, unit=None, dtype=None, copy=True, order=None, subok=False, ndmin=0):
    if unit is not None:
        unit = Unit(unit)
        if subok:
            qcls = getattr(unit, '_quantity_class', cls)
            if issubclass(qcls, cls):
                cls = qcls
    if isinstance(value, Quantity):
        if unit is not None and unit is not value.unit:
            value = value.to(unit)
            copy = False
        if type(value) is not cls and (not (subok and isinstance(value, cls))):
            value = value.view(cls)
        if dtype is None:
            if not copy:
                return value
            if not (np.can_cast(np.float32, value.dtype) or value.dtype.fields):
                dtype = float
        return np.array(value, dtype=dtype, copy=copy, order=order, subok=True, ndmin=ndmin)
    value_unit = None
    if not isinstance(value, np.ndarray):
        if isinstance(value, str):
            pattern = '\\s*[+-]?((\\d+\\.?\\d*)|(\\.\\d+)|([nN][aA][nN])|([iI][nN][fF]([iI][nN][iI][tT][yY]){0,1}))([eE][+-]?\\d+)?[.+-]?'
            v = re.match(pattern, value)
            unit_string = None
            try:
                value = float(v.group())
            except Exception:
                raise TypeError('Cannot parse ""{0}"" as a {1}. It does not start with a number.'.format(value, cls.__name__))
            unit_string = v.string[v.end():].strip()
            if unit_string:
                value_unit = Unit(unit_string)
                if unit is None:
                    unit = value_unit
        elif isiterable(value) and len(value) > 0 and all((isinstance(v, Quantity) for v in value)):
            if unit is None:
                unit = value[0].unit
            value = [q.to_value(unit) for q in value]
            value_unit = unit
    if value_unit is None:
        value_unit = getattr(value, 'unit', None)
        if value_unit is None:
            if unit is None:
                unit = cls._default_unit
            value_unit = unit
        else:
            try:
                value_unit = Unit(value_unit)
            except Exception as exc:
                raise TypeError('The unit attribute {0!r} of the input could not be parsed as an astropy Unit, raising the following exception:\n{1}'.format(value.unit, exc))
            if unit is None:
                unit = value_unit
            elif unit is not value_unit:
                copy = False
    value = np.array(value, dtype=dtype, copy=copy, order=order, subok=False, ndmin=ndmin)
    if value.dtype.kind in 'OSU' and (not (value.dtype.kind == 'O' and isinstance(value.item(() if value.ndim == 0 else 0), numbers.Number))):
        raise TypeError('The value must be a valid Python or Numpy numeric type.')
    if dtype is None and (not (np.can_cast(np.float32, value.dtype) or value.dtype.fields) or value.dtype.kind == 'O'):
        value = value.astype(float)
    value = value.view(cls)
    value._set_unit(value_unit)
    if unit is value_unit:
        return value
    else:
        return value.to(unit)","[{""var"": ""unit_string"", ""rename"": ""parsed_unit_string""}, {""var"": ""qcls"", ""rename"": ""quantity_class""}, {""var"": ""v"", ""rename"": ""parsed_value_match""}, {""var"": ""pattern"", ""rename"": ""numeric_string_pattern""}, {""var"": ""value_unit"", ""rename"": ""calculated_value_unit""}, {""var"": ""q"", ""rename"": ""quantity_value""}]"
