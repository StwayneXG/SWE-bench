file,method_name,new_method_name,start_line,end_line,original_code,code,var
./src/_pytest/compat.py,num_mock_patch_args,count_mock_related_patch_arguments,62,73,"def num_mock_patch_args(function):
    """""" return number of arguments used up by mock arguments (if any) """"""
    patchings = getattr(function, 'patchings', None)
    if not patchings:
        return 0
    mock_modules = [sys.modules.get('mock'), sys.modules.get('unittest.mock')]
    if any(mock_modules):
        sentinels = [m.DEFAULT for m in mock_modules if m is not None]
        return len([p for p in patchings if not p.attribute_name and p.new in sentinels])
    return len(patchings)","def count_mock_related_patch_arguments(function):
    """""" return number of arguments used up by mock arguments (if any) """"""
    patchings = getattr(function, 'patchings', None)
    if not patchings:
        return 0
    mock_modules = [sys.modules.get('mock'), sys.modules.get('unittest.mock')]
    if any(mock_modules):
        sentinels = [m.DEFAULT for m in mock_modules if m is not None]
        return len([p for p in patchings if not p.attribute_name and p.new in sentinels])
    return len(patchings)","[{""var"": ""sentinels"", ""rename"": ""mock_default_sentinels""}, {""var"": ""p"", ""rename"": ""mock_patchings_count""}, {""var"": ""mock_modules"", ""rename"": ""available_mock_libraries""}, {""var"": ""m"", ""rename"": ""mock_module_instances""}, {""var"": ""patchings"", ""rename"": ""mock_patch_list""}]"
./src/_pytest/compat.py,getfuncargnames,extract_unbound_mandatory_arg_names,76,126,"def getfuncargnames(function, is_method=False, cls=None):
    """"""Returns the names of a function's mandatory arguments.

    This should return the names of all function arguments that:
        * Aren't bound to an instance or type as in instance or class methods.
        * Don't have default values.
        * Aren't bound with functools.partial.
        * Aren't replaced with mocks.

    The is_method and cls arguments indicate that the function should
    be treated as a bound method even though it's not unless, only in
    the case of cls, the function is a static method.

    @RonnyPfannschmidt: This function should be refactored when we
    revisit fixtures. The fixture mechanism should ask the node for
    the fixture names, and not try to obtain directly from the
    function object well after collection has occurred.

    """"""
    try:
        parameters = signature(function).parameters
    except (ValueError, TypeError) as e:
        fail('Could not determine arguments of {!r}: {}'.format(function, e), pytrace=False)
    arg_names = tuple((p.name for p in parameters.values() if (p.kind is Parameter.POSITIONAL_OR_KEYWORD or p.kind is Parameter.KEYWORD_ONLY) and p.default is Parameter.empty))
    if is_method or (cls and (not isinstance(cls.__dict__.get(function.__name__, None), staticmethod))):
        arg_names = arg_names[1:]
    if hasattr(function, '__wrapped__'):
        arg_names = arg_names[num_mock_patch_args(function):]
    return arg_names","def extract_unbound_mandatory_arg_names(function, is_method=False, cls=None):
    """"""Returns the names of a function's mandatory arguments.

    This should return the names of all function arguments that:
        * Aren't bound to an instance or type as in instance or class methods.
        * Don't have default values.
        * Aren't bound with functools.partial.
        * Aren't replaced with mocks.

    The is_method and cls arguments indicate that the function should
    be treated as a bound method even though it's not unless, only in
    the case of cls, the function is a static method.

    @RonnyPfannschmidt: This function should be refactored when we
    revisit fixtures. The fixture mechanism should ask the node for
    the fixture names, and not try to obtain directly from the
    function object well after collection has occurred.

    """"""
    try:
        parameters = signature(function).parameters
    except (ValueError, TypeError) as e:
        fail('Could not determine arguments of {!r}: {}'.format(function, e), pytrace=False)
    arg_names = tuple((p.name for p in parameters.values() if (p.kind is Parameter.POSITIONAL_OR_KEYWORD or p.kind is Parameter.KEYWORD_ONLY) and p.default is Parameter.empty))
    if is_method or (cls and (not isinstance(cls.__dict__.get(function.__name__, None), staticmethod))):
        arg_names = arg_names[1:]
    if hasattr(function, '__wrapped__'):
        arg_names = arg_names[num_mock_patch_args(function):]
    return arg_names","[{""var"": ""p"", ""rename"": ""param""}, {""var"": ""arg_names"", ""rename"": ""mandatory_arg_names""}, {""var"": ""parameters"", ""rename"": ""function_parameters""}]"
