file,method_name,new_method_name,start_line,end_line,original_code,code,var
./astropy/units/quantity.py,__array_ufunc__,apply_ufunc_with_units_handling,620,682,"def __array_ufunc__(self, function, method, *inputs, **kwargs):
    """"""Wrap numpy ufuncs, taking care of units.

        Parameters
        ----------
        function : callable
            ufunc to wrap.
        method : str
            Ufunc method: ``__call__``, ``at``, ``reduce``, etc.
        inputs : tuple
            Input arrays.
        kwargs : keyword arguments
            As passed on, with ``out`` containing possible quantity output.

        Returns
        -------
        result : `~astropy.units.Quantity`
            Results of the ufunc, with the unit set properly.
        """"""
    converters, unit = converters_and_unit(function, method, *inputs)
    out = kwargs.get('out', None)
    if out is not None:
        if function.nout == 1:
            out = out[0]
        out_array = check_output(out, unit, inputs, function=function)
        kwargs['out'] = (out_array,) if function.nout == 1 else out_array
    if method == 'reduce' and 'initial' in kwargs and (unit is not None):
        kwargs['initial'] = self._to_own_unit(kwargs['initial'], check_precision=False, unit=unit)
    arrays = []
    for input_, converter in zip(inputs, converters):
        input_ = getattr(input_, 'value', input_)
        arrays.append(converter(input_) if converter else input_)
    result = super().__array_ufunc__(function, method, *arrays, **kwargs)
    if unit is None or result is None or result is NotImplemented:
        return result
    return self._result_as_quantity(result, unit, out)","def apply_ufunc_with_units_handling(self, function, method, *inputs, **kwargs):
    """"""Wrap numpy ufuncs, taking care of units.

        Parameters
        ----------
        function : callable
            ufunc to wrap.
        method : str
            Ufunc method: ``__call__``, ``at``, ``reduce``, etc.
        inputs : tuple
            Input arrays.
        kwargs : keyword arguments
            As passed on, with ``out`` containing possible quantity output.

        Returns
        -------
        result : `~astropy.units.Quantity`
            Results of the ufunc, with the unit set properly.
        """"""
    converters, unit = converters_and_unit(function, method, *inputs)
    out = kwargs.get('out', None)
    if out is not None:
        if function.nout == 1:
            out = out[0]
        out_array = check_output(out, unit, inputs, function=function)
        kwargs['out'] = (out_array,) if function.nout == 1 else out_array
    if method == 'reduce' and 'initial' in kwargs and (unit is not None):
        kwargs['initial'] = self._to_own_unit(kwargs['initial'], check_precision=False, unit=unit)
    arrays = []
    for input_, converter in zip(inputs, converters):
        input_ = getattr(input_, 'value', input_)
        arrays.append(converter(input_) if converter else input_)
    result = super().__array_ufunc__(function, method, *arrays, **kwargs)
    if unit is None or result is None or result is NotImplemented:
        return result
    return self._result_as_quantity(result, unit, out)","[{""var"": ""out"", ""rename"": ""output_quantity""}, {""var"": ""result"", ""rename"": ""computed_quantity_result""}, {""var"": ""input_"", ""rename"": ""input_array""}, {""var"": ""converters"", ""rename"": ""unit_converters""}, {""var"": ""out_array"", ""rename"": ""validated_output_array""}, {""var"": ""converter"", ""rename"": ""unit_aware_ufunc_handler""}, {""var"": ""unit"", ""rename"": ""output_unit""}, {""var"": ""arrays"", ""rename"": ""converted_inputs_list""}]"
./astropy/units/quantity.py,_result_as_quantity,_convert_result_to_quantity_with_unit,684,727,"def _result_as_quantity(self, result, unit, out):
    """"""Turn result into a quantity with the given unit.

        If no output is given, it will take a view of the array as a quantity,
        and set the unit.  If output is given, those should be quantity views
        of the result arrays, and the function will just set the unit.

        Parameters
        ----------
        result : ndarray or tuple thereof
            Array(s) which need to be turned into quantity.
        unit : `~astropy.units.Unit`
            Unit for the quantities to be returned (or `None` if the result
            should not be a quantity).  Should be tuple if result is a tuple.
        out : `~astropy.units.Quantity` or None
            Possible output quantity. Should be `None` or a tuple if result
            is a tuple.

        Returns
        -------
        out : `~astropy.units.Quantity`
           With units set.
        """"""
    if isinstance(result, (tuple, list)):
        if out is None:
            out = (None,) * len(result)
        return result.__class__((self._result_as_quantity(result_, unit_, out_) for result_, unit_, out_ in zip(result, unit, out)))
    if out is None:
        return result if unit is None else self._new_view(result, unit)
    elif isinstance(out, Quantity):
        out._set_unit(unit)
    return out","def _convert_result_to_quantity_with_unit(self, result, unit, out):
    """"""Turn result into a quantity with the given unit.

        If no output is given, it will take a view of the array as a quantity,
        and set the unit.  If output is given, those should be quantity views
        of the result arrays, and the function will just set the unit.

        Parameters
        ----------
        result : ndarray or tuple thereof
            Array(s) which need to be turned into quantity.
        unit : `~astropy.units.Unit`
            Unit for the quantities to be returned (or `None` if the result
            should not be a quantity).  Should be tuple if result is a tuple.
        out : `~astropy.units.Quantity` or None
            Possible output quantity. Should be `None` or a tuple if result
            is a tuple.

        Returns
        -------
        out : `~astropy.units.Quantity`
           With units set.
        """"""
    if isinstance(result, (tuple, list)):
        if out is None:
            out = (None,) * len(result)
        return result.__class__((self._result_as_quantity(result_, unit_, out_) for result_, unit_, out_ in zip(result, unit, out)))
    if out is None:
        return result if unit is None else self._new_view(result, unit)
    elif isinstance(out, Quantity):
        out._set_unit(unit)
    return out","[{""var"": ""out_"", ""rename"": ""output_quantity""}, {""var"": ""unit_"", ""rename"": ""target_unit""}, {""var"": ""result_"", ""rename"": ""calculated_quantity""}]"
