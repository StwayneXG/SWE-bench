file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/db/models/base.py,_save_table,_save_or_update_table,829,890,"def _save_table(self, raw=False, cls=None, force_insert=False, force_update=False, using=None, update_fields=None):
    """"""
        Do the heavy-lifting involved in saving. Update or insert the data
        for a single table.
        """"""
    meta = cls._meta
    non_pks = [f for f in meta.local_concrete_fields if not f.primary_key]
    if update_fields:
        non_pks = [f for f in non_pks if f.name in update_fields or f.attname in update_fields]
    pk_val = self._get_pk_val(meta)
    if pk_val is None:
        pk_val = meta.pk.get_pk_value_on_save(self)
        setattr(self, meta.pk.attname, pk_val)
    pk_set = pk_val is not None
    if not pk_set and (force_update or update_fields):
        raise ValueError('Cannot force an update in save() with no primary key.')
    updated = False
    if not force_insert and self._state.adding and self._meta.pk.default and (self._meta.pk.default is not NOT_PROVIDED):
        force_insert = True
    if pk_set and (not force_insert):
        base_qs = cls._base_manager.using(using)
        values = [(f, None, getattr(self, f.attname) if raw else f.pre_save(self, False)) for f in non_pks]
        forced_update = update_fields or force_update
        updated = self._do_update(base_qs, using, pk_val, values, update_fields, forced_update)
        if force_update and (not updated):
            raise DatabaseError('Forced update did not affect any rows.')
        if update_fields and (not updated):
            raise DatabaseError('Save with update_fields did not affect any rows.')
    if not updated:
        if meta.order_with_respect_to:
            field = meta.order_with_respect_to
            filter_args = field.get_filter_kwargs_for_object(self)
            self._order = cls._base_manager.using(using).filter(**filter_args).aggregate(_order__max=Coalesce(ExpressionWrapper(Max('_order') + Value(1), output_field=IntegerField()), Value(0)))['_order__max']
        fields = meta.local_concrete_fields
        if not pk_set:
            fields = [f for f in fields if f is not meta.auto_field]
        returning_fields = meta.db_returning_fields
        results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
        for result, field in zip(results, returning_fields):
            setattr(self, field.attname, result)
    return updated","def _save_or_update_table(self, raw=False, cls=None, force_insert=False, force_update=False, using=None, update_fields=None):
    """"""
        Do the heavy-lifting involved in saving. Update or insert the data
        for a single table.
        """"""
    meta = cls._meta
    non_pks = [f for f in meta.local_concrete_fields if not f.primary_key]
    if update_fields:
        non_pks = [f for f in non_pks if f.name in update_fields or f.attname in update_fields]
    pk_val = self._get_pk_val(meta)
    if pk_val is None:
        pk_val = meta.pk.get_pk_value_on_save(self)
        setattr(self, meta.pk.attname, pk_val)
    pk_set = pk_val is not None
    if not pk_set and (force_update or update_fields):
        raise ValueError('Cannot force an update in save() with no primary key.')
    updated = False
    if not force_insert and self._state.adding and self._meta.pk.default and (self._meta.pk.default is not NOT_PROVIDED):
        force_insert = True
    if pk_set and (not force_insert):
        base_qs = cls._base_manager.using(using)
        values = [(f, None, getattr(self, f.attname) if raw else f.pre_save(self, False)) for f in non_pks]
        forced_update = update_fields or force_update
        updated = self._do_update(base_qs, using, pk_val, values, update_fields, forced_update)
        if force_update and (not updated):
            raise DatabaseError('Forced update did not affect any rows.')
        if update_fields and (not updated):
            raise DatabaseError('Save with update_fields did not affect any rows.')
    if not updated:
        if meta.order_with_respect_to:
            field = meta.order_with_respect_to
            filter_args = field.get_filter_kwargs_for_object(self)
            self._order = cls._base_manager.using(using).filter(**filter_args).aggregate(_order__max=Coalesce(ExpressionWrapper(Max('_order') + Value(1), output_field=IntegerField()), Value(0)))['_order__max']
        fields = meta.local_concrete_fields
        if not pk_set:
            fields = [f for f in fields if f is not meta.auto_field]
        returning_fields = meta.db_returning_fields
        results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
        for result, field in zip(results, returning_fields):
            setattr(self, field.attname, result)
    return updated","[{""var"": ""base_qs"", ""rename"": ""base_queryset""}, {""var"": ""values"", ""rename"": ""non_primary_key_values""}, {""var"": ""forced_update"", ""rename"": ""update_condition_met""}, {""var"": ""meta"", ""rename"": ""model_metadata""}, {""var"": ""updated"", ""rename"": ""is_record_updated""}, {""var"": ""field"", ""rename"": ""order_with_respect_to_field""}, {""var"": ""returning_fields"", ""rename"": ""db_returning_fields""}, {""var"": ""results"", ""rename"": ""inserted_row_ids_or_values""}, {""var"": ""f"", ""rename"": ""non_primary_key_fields""}, {""var"": ""result"", ""rename"": ""update_status""}, {""var"": ""pk_val"", ""rename"": ""primary_key_value""}, {""var"": ""filter_args"", ""rename"": ""order_filter_kwargs""}, {""var"": ""non_pks"", ""rename"": ""non_primary_key_fields""}, {""var"": ""pk_set"", ""rename"": ""primary_key_is_set""}, {""var"": ""fields"", ""rename"": ""saveable_fields""}]"
