file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sympy/printing/mathml.py,_print_Symbol,render_mathml_symbol,745,802,"def _print_Symbol(self, sym, style='plain'):
    x = self.dom.createElement('mi')
    if style == 'bold':
        x.setAttribute('mathvariant', 'bold')

    def join(items):
        if len(items) > 1:
            mrow = self.dom.createElement('mrow')
            for i, item in enumerate(items):
                if i > 0:
                    mo = self.dom.createElement('mo')
                    mo.appendChild(self.dom.createTextNode(' '))
                    mrow.appendChild(mo)
                mi = self.dom.createElement('mi')
                mi.appendChild(self.dom.createTextNode(item))
                mrow.appendChild(mi)
            return mrow
        else:
            mi = self.dom.createElement('mi')
            mi.appendChild(self.dom.createTextNode(items[0]))
            return mi

    def translate(s):
        if s in greek_unicode:
            return greek_unicode.get(s)
        else:
            return s
    name, supers, subs = split_super_sub(sym.name)
    name = translate(name)
    supers = [translate(sup) for sup in supers]
    subs = [translate(sub) for sub in subs]
    mname = self.dom.createElement('mi')
    mname.appendChild(self.dom.createTextNode(name))
    if len(supers) == 0:
        if len(subs) == 0:
            x.appendChild(self.dom.createTextNode(name))
        else:
            msub = self.dom.createElement('msub')
            msub.appendChild(mname)
            msub.appendChild(join(subs))
            x.appendChild(msub)
    elif len(subs) == 0:
        msup = self.dom.createElement('msup')
        msup.appendChild(mname)
        msup.appendChild(join(supers))
        x.appendChild(msup)
    else:
        msubsup = self.dom.createElement('msubsup')
        msubsup.appendChild(mname)
        msubsup.appendChild(join(subs))
        msubsup.appendChild(join(supers))
        x.appendChild(msubsup)
    return x","def render_mathml_symbol(self, sym, style='plain'):
    x = self.dom.createElement('mi')
    if style == 'bold':
        x.setAttribute('mathvariant', 'bold')

    def join(items):
        if len(items) > 1:
            mrow = self.dom.createElement('mrow')
            for i, item in enumerate(items):
                if i > 0:
                    mo = self.dom.createElement('mo')
                    mo.appendChild(self.dom.createTextNode(' '))
                    mrow.appendChild(mo)
                mi = self.dom.createElement('mi')
                mi.appendChild(self.dom.createTextNode(item))
                mrow.appendChild(mi)
            return mrow
        else:
            mi = self.dom.createElement('mi')
            mi.appendChild(self.dom.createTextNode(items[0]))
            return mi

    def translate(s):
        if s in greek_unicode:
            return greek_unicode.get(s)
        else:
            return s
    name, supers, subs = split_super_sub(sym.name)
    name = translate(name)
    supers = [translate(sup) for sup in supers]
    subs = [translate(sub) for sub in subs]
    mname = self.dom.createElement('mi')
    mname.appendChild(self.dom.createTextNode(name))
    if len(supers) == 0:
        if len(subs) == 0:
            x.appendChild(self.dom.createTextNode(name))
        else:
            msub = self.dom.createElement('msub')
            msub.appendChild(mname)
            msub.appendChild(join(subs))
            x.appendChild(msub)
    elif len(subs) == 0:
        msup = self.dom.createElement('msup')
        msup.appendChild(mname)
        msup.appendChild(join(supers))
        x.appendChild(msup)
    else:
        msubsup = self.dom.createElement('msubsup')
        msubsup.appendChild(mname)
        msubsup.appendChild(join(subs))
        msubsup.appendChild(join(supers))
        x.appendChild(msubsup)
    return x","[{""var"": ""name"", ""rename"": ""base_symbol_name""}, {""var"": ""i"", ""rename"": ""index_in_items""}, {""var"": ""x"", ""rename"": ""math_element""}, {""var"": ""mi"", ""rename"": ""mathIdentifierElement""}, {""var"": ""msup"", ""rename"": ""superscript_element""}, {""var"": ""item"", ""rename"": ""symbol_character""}, {""var"": ""sub"", ""rename"": ""subscripts""}, {""var"": ""subs"", ""rename"": ""subscripts""}, {""var"": ""msubsup"", ""rename"": ""mathSubscriptSuperscriptElement""}, {""var"": ""sup"", ""rename"": ""superscript_elements""}, {""var"": ""mrow"", ""rename"": ""mathMarkupRow""}, {""var"": ""mo"", ""rename"": ""operatorElement""}, {""var"": ""supers"", ""rename"": ""superscripts""}, {""var"": ""msub"", ""rename"": ""subscriptElement""}, {""var"": ""mname"", ""rename"": ""mathIdentifierElement""}]"
