file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/core/validators.py,validate_ipv4_address,check_and_raise_for_invalid_ipv4,271,275,"def validate_ipv4_address(value):
    try:
        ipaddress.IPv4Address(value)
    except ValueError:
        raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid')","def check_and_raise_for_invalid_ipv4(value):
    try:
        ipaddress.IPv4Address(value)
    except ValueError:
        raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid')",[]
./django/core/validators.py,validate_ipv6_address,check_and_raise_for_invalid_ipv6,278,280,"def validate_ipv6_address(value):
    if not is_valid_ipv6_address(value):
        raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid')","def check_and_raise_for_invalid_ipv6(value):
    if not is_valid_ipv6_address(value):
        raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid')",[]
./django/core/validators.py,validate_ipv46_address,verify_and_validate_ip_address_v4_v6,283,290,"def validate_ipv46_address(value):
    try:
        validate_ipv4_address(value)
    except ValidationError:
        try:
            validate_ipv6_address(value)
        except ValidationError:
            raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid')","def verify_and_validate_ip_address_v4_v6(value):
    try:
        validate_ipv4_address(value)
    except ValidationError:
        try:
            validate_ipv6_address(value)
        except ValidationError:
            raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid')",[]
./django/core/validators.py,__call__,validate_regex_match,43,51,"def __call__(self, value):
    """"""
        Validate that the input contains (or does *not* contain, if
        inverse_match is True) a match for the regular expression.
        """"""
    regex_matches = self.regex.search(str(value))
    invalid_input = regex_matches if self.inverse_match else not regex_matches
    if invalid_input:
        raise ValidationError(self.message, code=self.code)","def validate_regex_match(self, value):
    """"""
        Validate that the input contains (or does *not* contain, if
        inverse_match is True) a match for the regular expression.
        """"""
    regex_matches = self.regex.search(str(value))
    invalid_input = regex_matches if self.inverse_match else not regex_matches
    if invalid_input:
        raise ValidationError(self.message, code=self.code)","[{""var"": ""invalid_input"", ""rename"": ""is_invalid_due_to_regex_match""}, {""var"": ""regex_matches"", ""rename"": ""regex_validation_result""}]"
./django/core/validators.py,__call__,validate_and_process_url,101,142,"def __call__(self, value):
    if not isinstance(value, str):
        raise ValidationError(self.message, code=self.code)
    scheme = value.split('://')[0].lower()
    if scheme not in self.schemes:
        raise ValidationError(self.message, code=self.code)
    try:
        super().__call__(value)
    except ValidationError as e:
        if value:
            try:
                scheme, netloc, path, query, fragment = urlsplit(value)
            except ValueError:
                raise ValidationError(self.message, code=self.code)
            try:
                netloc = punycode(netloc)
            except UnicodeError:
                raise e
            url = urlunsplit((scheme, netloc, path, query, fragment))
            super().__call__(url)
        else:
            raise
    else:
        host_match = re.search('^\\[(.+)\\](?::\\d{2,5})?$', urlsplit(value).netloc)
        if host_match:
            potential_ip = host_match[1]
            try:
                validate_ipv6_address(potential_ip)
            except ValidationError:
                raise ValidationError(self.message, code=self.code)
    if len(urlsplit(value).netloc) > 253:
        raise ValidationError(self.message, code=self.code)","def validate_and_process_url(self, value):
    if not isinstance(value, str):
        raise ValidationError(self.message, code=self.code)
    scheme = value.split('://')[0].lower()
    if scheme not in self.schemes:
        raise ValidationError(self.message, code=self.code)
    try:
        super().__call__(value)
    except ValidationError as e:
        if value:
            try:
                scheme, netloc, path, query, fragment = urlsplit(value)
            except ValueError:
                raise ValidationError(self.message, code=self.code)
            try:
                netloc = punycode(netloc)
            except UnicodeError:
                raise e
            url = urlunsplit((scheme, netloc, path, query, fragment))
            super().__call__(url)
        else:
            raise
    else:
        host_match = re.search('^\\[(.+)\\](?::\\d{2,5})?$', urlsplit(value).netloc)
        if host_match:
            potential_ip = host_match[1]
            try:
                validate_ipv6_address(potential_ip)
            except ValidationError:
                raise ValidationError(self.message, code=self.code)
    if len(urlsplit(value).netloc) > 253:
        raise ValidationError(self.message, code=self.code)","[{""var"": ""url"", ""rename"": ""validated_url""}, {""var"": ""query"", ""rename"": ""split_query_segment""}, {""var"": ""path"", ""rename"": ""url_path_component""}, {""var"": ""fragment"", ""rename"": ""url_fragment""}, {""var"": ""host_match"", ""rename"": ""ipv6_host_match""}, {""var"": ""netloc"", ""rename"": ""domain_location""}, {""var"": ""scheme"", ""rename"": ""url_scheme""}, {""var"": ""potential_ip"", ""rename"": ""ipv6_candidate""}]"
./django/core/validators.py,__call__,validate_email_address,209,228,"def __call__(self, value):
    if not value or '@' not in value:
        raise ValidationError(self.message, code=self.code)
    user_part, domain_part = value.rsplit('@', 1)
    if not self.user_regex.match(user_part):
        raise ValidationError(self.message, code=self.code)
    if domain_part not in self.domain_allowlist and (not self.validate_domain_part(domain_part)):
        try:
            domain_part = punycode(domain_part)
        except UnicodeError:
            pass
        else:
            if self.validate_domain_part(domain_part):
                return
        raise ValidationError(self.message, code=self.code)","def validate_email_address(self, value):
    if not value or '@' not in value:
        raise ValidationError(self.message, code=self.code)
    user_part, domain_part = value.rsplit('@', 1)
    if not self.user_regex.match(user_part):
        raise ValidationError(self.message, code=self.code)
    if domain_part not in self.domain_allowlist and (not self.validate_domain_part(domain_part)):
        try:
            domain_part = punycode(domain_part)
        except UnicodeError:
            pass
        else:
            if self.validate_domain_part(domain_part):
                return
        raise ValidationError(self.message, code=self.code)","[{""var"": ""user_part"", ""rename"": ""local_part_of_email""}, {""var"": ""domain_part"", ""rename"": ""email_domain_segment""}]"
./django/core/validators.py,__call__,validate_numeric_limits,438,477,"def __call__(self, value):
    digit_tuple, exponent = value.as_tuple()[1:]
    if exponent in {'F', 'n', 'N'}:
        raise ValidationError(self.messages['invalid'])
    if exponent >= 0:
        digits = len(digit_tuple) + exponent
        decimals = 0
    elif abs(exponent) > len(digit_tuple):
        digits = decimals = abs(exponent)
    else:
        digits = len(digit_tuple)
        decimals = abs(exponent)
    whole_digits = digits - decimals
    if self.max_digits is not None and digits > self.max_digits:
        raise ValidationError(self.messages['max_digits'], code='max_digits', params={'max': self.max_digits})
    if self.decimal_places is not None and decimals > self.decimal_places:
        raise ValidationError(self.messages['max_decimal_places'], code='max_decimal_places', params={'max': self.decimal_places})
    if self.max_digits is not None and self.decimal_places is not None and (whole_digits > self.max_digits - self.decimal_places):
        raise ValidationError(self.messages['max_whole_digits'], code='max_whole_digits', params={'max': self.max_digits - self.decimal_places})","def validate_numeric_limits(self, value):
    digit_tuple, exponent = value.as_tuple()[1:]
    if exponent in {'F', 'n', 'N'}:
        raise ValidationError(self.messages['invalid'])
    if exponent >= 0:
        digits = len(digit_tuple) + exponent
        decimals = 0
    elif abs(exponent) > len(digit_tuple):
        digits = decimals = abs(exponent)
    else:
        digits = len(digit_tuple)
        decimals = abs(exponent)
    whole_digits = digits - decimals
    if self.max_digits is not None and digits > self.max_digits:
        raise ValidationError(self.messages['max_digits'], code='max_digits', params={'max': self.max_digits})
    if self.decimal_places is not None and decimals > self.decimal_places:
        raise ValidationError(self.messages['max_decimal_places'], code='max_decimal_places', params={'max': self.decimal_places})
    if self.max_digits is not None and self.decimal_places is not None and (whole_digits > self.max_digits - self.decimal_places):
        raise ValidationError(self.messages['max_whole_digits'], code='max_whole_digits', params={'max': self.max_digits - self.decimal_places})","[{""var"": ""decimals"", ""rename"": ""fractional_digit_count""}, {""var"": ""digit_tuple"", ""rename"": ""significand_digits""}, {""var"": ""exponent"", ""rename"": ""value_scale_factor""}, {""var"": ""whole_digits"", ""rename"": ""integer_digits_only""}, {""var"": ""digits"", ""rename"": ""total_significant_digits""}]"
./django/core/validators.py,__call__,validate_file_extension,504,514,"def __call__(self, value):
    extension = Path(value.name).suffix[1:].lower()
    if self.allowed_extensions is not None and extension not in self.allowed_extensions:
        raise ValidationError(self.message, code=self.code, params={'extension': extension, 'allowed_extensions': ', '.join(self.allowed_extensions)})","def validate_file_extension(self, value):
    extension = Path(value.name).suffix[1:].lower()
    if self.allowed_extensions is not None and extension not in self.allowed_extensions:
        raise ValidationError(self.message, code=self.code, params={'extension': extension, 'allowed_extensions': ', '.join(self.allowed_extensions)})","[{""var"": ""extension"", ""rename"": ""file_extension_lowercase""}]"
