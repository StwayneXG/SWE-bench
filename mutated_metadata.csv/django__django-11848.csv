file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/utils/http.py,parse_http_date,convert_http_date_to_epoch_seconds,158,191,"def parse_http_date(date):
    """"""
    Parse a date format as specified by HTTP RFC7231 section 7.1.1.1.

    The three formats allowed by the RFC are accepted, even if only the first
    one is still in widespread use.

    Return an integer expressed in seconds since the epoch, in UTC.
    """"""
    for regex in (RFC1123_DATE, RFC850_DATE, ASCTIME_DATE):
        m = regex.match(date)
        if m is not None:
            break
    else:
        raise ValueError('%r is not in a valid HTTP date format' % date)
    try:
        year = int(m.group('year'))
        if year < 100:
            if year < 70:
                year += 2000
            else:
                year += 1900
        month = MONTHS.index(m.group('mon').lower()) + 1
        day = int(m.group('day'))
        hour = int(m.group('hour'))
        min = int(m.group('min'))
        sec = int(m.group('sec'))
        result = datetime.datetime(year, month, day, hour, min, sec)
        return calendar.timegm(result.utctimetuple())
    except Exception as exc:
        raise ValueError('%r is not a valid date' % date) from exc","def convert_http_date_to_epoch_seconds(date):
    """"""
    Parse a date format as specified by HTTP RFC7231 section 7.1.1.1.

    The three formats allowed by the RFC are accepted, even if only the first
    one is still in widespread use.

    Return an integer expressed in seconds since the epoch, in UTC.
    """"""
    for regex in (RFC1123_DATE, RFC850_DATE, ASCTIME_DATE):
        m = regex.match(date)
        if m is not None:
            break
    else:
        raise ValueError('%r is not in a valid HTTP date format' % date)
    try:
        year = int(m.group('year'))
        if year < 100:
            if year < 70:
                year += 2000
            else:
                year += 1900
        month = MONTHS.index(m.group('mon').lower()) + 1
        day = int(m.group('day'))
        hour = int(m.group('hour'))
        min = int(m.group('min'))
        sec = int(m.group('sec'))
        result = datetime.datetime(year, month, day, hour, min, sec)
        return calendar.timegm(result.utctimetuple())
    except Exception as exc:
        raise ValueError('%r is not a valid date' % date) from exc","[{""var"": ""sec"", ""rename"": ""seconds""}, {""var"": ""min"", ""rename"": ""minute""}, {""var"": ""year"", ""rename"": ""parsed_year""}, {""var"": ""hour"", ""rename"": ""parsed_hour""}, {""var"": ""month"", ""rename"": ""parsed_month_index""}, {""var"": ""m"", ""rename"": ""date_match""}, {""var"": ""result"", ""rename"": ""parsed_epoch_time_utc""}, {""var"": ""regex"", ""rename"": ""http_date_pattern""}, {""var"": ""day"", ""rename"": ""extracted_day""}]"
