file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/contrib/admin/utils.py,display_for_field,format_value_for_display,380,407,"def display_for_field(value, field, empty_value_display):
    from django.contrib.admin.templatetags.admin_list import _boolean_icon
    if getattr(field, 'flatchoices', None):
        return dict(field.flatchoices).get(value, empty_value_display)
    elif isinstance(field, models.BooleanField):
        return _boolean_icon(value)
    elif value is None:
        return empty_value_display
    elif isinstance(field, models.DateTimeField):
        return formats.localize(timezone.template_localtime(value))
    elif isinstance(field, (models.DateField, models.TimeField)):
        return formats.localize(value)
    elif isinstance(field, models.DecimalField):
        return formats.number_format(value, field.decimal_places)
    elif isinstance(field, (models.IntegerField, models.FloatField)):
        return formats.number_format(value)
    elif isinstance(field, models.FileField) and value:
        return format_html('<a href=""{}"">{}</a>', value.url, value)
    elif isinstance(field, models.JSONField) and value:
        try:
            return field.get_prep_value(value)
        except TypeError:
            return display_for_value(value, empty_value_display)
    else:
        return display_for_value(value, empty_value_display)","def format_value_for_display(value, field, empty_value_display):
    from django.contrib.admin.templatetags.admin_list import _boolean_icon
    if getattr(field, 'flatchoices', None):
        return dict(field.flatchoices).get(value, empty_value_display)
    elif isinstance(field, models.BooleanField):
        return _boolean_icon(value)
    elif value is None:
        return empty_value_display
    elif isinstance(field, models.DateTimeField):
        return formats.localize(timezone.template_localtime(value))
    elif isinstance(field, (models.DateField, models.TimeField)):
        return formats.localize(value)
    elif isinstance(field, models.DecimalField):
        return formats.number_format(value, field.decimal_places)
    elif isinstance(field, (models.IntegerField, models.FloatField)):
        return formats.number_format(value)
    elif isinstance(field, models.FileField) and value:
        return format_html('<a href=""{}"">{}</a>', value.url, value)
    elif isinstance(field, models.JSONField) and value:
        try:
            return field.get_prep_value(value)
        except TypeError:
            return display_for_value(value, empty_value_display)
    else:
        return display_for_value(value, empty_value_display)",[]
./django/forms/fields.py,prepare_value,serialize_or_return_invalid_json,1258,1261,"def prepare_value(self, value):
    if isinstance(value, InvalidJSONInput):
        return value
    return json.dumps(value, cls=self.encoder)","def serialize_or_return_invalid_json(self, value):
    if isinstance(value, InvalidJSONInput):
        return value
    return json.dumps(value, cls=self.encoder)",[]
