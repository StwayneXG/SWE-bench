file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/db/migrations/autodetector.py,generate_renamed_fields,identify_and_record_field_renames,821,872,"def generate_renamed_fields(self):
    """"""Work out renamed fields.""""""
    self.renamed_fields = {}
    for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):
        old_model_name = self.renamed_models.get((app_label, model_name), model_name)
        old_model_state = self.from_state.models[app_label, old_model_name]
        new_model_state = self.to_state.models[app_label, old_model_name]
        field = new_model_state.get_field(field_name)
        field_dec = self.deep_deconstruct(field)
        for rem_app_label, rem_model_name, rem_field_name in sorted(self.old_field_keys - self.new_field_keys):
            if rem_app_label == app_label and rem_model_name == model_name:
                old_field = old_model_state.get_field(rem_field_name)
                old_field_dec = self.deep_deconstruct(old_field)
                if field.remote_field and field.remote_field.model and ('to' in old_field_dec[2]):
                    old_rel_to = old_field_dec[2]['to']
                    if old_rel_to in self.renamed_models_rel:
                        old_field_dec[2]['to'] = self.renamed_models_rel[old_rel_to]
                old_field.set_attributes_from_name(rem_field_name)
                old_db_column = old_field.get_attname_column()[1]
                if old_field_dec == field_dec or (old_field_dec[0:2] == field_dec[0:2] and dict(old_field_dec[2], db_column=old_db_column) == field_dec[2]):
                    if self.questioner.ask_rename(model_name, rem_field_name, field_name, field):
                        if old_field.db_column != field.db_column:
                            altered_field = field.clone()
                            altered_field.name = rem_field_name
                            self.add_operation(app_label, operations.AlterField(model_name=model_name, name=rem_field_name, field=altered_field))
                        self.add_operation(app_label, operations.RenameField(model_name=model_name, old_name=rem_field_name, new_name=field_name))
                        self.old_field_keys.remove((rem_app_label, rem_model_name, rem_field_name))
                        self.old_field_keys.add((app_label, model_name, field_name))
                        self.renamed_fields[app_label, model_name, field_name] = rem_field_name
                        break","def identify_and_record_field_renames(self):
    """"""Work out renamed fields.""""""
    self.renamed_fields = {}
    for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):
        old_model_name = self.renamed_models.get((app_label, model_name), model_name)
        old_model_state = self.from_state.models[app_label, old_model_name]
        new_model_state = self.to_state.models[app_label, old_model_name]
        field = new_model_state.get_field(field_name)
        field_dec = self.deep_deconstruct(field)
        for rem_app_label, rem_model_name, rem_field_name in sorted(self.old_field_keys - self.new_field_keys):
            if rem_app_label == app_label and rem_model_name == model_name:
                old_field = old_model_state.get_field(rem_field_name)
                old_field_dec = self.deep_deconstruct(old_field)
                if field.remote_field and field.remote_field.model and ('to' in old_field_dec[2]):
                    old_rel_to = old_field_dec[2]['to']
                    if old_rel_to in self.renamed_models_rel:
                        old_field_dec[2]['to'] = self.renamed_models_rel[old_rel_to]
                old_field.set_attributes_from_name(rem_field_name)
                old_db_column = old_field.get_attname_column()[1]
                if old_field_dec == field_dec or (old_field_dec[0:2] == field_dec[0:2] and dict(old_field_dec[2], db_column=old_db_column) == field_dec[2]):
                    if self.questioner.ask_rename(model_name, rem_field_name, field_name, field):
                        if old_field.db_column != field.db_column:
                            altered_field = field.clone()
                            altered_field.name = rem_field_name
                            self.add_operation(app_label, operations.AlterField(model_name=model_name, name=rem_field_name, field=altered_field))
                        self.add_operation(app_label, operations.RenameField(model_name=model_name, old_name=rem_field_name, new_name=field_name))
                        self.old_field_keys.remove((rem_app_label, rem_model_name, rem_field_name))
                        self.old_field_keys.add((app_label, model_name, field_name))
                        self.renamed_fields[app_label, model_name, field_name] = rem_field_name
                        break","[{""var"": ""rem_field_name"", ""rename"": ""obsolete_field_name""}, {""var"": ""old_model_name"", ""rename"": ""prior_model_identifier""}, {""var"": ""field"", ""rename"": ""current_field_instance""}, {""var"": ""old_db_column"", ""rename"": ""previous_db_column_name""}, {""var"": ""old_model_state"", ""rename"": ""previous_model_state""}, {""var"": ""altered_field"", ""rename"": ""modified_field_clone""}, {""var"": ""rem_model_name"", ""rename"": ""previous_model_name""}, {""var"": ""old_field_dec"", ""rename"": ""old_field_deconstructed""}, {""var"": ""old_rel_to"", ""rename"": ""previous_relation_target""}, {""var"": ""rem_app_label"", ""rename"": ""deprecated_app_label""}, {""var"": ""field_name"", ""rename"": ""current_field_name""}, {""var"": ""field_dec"", ""rename"": ""field_deconstruction""}, {""var"": ""old_field"", ""rename"": ""previous_model_field""}, {""var"": ""app_label"", ""rename"": ""application_identifier""}, {""var"": ""model_name"", ""rename"": ""current_model_identifier""}, {""var"": ""new_model_state"", ""rename"": ""updated_model_state""}]"
