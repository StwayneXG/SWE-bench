file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sympy/tensor/array/dense_ndim_array.py,_new,create_ndarray_instance,141,153,"@classmethod
def _new(cls, iterable, shape, **kwargs):
    from sympy.utilities.iterables import flatten
    shape, flat_list = cls._handle_ndarray_creation_inputs(iterable, shape, **kwargs)
    shape = Tuple(*map(_sympify, shape))
    flat_list = flatten(flat_list)
    flat_list = Tuple(*flat_list)
    self = Basic.__new__(cls, flat_list, shape, **kwargs)
    self._shape = shape
    self._array = list(flat_list)
    self._rank = len(shape)
    self._loop_size = functools.reduce(lambda x, y: x * y, shape) if shape else 0
    return self","@classmethod
def create_ndarray_instance(cls, iterable, shape, **kwargs):
    from sympy.utilities.iterables import flatten
    shape, flat_list = cls._handle_ndarray_creation_inputs(iterable, shape, **kwargs)
    shape = Tuple(*map(_sympify, shape))
    flat_list = flatten(flat_list)
    flat_list = Tuple(*flat_list)
    self = Basic.__new__(cls, flat_list, shape, **kwargs)
    self._shape = shape
    self._array = list(flat_list)
    self._rank = len(shape)
    self._loop_size = functools.reduce(lambda x, y: x * y, shape) if shape else 0
    return self","[{""var"": ""flat_list"", ""rename"": ""flattened_element_list""}]"
