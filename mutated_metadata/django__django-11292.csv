file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/core/management/base.py,create_parser,initialize_command_parser,249,290,"def create_parser(self, prog_name, subcommand, **kwargs):
    """"""
        Create and return the ``ArgumentParser`` which will be used to
        parse the arguments to this command.
        """"""
    parser = CommandParser(prog='%s %s' % (os.path.basename(prog_name), subcommand), description=self.help or None, formatter_class=DjangoHelpFormatter, missing_args_message=getattr(self, 'missing_args_message', None), called_from_command_line=getattr(self, '_called_from_command_line', None), **kwargs)
    parser.add_argument('--version', action='version', version=self.get_version())
    parser.add_argument('-v', '--verbosity', default=1, type=int, choices=[0, 1, 2, 3], help='Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output')
    parser.add_argument('--settings', help='The Python path to a settings module, e.g. ""myproject.settings.main"". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.')
    parser.add_argument('--pythonpath', help='A directory to add to the Python path, e.g. ""/home/djangoprojects/myproject"".')
    parser.add_argument('--traceback', action='store_true', help='Raise on CommandError exceptions')
    parser.add_argument('--no-color', action='store_true', help=""Don't colorize the command output."")
    parser.add_argument('--force-color', action='store_true', help='Force colorization of the command output.')
    self.add_arguments(parser)
    return parser","def initialize_command_parser(self, prog_name, subcommand, **kwargs):
    """"""
        Create and return the ``ArgumentParser`` which will be used to
        parse the arguments to this command.
        """"""
    parser = CommandParser(prog='%s %s' % (os.path.basename(prog_name), subcommand), description=self.help or None, formatter_class=DjangoHelpFormatter, missing_args_message=getattr(self, 'missing_args_message', None), called_from_command_line=getattr(self, '_called_from_command_line', None), **kwargs)
    parser.add_argument('--version', action='version', version=self.get_version())
    parser.add_argument('-v', '--verbosity', default=1, type=int, choices=[0, 1, 2, 3], help='Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output')
    parser.add_argument('--settings', help='The Python path to a settings module, e.g. ""myproject.settings.main"". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.')
    parser.add_argument('--pythonpath', help='A directory to add to the Python path, e.g. ""/home/djangoprojects/myproject"".')
    parser.add_argument('--traceback', action='store_true', help='Raise on CommandError exceptions')
    parser.add_argument('--no-color', action='store_true', help=""Don't colorize the command output."")
    parser.add_argument('--force-color', action='store_true', help='Force colorization of the command output.')
    self.add_arguments(parser)
    return parser","[{""var"": ""parser"", ""rename"": ""command_argument_parser""}]"
./django/core/management/base.py,add_arguments,integrate_custom_parser_arguments,292,296,"def add_arguments(self, parser):
    """"""
        Entry point for subclassed commands to add custom arguments.
        """"""
    pass","def integrate_custom_parser_arguments(self, parser):
    """"""
        Entry point for subclassed commands to add custom arguments.
        """"""
    pass",[]
./django/core/management/base.py,execute,execute_with_system_checks_and_styling,342,374,"def execute(self, *args, **options):
    """"""
        Try to execute this command, performing system checks if needed (as
        controlled by the ``requires_system_checks`` attribute, except if
        force-skipped).
        """"""
    if options['force_color'] and options['no_color']:
        raise CommandError(""The --no-color and --force-color options can't be used together."")
    if options['force_color']:
        self.style = color_style(force_color=True)
    elif options['no_color']:
        self.style = no_style()
        self.stderr.style_func = None
    if options.get('stdout'):
        self.stdout = OutputWrapper(options['stdout'])
    if options.get('stderr'):
        self.stderr = OutputWrapper(options['stderr'])
    if self.requires_system_checks and (not options.get('skip_checks')):
        self.check()
    if self.requires_migrations_checks:
        self.check_migrations()
    output = self.handle(*args, **options)
    if output:
        if self.output_transaction:
            connection = connections[options.get('database', DEFAULT_DB_ALIAS)]
            output = '%s\n%s\n%s' % (self.style.SQL_KEYWORD(connection.ops.start_transaction_sql()), output, self.style.SQL_KEYWORD(connection.ops.end_transaction_sql()))
        self.stdout.write(output)
    return output","def execute_with_system_checks_and_styling(self, *args, **options):
    """"""
        Try to execute this command, performing system checks if needed (as
        controlled by the ``requires_system_checks`` attribute, except if
        force-skipped).
        """"""
    if options['force_color'] and options['no_color']:
        raise CommandError(""The --no-color and --force-color options can't be used together."")
    if options['force_color']:
        self.style = color_style(force_color=True)
    elif options['no_color']:
        self.style = no_style()
        self.stderr.style_func = None
    if options.get('stdout'):
        self.stdout = OutputWrapper(options['stdout'])
    if options.get('stderr'):
        self.stderr = OutputWrapper(options['stderr'])
    if self.requires_system_checks and (not options.get('skip_checks')):
        self.check()
    if self.requires_migrations_checks:
        self.check_migrations()
    output = self.handle(*args, **options)
    if output:
        if self.output_transaction:
            connection = connections[options.get('database', DEFAULT_DB_ALIAS)]
            output = '%s\n%s\n%s' % (self.style.SQL_KEYWORD(connection.ops.start_transaction_sql()), output, self.style.SQL_KEYWORD(connection.ops.end_transaction_sql()))
        self.stdout.write(output)
    return output","[{""var"": ""connection"", ""rename"": ""database_connection""}, {""var"": ""output"", ""rename"": ""command_result""}]"
