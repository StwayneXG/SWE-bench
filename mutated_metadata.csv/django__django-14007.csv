file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/db/models/sql/compiler.py,execute_sql,execute_and_fetch_insert_results,1403,1421,"def execute_sql(self, returning_fields=None):
    assert not (returning_fields and len(self.query.objs) != 1 and (not self.connection.features.can_return_rows_from_bulk_insert))
    self.returning_fields = returning_fields
    with self.connection.cursor() as cursor:
        for sql, params in self.as_sql():
            cursor.execute(sql, params)
        if not self.returning_fields:
            return []
        if self.connection.features.can_return_rows_from_bulk_insert and len(self.query.objs) > 1:
            return self.connection.ops.fetch_returned_insert_rows(cursor)
        if self.connection.features.can_return_columns_from_insert:
            assert len(self.query.objs) == 1
            return [self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)]
        return [(self.connection.ops.last_insert_id(cursor, self.query.get_meta().db_table, self.query.get_meta().pk.column),)]","def execute_and_fetch_insert_results(self, returning_fields=None):
    assert not (returning_fields and len(self.query.objs) != 1 and (not self.connection.features.can_return_rows_from_bulk_insert))
    self.returning_fields = returning_fields
    with self.connection.cursor() as cursor:
        for sql, params in self.as_sql():
            cursor.execute(sql, params)
        if not self.returning_fields:
            return []
        if self.connection.features.can_return_rows_from_bulk_insert and len(self.query.objs) > 1:
            return self.connection.ops.fetch_returned_insert_rows(cursor)
        if self.connection.features.can_return_columns_from_insert:
            assert len(self.query.objs) == 1
            return [self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)]
        return [(self.connection.ops.last_insert_id(cursor, self.query.get_meta().db_table, self.query.get_meta().pk.column),)]","[{""var"": ""sql"", ""rename"": ""query_statement""}, {""var"": ""cursor"", ""rename"": ""database_cursor_handler""}, {""var"": ""params"", ""rename"": ""sql_parameters""}]"
./django/db/models/sql/compiler.py,single_alias,is_single_active_alias,1426,1429,"@cached_property
def single_alias(self):
    self.query.get_initial_alias()
    return sum((self.query.alias_refcount[t] > 0 for t in self.query.alias_map)) == 1","@cached_property
def is_single_active_alias(self):
    self.query.get_initial_alias()
    return sum((self.query.alias_refcount[t] > 0 for t in self.query.alias_map)) == 1","[{""var"": ""t"", ""rename"": ""alias_identifier""}]"
