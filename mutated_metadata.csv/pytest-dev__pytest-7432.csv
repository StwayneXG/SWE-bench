file,method_name,new_method_name,start_line,end_line,original_code,code,var
./src/_pytest/skipping.py,pytest_runtest_makereport,generate_test_result_report_with_hooks,261,305,"@hookimpl(hookwrapper=True)
def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
    outcome = (yield)
    rep = outcome.get_result()
    xfailed = item._store.get(xfailed_key, None)
    if unexpectedsuccess_key in item._store and rep.when == 'call':
        reason = item._store[unexpectedsuccess_key]
        if reason:
            rep.longrepr = 'Unexpected success: {}'.format(reason)
        else:
            rep.longrepr = 'Unexpected success'
        rep.outcome = 'failed'
    elif item.config.option.runxfail:
        pass
    elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):
        assert call.excinfo.value.msg is not None
        rep.wasxfail = 'reason: ' + call.excinfo.value.msg
        rep.outcome = 'skipped'
    elif not rep.skipped and xfailed:
        if call.excinfo:
            raises = xfailed.raises
            if raises is not None and (not isinstance(call.excinfo.value, raises)):
                rep.outcome = 'failed'
            else:
                rep.outcome = 'skipped'
                rep.wasxfail = xfailed.reason
        elif call.when == 'call':
            if xfailed.strict:
                rep.outcome = 'failed'
                rep.longrepr = '[XPASS(strict)] ' + xfailed.reason
            else:
                rep.outcome = 'passed'
                rep.wasxfail = xfailed.reason
    elif item._store.get(skipped_by_mark_key, True) and rep.skipped and (type(rep.longrepr) is tuple):
        _, _, reason = rep.longrepr
        filename, line = item.reportinfo()[:2]
        assert line is not None
        rep.longrepr = (str(filename), line + 1, reason)","@hookimpl(hookwrapper=True)
def generate_test_result_report_with_hooks(item: Item, call: CallInfo[None]):
    outcome = (yield)
    rep = outcome.get_result()
    xfailed = item._store.get(xfailed_key, None)
    if unexpectedsuccess_key in item._store and rep.when == 'call':
        reason = item._store[unexpectedsuccess_key]
        if reason:
            rep.longrepr = 'Unexpected success: {}'.format(reason)
        else:
            rep.longrepr = 'Unexpected success'
        rep.outcome = 'failed'
    elif item.config.option.runxfail:
        pass
    elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):
        assert call.excinfo.value.msg is not None
        rep.wasxfail = 'reason: ' + call.excinfo.value.msg
        rep.outcome = 'skipped'
    elif not rep.skipped and xfailed:
        if call.excinfo:
            raises = xfailed.raises
            if raises is not None and (not isinstance(call.excinfo.value, raises)):
                rep.outcome = 'failed'
            else:
                rep.outcome = 'skipped'
                rep.wasxfail = xfailed.reason
        elif call.when == 'call':
            if xfailed.strict:
                rep.outcome = 'failed'
                rep.longrepr = '[XPASS(strict)] ' + xfailed.reason
            else:
                rep.outcome = 'passed'
                rep.wasxfail = xfailed.reason
    elif item._store.get(skipped_by_mark_key, True) and rep.skipped and (type(rep.longrepr) is tuple):
        _, _, reason = rep.longrepr
        filename, line = item.reportinfo()[:2]
        assert line is not None
        rep.longrepr = (str(filename), line + 1, reason)","[{""var"": ""rep"", ""rename"": ""test_report""}, {""var"": ""filename"", ""rename"": ""test_script_filename""}, {""var"": ""line"", ""rename"": ""report_line_number""}, {""var"": ""raises"", ""rename"": ""expected_exception_type""}, {""var"": ""_"", ""rename"": ""The function `pytest_runtest_makereport` is responsible for modifying the test report in the pytest framework based on conditions such as unexpected successes, expected failures, or skipped tests due to certain marks. Given its role in handling unexpected test outcomes""}, {""var"": ""outcome"", ""rename"": ""test_result_outcome""}, {""var"": ""reason"", ""rename"": ""unexpected_success_reason""}, {""var"": ""xfailed"", ""rename"": ""expectedFailureInfo""}]"
