file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/db/migrations/operations/models.py,database_forwards,migrate_index_forward,934,966,"def database_forwards(self, app_label, schema_editor, from_state, to_state):
    model = to_state.apps.get_model(app_label, self.model_name)
    if not self.allow_migrate_model(schema_editor.connection.alias, model):
        return
    if self.old_fields:
        from_model = from_state.apps.get_model(app_label, self.model_name)
        columns = [from_model._meta.get_field(field).column for field in self.old_fields]
        matching_index_name = schema_editor._constraint_names(from_model, column_names=columns, index=True)
        if len(matching_index_name) != 1:
            raise ValueError('Found wrong number (%s) of indexes for %s(%s).' % (len(matching_index_name), from_model._meta.db_table, ', '.join(columns)))
        old_index = models.Index(fields=self.old_fields, name=matching_index_name[0])
    else:
        from_model_state = from_state.models[app_label, self.model_name_lower]
        old_index = from_model_state.get_index_by_name(self.old_name)
    to_model_state = to_state.models[app_label, self.model_name_lower]
    new_index = to_model_state.get_index_by_name(self.new_name)
    schema_editor.rename_index(model, old_index, new_index)","def migrate_index_forward(self, app_label, schema_editor, from_state, to_state):
    model = to_state.apps.get_model(app_label, self.model_name)
    if not self.allow_migrate_model(schema_editor.connection.alias, model):
        return
    if self.old_fields:
        from_model = from_state.apps.get_model(app_label, self.model_name)
        columns = [from_model._meta.get_field(field).column for field in self.old_fields]
        matching_index_name = schema_editor._constraint_names(from_model, column_names=columns, index=True)
        if len(matching_index_name) != 1:
            raise ValueError('Found wrong number (%s) of indexes for %s(%s).' % (len(matching_index_name), from_model._meta.db_table, ', '.join(columns)))
        old_index = models.Index(fields=self.old_fields, name=matching_index_name[0])
    else:
        from_model_state = from_state.models[app_label, self.model_name_lower]
        old_index = from_model_state.get_index_by_name(self.old_name)
    to_model_state = to_state.models[app_label, self.model_name_lower]
    new_index = to_model_state.get_index_by_name(self.new_name)
    schema_editor.rename_index(model, old_index, new_index)","[{""var"": ""field"", ""rename"": ""field_name""}, {""var"": ""model"", ""rename"": ""target_model""}, {""var"": ""from_model_state"", ""rename"": ""initial_model_state""}, {""var"": ""to_model_state"", ""rename"": ""destination_model_state""}, {""var"": ""old_index"", ""rename"": ""previous_index_definition""}, {""var"": ""matching_index_name"", ""rename"": ""retrieved_index_names""}, {""var"": ""from_model"", ""rename"": ""source_model""}, {""var"": ""columns"", ""rename"": ""field_column_names""}, {""var"": ""new_index"", ""rename"": ""target_index""}]"
