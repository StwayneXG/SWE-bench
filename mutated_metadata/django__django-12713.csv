file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/contrib/admin/options.py,formfield_for_manytomany,generate_manytomany_form_field_with_custom_widgets,242,274,"def formfield_for_manytomany(self, db_field, request, **kwargs):
    """"""
        Get a form Field for a ManyToManyField.
        """"""
    if not db_field.remote_field.through._meta.auto_created:
        return None
    db = kwargs.get('using')
    autocomplete_fields = self.get_autocomplete_fields(request)
    if db_field.name in autocomplete_fields:
        kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
    elif db_field.name in self.raw_id_fields:
        kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
    elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
        kwargs['widget'] = widgets.FilteredSelectMultiple(db_field.verbose_name, db_field.name in self.filter_vertical)
    if 'queryset' not in kwargs:
        queryset = self.get_field_queryset(db, db_field, request)
        if queryset is not None:
            kwargs['queryset'] = queryset
    form_field = db_field.formfield(**kwargs)
    if isinstance(form_field.widget, SelectMultiple) and (not isinstance(form_field.widget, (CheckboxSelectMultiple, AutocompleteSelectMultiple))):
        msg = _('Hold down “Control”, or “Command” on a Mac, to select more than one.')
        help_text = form_field.help_text
        form_field.help_text = format_lazy('{} {}', help_text, msg) if help_text else msg
    return form_field","def generate_manytomany_form_field_with_custom_widgets(self, db_field, request, **kwargs):
    """"""
        Get a form Field for a ManyToManyField.
        """"""
    if not db_field.remote_field.through._meta.auto_created:
        return None
    db = kwargs.get('using')
    autocomplete_fields = self.get_autocomplete_fields(request)
    if db_field.name in autocomplete_fields:
        kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
    elif db_field.name in self.raw_id_fields:
        kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
    elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
        kwargs['widget'] = widgets.FilteredSelectMultiple(db_field.verbose_name, db_field.name in self.filter_vertical)
    if 'queryset' not in kwargs:
        queryset = self.get_field_queryset(db, db_field, request)
        if queryset is not None:
            kwargs['queryset'] = queryset
    form_field = db_field.formfield(**kwargs)
    if isinstance(form_field.widget, SelectMultiple) and (not isinstance(form_field.widget, (CheckboxSelectMultiple, AutocompleteSelectMultiple))):
        msg = _('Hold down “Control”, or “Command” on a Mac, to select more than one.')
        help_text = form_field.help_text
        form_field.help_text = format_lazy('{} {}', help_text, msg) if help_text else msg
    return form_field","[{""var"": ""msg"", ""rename"": ""multi_select_instruction_msg""}, {""var"": ""form_field"", ""rename"": ""many_to_many_form_field""}, {""var"": ""queryset"", ""rename"": ""related_objects_queryset""}, {""var"": ""db"", ""rename"": ""database_alias""}, {""var"": ""help_text"", ""rename"": ""user_instruction_message""}, {""var"": ""autocomplete_fields"", ""rename"": ""multi_select_autocomplete_fields""}]"
