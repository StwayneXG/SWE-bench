file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sympy/sets/handlers/intersection.py,intersection_sets,compute_imageset_intersection,224,382,"@dispatch(ImageSet, Set)
def intersection_sets(self, other):
    from sympy.solvers.diophantine import diophantine
    if len(self.lamda.variables) > 1 or self.lamda.signature != self.lamda.variables:
        return None
    base_set = self.base_sets[0]
    if base_set is S.Integers:
        gm = None
        if isinstance(other, ImageSet) and other.base_sets == (S.Integers,):
            gm = other.lamda.expr
            var = other.lamda.variables[0]
            m = Dummy('m')
            gm = gm.subs(var, m)
        elif other is S.Integers:
            m = gm = Dummy('m')
        if gm is not None:
            fn = self.lamda.expr
            n = self.lamda.variables[0]
            try:
                solns = list(diophantine(fn - gm, syms=(n, m), permute=True))
            except (TypeError, NotImplementedError):
                return
            if len(solns) == 0:
                return EmptySet
            elif any((not isinstance(s, int) and s.free_symbols for tupl in solns for s in tupl)):
                if len(solns) == 1:
                    soln, solm = solns[0]
                    t, = soln.free_symbols
                    expr = fn.subs(n, soln.subs(t, n)).expand()
                    return imageset(Lambda(n, expr), S.Integers)
                else:
                    return
            else:
                return FiniteSet(*(fn.subs(n, s[0]) for s in solns))
    if other == S.Reals:
        from sympy.core.function import expand_complex
        from sympy.solvers.solvers import denoms, solve_linear
        from sympy.core.relational import Eq
        f = self.lamda.expr
        n = self.lamda.variables[0]
        n_ = Dummy(n.name, real=True)
        f_ = f.subs(n, n_)
        re, im = f_.as_real_imag()
        im = expand_complex(im)
        re = re.subs(n_, n)
        im = im.subs(n_, n)
        ifree = im.free_symbols
        lam = Lambda(n, re)
        if im.is_zero:
            pass
        elif im.is_zero is False:
            return S.EmptySet
        elif ifree != {n}:
            return None
        else:
            x, xis = zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols])
            if x and all((i == n for i in x)):
                base_set -= FiniteSet(xis)
            else:
                base_set -= ConditionSet(n, Eq(im, 0), S.Integers)
        for i in denoms(f):
            if i.has(n):
                sol = list(zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols]))
                if sol != []:
                    x, xis = sol
                    if x and all((i == n for i in x)):
                        base_set -= FiniteSet(xis)
                else:
                    base_set -= ConditionSet(n, Eq(i, 0), S.Integers)
        return imageset(lam, base_set)
    elif isinstance(other, Interval):
        from sympy.solvers.solveset import invert_real, invert_complex, solveset
        f = self.lamda.expr
        n = self.lamda.variables[0]
        new_inf, new_sup = (None, None)
        new_lopen, new_ropen = (other.left_open, other.right_open)
        if f.is_real:
            inverter = invert_real
        else:
            inverter = invert_complex
        g1, h1 = inverter(f, other.inf, n)
        g2, h2 = inverter(f, other.sup, n)
        if all((isinstance(i, FiniteSet) for i in (h1, h2))):
            if g1 == n:
                if len(h1) == 1:
                    new_inf = h1.args[0]
            if g2 == n:
                if len(h2) == 1:
                    new_sup = h2.args[0]
            if any((i is None for i in (new_sup, new_inf))):
                return
            range_set = S.EmptySet
            if all((i.is_real for i in (new_sup, new_inf))):
                if new_inf > new_sup:
                    new_inf, new_sup = (new_sup, new_inf)
                new_interval = Interval(new_inf, new_sup, new_lopen, new_ropen)
                range_set = base_set.intersect(new_interval)
            elif other.is_subset(S.Reals):
                solutions = solveset(f, n, S.Reals)
                if not isinstance(range_set, (ImageSet, ConditionSet)):
                    range_set = solutions.intersect(other)
                else:
                    return
            if range_set is S.EmptySet:
                return S.EmptySet
            elif isinstance(range_set, Range) and range_set.size is not S.Infinity:
                range_set = FiniteSet(*list(range_set))
            if range_set is not None:
                return imageset(Lambda(n, f), range_set)
            return
        else:
            return","@dispatch(ImageSet, Set)
def compute_imageset_intersection(self, other):
    from sympy.solvers.diophantine import diophantine
    if len(self.lamda.variables) > 1 or self.lamda.signature != self.lamda.variables:
        return None
    base_set = self.base_sets[0]
    if base_set is S.Integers:
        gm = None
        if isinstance(other, ImageSet) and other.base_sets == (S.Integers,):
            gm = other.lamda.expr
            var = other.lamda.variables[0]
            m = Dummy('m')
            gm = gm.subs(var, m)
        elif other is S.Integers:
            m = gm = Dummy('m')
        if gm is not None:
            fn = self.lamda.expr
            n = self.lamda.variables[0]
            try:
                solns = list(diophantine(fn - gm, syms=(n, m), permute=True))
            except (TypeError, NotImplementedError):
                return
            if len(solns) == 0:
                return EmptySet
            elif any((not isinstance(s, int) and s.free_symbols for tupl in solns for s in tupl)):
                if len(solns) == 1:
                    soln, solm = solns[0]
                    t, = soln.free_symbols
                    expr = fn.subs(n, soln.subs(t, n)).expand()
                    return imageset(Lambda(n, expr), S.Integers)
                else:
                    return
            else:
                return FiniteSet(*(fn.subs(n, s[0]) for s in solns))
    if other == S.Reals:
        from sympy.core.function import expand_complex
        from sympy.solvers.solvers import denoms, solve_linear
        from sympy.core.relational import Eq
        f = self.lamda.expr
        n = self.lamda.variables[0]
        n_ = Dummy(n.name, real=True)
        f_ = f.subs(n, n_)
        re, im = f_.as_real_imag()
        im = expand_complex(im)
        re = re.subs(n_, n)
        im = im.subs(n_, n)
        ifree = im.free_symbols
        lam = Lambda(n, re)
        if im.is_zero:
            pass
        elif im.is_zero is False:
            return S.EmptySet
        elif ifree != {n}:
            return None
        else:
            x, xis = zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols])
            if x and all((i == n for i in x)):
                base_set -= FiniteSet(xis)
            else:
                base_set -= ConditionSet(n, Eq(im, 0), S.Integers)
        for i in denoms(f):
            if i.has(n):
                sol = list(zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols]))
                if sol != []:
                    x, xis = sol
                    if x and all((i == n for i in x)):
                        base_set -= FiniteSet(xis)
                else:
                    base_set -= ConditionSet(n, Eq(i, 0), S.Integers)
        return imageset(lam, base_set)
    elif isinstance(other, Interval):
        from sympy.solvers.solveset import invert_real, invert_complex, solveset
        f = self.lamda.expr
        n = self.lamda.variables[0]
        new_inf, new_sup = (None, None)
        new_lopen, new_ropen = (other.left_open, other.right_open)
        if f.is_real:
            inverter = invert_real
        else:
            inverter = invert_complex
        g1, h1 = inverter(f, other.inf, n)
        g2, h2 = inverter(f, other.sup, n)
        if all((isinstance(i, FiniteSet) for i in (h1, h2))):
            if g1 == n:
                if len(h1) == 1:
                    new_inf = h1.args[0]
            if g2 == n:
                if len(h2) == 1:
                    new_sup = h2.args[0]
            if any((i is None for i in (new_sup, new_inf))):
                return
            range_set = S.EmptySet
            if all((i.is_real for i in (new_sup, new_inf))):
                if new_inf > new_sup:
                    new_inf, new_sup = (new_sup, new_inf)
                new_interval = Interval(new_inf, new_sup, new_lopen, new_ropen)
                range_set = base_set.intersect(new_interval)
            elif other.is_subset(S.Reals):
                solutions = solveset(f, n, S.Reals)
                if not isinstance(range_set, (ImageSet, ConditionSet)):
                    range_set = solutions.intersect(other)
                else:
                    return
            if range_set is S.EmptySet:
                return S.EmptySet
            elif isinstance(range_set, Range) and range_set.size is not S.Infinity:
                range_set = FiniteSet(*list(range_set))
            if range_set is not None:
                return imageset(Lambda(n, f), range_set)
            return
        else:
            return","[{""var"": ""solutions"", ""rename"": ""intersection_solutions""}, {""var"": ""sol"", ""rename"": ""solution_points""}, {""var"": ""n"", ""rename"": ""index_variable""}, {""var"": ""x"", ""rename"": ""intersection_result""}, {""var"": ""i"", ""rename"": ""denominator_factor""}, {""var"": ""im"", ""rename"": ""imaginary_component""}, {""var"": ""t"", ""rename"": ""free_symbol""}, {""var"": ""expr"", ""rename"": ""expression_to_evaluate""}, {""var"": ""range_set"", ""rename"": ""intersection_within_domain""}, {""var"": ""solm"", ""rename"": ""solution_multiplier""}, {""var"": ""soln"", ""rename"": ""diophantine_solutions""}, {""var"": ""h2"", ""rename"": ""upper_bound_inverted_set""}, {""var"": ""h1"", ""rename"": ""invert_result_sup""}, {""var"": ""new_sup"", ""rename"": ""new_upper_bound""}, {""var"": ""var"", ""rename"": ""variable_expression""}, {""var"": ""ifree"", ""rename"": ""imaginary_free_symbols""}, {""var"": ""new_ropen"", ""rename"": ""right_endpoint_open""}, {""var"": ""re"", ""rename"": ""real_part_expression""}, {""var"": ""s"", ""rename"": ""intersection_result""}, {""var"": ""g2"", ""rename"": ""upper_bound_transformation""}, {""var"": ""n_"", ""rename"": ""real_imaginary_dummy""}, {""var"": ""m"", ""rename"": ""dummy_variable_m""}, {""var"": ""inverter"", ""rename"": ""function_inverter""}, {""var"": ""base_set"", ""rename"": ""integer_base_set""}, {""var"": ""lam"", ""rename"": ""lambda_function""}, {""var"": ""xis"", ""rename"": ""extracted_coeff""}, {""var"": ""fn"", ""rename"": ""function_expression""}, {""var"": ""g1"", ""rename"": ""inverted_expression_lower_bound""}, {""var"": ""f"", ""rename"": ""intersection_function""}, {""var"": ""gm"", ""rename"": ""general_mapping_expression""}, {""var"": ""tupl"", ""rename"": ""solution_tuple""}, {""var"": ""new_lopen"", ""rename"": ""new_left_endpoint_open""}, {""var"": ""new_interval"", ""rename"": ""resulting_interval""}, {""var"": ""new_inf"", ""rename"": ""intersection_inferior_bound""}, {""var"": ""solns"", ""rename"": ""diophantine_solutions""}, {""var"": ""f_"", ""rename"": ""intersection_function""}]"
