file,method_name,new_method_name,start_line,end_line,original_code,code,var
./lib/matplotlib/figure.py,subfigures,create_subfigure_grid,1545,1600,"def subfigures(self, nrows=1, ncols=1, squeeze=True, wspace=None, hspace=None, width_ratios=None, height_ratios=None, **kwargs):
    """"""
        Add a set of subfigures to this figure or subfigure.

        A subfigure has the same artist methods as a figure, and is logically
        the same as a figure, but cannot print itself.
        See :doc:`/gallery/subplots_axes_and_figures/subfigures`.

        .. note::
            The *subfigure* concept is new in v3.4, and the API is still provisional.

        Parameters
        ----------
        nrows, ncols : int, default: 1
            Number of rows/columns of the subfigure grid.

        squeeze : bool, default: True
            If True, extra dimensions are squeezed out from the returned
            array of subfigures.

        wspace, hspace : float, default: None
            The amount of width/height reserved for space between subfigures,
            expressed as a fraction of the average subfigure width/height.
            If not given, the values will be inferred from a figure or
            rcParams when necessary.

        width_ratios : array-like of length *ncols*, optional
            Defines the relative widths of the columns. Each column gets a
            relative width of ``width_ratios[i] / sum(width_ratios)``.
            If not given, all columns will have the same width.

        height_ratios : array-like of length *nrows*, optional
            Defines the relative heights of the rows. Each row gets a
            relative height of ``height_ratios[i] / sum(height_ratios)``.
            If not given, all rows will have the same height.
        """"""
    gs = GridSpec(nrows=nrows, ncols=ncols, figure=self, wspace=wspace, hspace=hspace, width_ratios=width_ratios, height_ratios=height_ratios)
    sfarr = np.empty((nrows, ncols), dtype=object)
    for i in range(ncols):
        for j in range(nrows):
            sfarr[j, i] = self.add_subfigure(gs[j, i], **kwargs)
    if squeeze:
        return sfarr.item() if sfarr.size == 1 else sfarr.squeeze()
    else:
        return sfarr","def create_subfigure_grid(self, nrows=1, ncols=1, squeeze=True, wspace=None, hspace=None, width_ratios=None, height_ratios=None, **kwargs):
    """"""
        Add a set of subfigures to this figure or subfigure.

        A subfigure has the same artist methods as a figure, and is logically
        the same as a figure, but cannot print itself.
        See :doc:`/gallery/subplots_axes_and_figures/subfigures`.

        .. note::
            The *subfigure* concept is new in v3.4, and the API is still provisional.

        Parameters
        ----------
        nrows, ncols : int, default: 1
            Number of rows/columns of the subfigure grid.

        squeeze : bool, default: True
            If True, extra dimensions are squeezed out from the returned
            array of subfigures.

        wspace, hspace : float, default: None
            The amount of width/height reserved for space between subfigures,
            expressed as a fraction of the average subfigure width/height.
            If not given, the values will be inferred from a figure or
            rcParams when necessary.

        width_ratios : array-like of length *ncols*, optional
            Defines the relative widths of the columns. Each column gets a
            relative width of ``width_ratios[i] / sum(width_ratios)``.
            If not given, all columns will have the same width.

        height_ratios : array-like of length *nrows*, optional
            Defines the relative heights of the rows. Each row gets a
            relative height of ``height_ratios[i] / sum(height_ratios)``.
            If not given, all rows will have the same height.
        """"""
    gs = GridSpec(nrows=nrows, ncols=ncols, figure=self, wspace=wspace, hspace=hspace, width_ratios=width_ratios, height_ratios=height_ratios)
    sfarr = np.empty((nrows, ncols), dtype=object)
    for i in range(ncols):
        for j in range(nrows):
            sfarr[j, i] = self.add_subfigure(gs[j, i], **kwargs)
    if squeeze:
        return sfarr.item() if sfarr.size == 1 else sfarr.squeeze()
    else:
        return sfarr","[{""var"": ""gs"", ""rename"": ""grid_specification""}, {""var"": ""i"", ""rename"": ""column_index""}, {""var"": ""sfarr"", ""rename"": ""subfigure_array""}, {""var"": ""j"", ""rename"": ""row_index""}]"
