file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sphinx/ext/autodoc/typehints.py,record_typehints,capture_function_type_annotations,23,37,"def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Dict, args: str, retann: str) -> None:
    """"""Record type hints to env object.""""""
    try:
        if callable(obj):
            annotations = app.env.temp_data.setdefault('annotations', {})
            annotation = annotations.setdefault(name, OrderedDict())
            sig = inspect.signature(obj)
            for param in sig.parameters.values():
                if param.annotation is not param.empty:
                    annotation[param.name] = typing.stringify(param.annotation)
            if sig.return_annotation is not sig.empty:
                annotation['return'] = typing.stringify(sig.return_annotation)
    except (TypeError, ValueError):
        pass","def capture_function_type_annotations(app: Sphinx, objtype: str, name: str, obj: Any, options: Dict, args: str, retann: str) -> None:
    """"""Record type hints to env object.""""""
    try:
        if callable(obj):
            annotations = app.env.temp_data.setdefault('annotations', {})
            annotation = annotations.setdefault(name, OrderedDict())
            sig = inspect.signature(obj)
            for param in sig.parameters.values():
                if param.annotation is not param.empty:
                    annotation[param.name] = typing.stringify(param.annotation)
            if sig.return_annotation is not sig.empty:
                annotation['return'] = typing.stringify(sig.return_annotation)
    except (TypeError, ValueError):
        pass","[{""var"": ""param"", ""rename"": ""function_parameter""}, {""var"": ""annotations"", ""rename"": ""type_hint_annotations""}, {""var"": ""sig"", ""rename"": ""function_signature""}, {""var"": ""annotation"", ""rename"": ""type_hint_records""}]"
