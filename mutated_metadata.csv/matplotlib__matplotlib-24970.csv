file,method_name,new_method_name,start_line,end_line,original_code,code,var
./lib/matplotlib/colors.py,__call__,convert_to_rgba,683,759,"def __call__(self, X, alpha=None, bytes=False):
    """"""
        Parameters
        ----------
        X : float or int, `~numpy.ndarray` or scalar
            The data value(s) to convert to RGBA.
            For floats, *X* should be in the interval ``[0.0, 1.0]`` to
            return the RGBA values ``X*100`` percent along the Colormap line.
            For integers, *X* should be in the interval ``[0, Colormap.N)`` to
            return RGBA values *indexed* from the Colormap with index ``X``.
        alpha : float or array-like or None
            Alpha must be a scalar between 0 and 1, a sequence of such
            floats with shape matching X, or None.
        bytes : bool
            If False (default), the returned RGBA values will be floats in the
            interval ``[0, 1]`` otherwise they will be uint8s in the interval
            ``[0, 255]``.

        Returns
        -------
        Tuple of RGBA values if X is scalar, otherwise an array of
        RGBA values with a shape of ``X.shape + (4, )``.
        """"""
    if not self._isinit:
        self._init()
    mask_bad = X.mask if np.ma.is_masked(X) else None
    xa = np.array(X, copy=True)
    if mask_bad is None:
        mask_bad = np.isnan(xa)
    if not xa.dtype.isnative:
        xa = xa.byteswap().newbyteorder()
    if xa.dtype.kind == 'f':
        with np.errstate(invalid='ignore'):
            xa *= self.N
            xa[xa < 0] = -1
            xa[xa == self.N] = self.N - 1
            np.clip(xa, -1, self.N, out=xa)
            xa = xa.astype(int)
    xa[xa > self.N - 1] = self._i_over
    xa[xa < 0] = self._i_under
    xa[mask_bad] = self._i_bad
    lut = self._lut
    if bytes:
        lut = (lut * 255).astype(np.uint8)
    rgba = lut.take(xa, axis=0, mode='clip')
    if alpha is not None:
        alpha = np.clip(alpha, 0, 1)
        if bytes:
            alpha *= 255
        if alpha.shape not in [(), xa.shape]:
            raise ValueError(f'alpha is array-like but its shape {alpha.shape} does not match that of X {xa.shape}')
        rgba[..., -1] = alpha
        if (lut[-1] == 0).all() and np.any(mask_bad):
            if np.iterable(mask_bad) and mask_bad.shape == xa.shape:
                rgba[mask_bad] = (0, 0, 0, 0)
            else:
                rgba[..., :] = (0, 0, 0, 0)
    if not np.iterable(X):
        rgba = tuple(rgba)
    return rgba","def convert_to_rgba(self, X, alpha=None, bytes=False):
    """"""
        Parameters
        ----------
        X : float or int, `~numpy.ndarray` or scalar
            The data value(s) to convert to RGBA.
            For floats, *X* should be in the interval ``[0.0, 1.0]`` to
            return the RGBA values ``X*100`` percent along the Colormap line.
            For integers, *X* should be in the interval ``[0, Colormap.N)`` to
            return RGBA values *indexed* from the Colormap with index ``X``.
        alpha : float or array-like or None
            Alpha must be a scalar between 0 and 1, a sequence of such
            floats with shape matching X, or None.
        bytes : bool
            If False (default), the returned RGBA values will be floats in the
            interval ``[0, 1]`` otherwise they will be uint8s in the interval
            ``[0, 255]``.

        Returns
        -------
        Tuple of RGBA values if X is scalar, otherwise an array of
        RGBA values with a shape of ``X.shape + (4, )``.
        """"""
    if not self._isinit:
        self._init()
    mask_bad = X.mask if np.ma.is_masked(X) else None
    xa = np.array(X, copy=True)
    if mask_bad is None:
        mask_bad = np.isnan(xa)
    if not xa.dtype.isnative:
        xa = xa.byteswap().newbyteorder()
    if xa.dtype.kind == 'f':
        with np.errstate(invalid='ignore'):
            xa *= self.N
            xa[xa < 0] = -1
            xa[xa == self.N] = self.N - 1
            np.clip(xa, -1, self.N, out=xa)
            xa = xa.astype(int)
    xa[xa > self.N - 1] = self._i_over
    xa[xa < 0] = self._i_under
    xa[mask_bad] = self._i_bad
    lut = self._lut
    if bytes:
        lut = (lut * 255).astype(np.uint8)
    rgba = lut.take(xa, axis=0, mode='clip')
    if alpha is not None:
        alpha = np.clip(alpha, 0, 1)
        if bytes:
            alpha *= 255
        if alpha.shape not in [(), xa.shape]:
            raise ValueError(f'alpha is array-like but its shape {alpha.shape} does not match that of X {xa.shape}')
        rgba[..., -1] = alpha
        if (lut[-1] == 0).all() and np.any(mask_bad):
            if np.iterable(mask_bad) and mask_bad.shape == xa.shape:
                rgba[mask_bad] = (0, 0, 0, 0)
            else:
                rgba[..., :] = (0, 0, 0, 0)
    if not np.iterable(X):
        rgba = tuple(rgba)
    return rgba","[{""var"": ""lut"", ""rename"": ""colormap_lookup_table""}, {""var"": ""mask_bad"", ""rename"": ""invalid_data_mask""}, {""var"": ""xa"", ""rename"": ""converted_data_array""}, {""var"": ""rgba"", ""rename"": ""rgba_values""}]"
