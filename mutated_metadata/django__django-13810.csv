file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/core/handlers/base.py,load_middleware,configure_middleware_chain,26,95,"def load_middleware(self, is_async=False):
    """"""
        Populate middleware lists from settings.MIDDLEWARE.

        Must be called after the environment is fixed (see __call__ in subclasses).
        """"""
    self._view_middleware = []
    self._template_response_middleware = []
    self._exception_middleware = []
    get_response = self._get_response_async if is_async else self._get_response
    handler = convert_exception_to_response(get_response)
    handler_is_async = is_async
    for middleware_path in reversed(settings.MIDDLEWARE):
        middleware = import_string(middleware_path)
        middleware_can_sync = getattr(middleware, 'sync_capable', True)
        middleware_can_async = getattr(middleware, 'async_capable', False)
        if not middleware_can_sync and (not middleware_can_async):
            raise RuntimeError('Middleware %s must have at least one of sync_capable/async_capable set to True.' % middleware_path)
        elif not handler_is_async and middleware_can_sync:
            middleware_is_async = False
        else:
            middleware_is_async = middleware_can_async
        try:
            handler = self.adapt_method_mode(middleware_is_async, handler, handler_is_async, debug=settings.DEBUG, name='middleware %s' % middleware_path)
            mw_instance = middleware(handler)
        except MiddlewareNotUsed as exc:
            if settings.DEBUG:
                if str(exc):
                    logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)
                else:
                    logger.debug('MiddlewareNotUsed: %r', middleware_path)
            continue
        if mw_instance is None:
            raise ImproperlyConfigured('Middleware factory %s returned None.' % middleware_path)
        if hasattr(mw_instance, 'process_view'):
            self._view_middleware.insert(0, self.adapt_method_mode(is_async, mw_instance.process_view))
        if hasattr(mw_instance, 'process_template_response'):
            self._template_response_middleware.append(self.adapt_method_mode(is_async, mw_instance.process_template_response))
        if hasattr(mw_instance, 'process_exception'):
            self._exception_middleware.append(self.adapt_method_mode(False, mw_instance.process_exception))
        handler = convert_exception_to_response(mw_instance)
        handler_is_async = middleware_is_async
    handler = self.adapt_method_mode(is_async, handler, handler_is_async)
    self._middleware_chain = handler","def configure_middleware_chain(self, is_async=False):
    """"""
        Populate middleware lists from settings.MIDDLEWARE.

        Must be called after the environment is fixed (see __call__ in subclasses).
        """"""
    self._view_middleware = []
    self._template_response_middleware = []
    self._exception_middleware = []
    get_response = self._get_response_async if is_async else self._get_response
    handler = convert_exception_to_response(get_response)
    handler_is_async = is_async
    for middleware_path in reversed(settings.MIDDLEWARE):
        middleware = import_string(middleware_path)
        middleware_can_sync = getattr(middleware, 'sync_capable', True)
        middleware_can_async = getattr(middleware, 'async_capable', False)
        if not middleware_can_sync and (not middleware_can_async):
            raise RuntimeError('Middleware %s must have at least one of sync_capable/async_capable set to True.' % middleware_path)
        elif not handler_is_async and middleware_can_sync:
            middleware_is_async = False
        else:
            middleware_is_async = middleware_can_async
        try:
            handler = self.adapt_method_mode(middleware_is_async, handler, handler_is_async, debug=settings.DEBUG, name='middleware %s' % middleware_path)
            mw_instance = middleware(handler)
        except MiddlewareNotUsed as exc:
            if settings.DEBUG:
                if str(exc):
                    logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)
                else:
                    logger.debug('MiddlewareNotUsed: %r', middleware_path)
            continue
        if mw_instance is None:
            raise ImproperlyConfigured('Middleware factory %s returned None.' % middleware_path)
        if hasattr(mw_instance, 'process_view'):
            self._view_middleware.insert(0, self.adapt_method_mode(is_async, mw_instance.process_view))
        if hasattr(mw_instance, 'process_template_response'):
            self._template_response_middleware.append(self.adapt_method_mode(is_async, mw_instance.process_template_response))
        if hasattr(mw_instance, 'process_exception'):
            self._exception_middleware.append(self.adapt_method_mode(False, mw_instance.process_exception))
        handler = convert_exception_to_response(mw_instance)
        handler_is_async = middleware_is_async
    handler = self.adapt_method_mode(is_async, handler, handler_is_async)
    self._middleware_chain = handler","[{""var"": ""middleware_is_async"", ""rename"": ""middleware_operation_mode_is_async""}, {""var"": ""handler"", ""rename"": ""middleware_chain_handler""}, {""var"": ""handler_is_async"", ""rename"": ""current_handler_async_state""}, {""var"": ""middleware_path"", ""rename"": ""middleware_import_path""}, {""var"": ""middleware"", ""rename"": ""configured_middleware_instance""}, {""var"": ""middleware_can_sync"", ""rename"": ""middleware_is_sync_capable""}, {""var"": ""mw_instance"", ""rename"": ""middleware_instance""}, {""var"": ""middleware_can_async"", ""rename"": ""middleware_supports_async""}, {""var"": ""get_response"", ""rename"": ""response_handler""}]"
