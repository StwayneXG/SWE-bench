file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sympy/matrices/matrices.py,_eval_det_bareiss,compute_symbolic_determinant_bareiss,165,216,"def _eval_det_bareiss(self):
    """"""Compute matrix determinant using Bareiss' fraction-free
        algorithm which is an extension of the well known Gaussian
        elimination method. This approach is best suited for dense
        symbolic matrices and will result in a determinant with
        minimal number of fractions. It means that less term
        rewriting is needed on resulting formulae.

        TODO: Implement algorithm for sparse matrices (SFF),
        http://www.eecis.udel.edu/~saunders/papers/sffge/it5.ps.
        """"""

    def _find_pivot(l):
        for pos, val in enumerate(l):
            if val:
                return (pos, val, None, None)
        return (None, None, None, None)

    def bareiss(mat, cumm=1):
        if mat.rows == 0:
            return S.One
        elif mat.rows == 1:
            return mat[0, 0]
        pivot_pos, pivot_val, _, _ = _find_pivot(mat[:, 0])
        if pivot_pos == None:
            return S.Zero
        sign = (-1) ** (pivot_pos % 2)
        rows = list((i for i in range(mat.rows) if i != pivot_pos))
        cols = list(range(mat.cols))
        tmp_mat = mat.extract(rows, cols)

        def entry(i, j):
            ret = (pivot_val * tmp_mat[i, j + 1] - mat[pivot_pos, j + 1] * tmp_mat[i, 0]) / cumm
            if not ret.is_Atom:
                cancel(ret)
            return ret
        return sign * bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)
    return cancel(bareiss(self))","def compute_symbolic_determinant_bareiss(self):
    """"""Compute matrix determinant using Bareiss' fraction-free
        algorithm which is an extension of the well known Gaussian
        elimination method. This approach is best suited for dense
        symbolic matrices and will result in a determinant with
        minimal number of fractions. It means that less term
        rewriting is needed on resulting formulae.

        TODO: Implement algorithm for sparse matrices (SFF),
        http://www.eecis.udel.edu/~saunders/papers/sffge/it5.ps.
        """"""

    def _find_pivot(l):
        for pos, val in enumerate(l):
            if val:
                return (pos, val, None, None)
        return (None, None, None, None)

    def bareiss(mat, cumm=1):
        if mat.rows == 0:
            return S.One
        elif mat.rows == 1:
            return mat[0, 0]
        pivot_pos, pivot_val, _, _ = _find_pivot(mat[:, 0])
        if pivot_pos == None:
            return S.Zero
        sign = (-1) ** (pivot_pos % 2)
        rows = list((i for i in range(mat.rows) if i != pivot_pos))
        cols = list(range(mat.cols))
        tmp_mat = mat.extract(rows, cols)

        def entry(i, j):
            ret = (pivot_val * tmp_mat[i, j + 1] - mat[pivot_pos, j + 1] * tmp_mat[i, 0]) / cumm
            if not ret.is_Atom:
                cancel(ret)
            return ret
        return sign * bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)
    return cancel(bareiss(self))","[{""var"": ""pos"", ""rename"": ""pivot_index""}, {""var"": ""val"", ""rename"": ""pivot_value""}, {""var"": ""tmp_mat"", ""rename"": ""submatrix_reduction""}, {""var"": ""i"", ""rename"": ""current_row_index""}, {""var"": ""ret"", ""rename"": ""fraction_free_entry""}, {""var"": ""_"", ""rename"": ""determinant_bareiss_method""}, {""var"": ""cols"", ""rename"": ""column_indices""}, {""var"": ""pivot_pos"", ""rename"": ""pivot_index""}, {""var"": ""rows"", ""rename"": ""reduced_row_indices""}, {""var"": ""sign"", ""rename"": ""determinant_sign""}, {""var"": ""pivot_val"", ""rename"": ""pivot_element_value""}]"
./sympy/matrices/matrices.py,bareiss,bareiss_determinant_recursive,187,214,"def bareiss(mat, cumm=1):
    if mat.rows == 0:
        return S.One
    elif mat.rows == 1:
        return mat[0, 0]
    pivot_pos, pivot_val, _, _ = _find_pivot(mat[:, 0])
    if pivot_pos == None:
        return S.Zero
    sign = (-1) ** (pivot_pos % 2)
    rows = list((i for i in range(mat.rows) if i != pivot_pos))
    cols = list(range(mat.cols))
    tmp_mat = mat.extract(rows, cols)

    def entry(i, j):
        ret = (pivot_val * tmp_mat[i, j + 1] - mat[pivot_pos, j + 1] * tmp_mat[i, 0]) / cumm
        if not ret.is_Atom:
            cancel(ret)
        return ret
    return sign * bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)","def bareiss_determinant_recursive(mat, cumm=1):
    if mat.rows == 0:
        return S.One
    elif mat.rows == 1:
        return mat[0, 0]
    pivot_pos, pivot_val, _, _ = _find_pivot(mat[:, 0])
    if pivot_pos == None:
        return S.Zero
    sign = (-1) ** (pivot_pos % 2)
    rows = list((i for i in range(mat.rows) if i != pivot_pos))
    cols = list(range(mat.cols))
    tmp_mat = mat.extract(rows, cols)

    def entry(i, j):
        ret = (pivot_val * tmp_mat[i, j + 1] - mat[pivot_pos, j + 1] * tmp_mat[i, 0]) / cumm
        if not ret.is_Atom:
            cancel(ret)
        return ret
    return sign * bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)","[{""var"": ""tmp_mat"", ""rename"": ""reduced_minor_matrix""}, {""var"": ""i"", ""rename"": ""current_row_index""}, {""var"": ""ret"", ""rename"": ""computed_entry""}, {""var"": ""_"", ""rename"": ""column_pivot_index""}, {""var"": ""cols"", ""rename"": ""column_indices""}, {""var"": ""pivot_pos"", ""rename"": ""pivot_row_index""}, {""var"": ""rows"", ""rename"": ""non_pivot_row_indices""}, {""var"": ""sign"", ""rename"": ""permutation_sign""}, {""var"": ""pivot_val"", ""rename"": ""pivot_element_value""}]"
./sympy/utilities/randtest.py,random_complex_number,generate_bounded_complex_number,16,26,"def random_complex_number(a=2, b=-1, c=3, d=1, rational=False):
    """"""
    Return a random complex number.

    To reduce chance of hitting branch cuts or anything, we guarantee
    b <= Im z <= d, a <= Re z <= c
    """"""
    A, B = (uniform(a, c), uniform(b, d))
    if not rational:
        return A + I * B
    return nsimplify(A, rational=True) + I * nsimplify(B, rational=True)","def generate_bounded_complex_number(a=2, b=-1, c=3, d=1, rational=False):
    """"""
    Return a random complex number.

    To reduce chance of hitting branch cuts or anything, we guarantee
    b <= Im z <= d, a <= Re z <= c
    """"""
    A, B = (uniform(a, c), uniform(b, d))
    if not rational:
        return A + I * B
    return nsimplify(A, rational=True) + I * nsimplify(B, rational=True)","[{""var"": ""B"", ""rename"": ""imaginary_component""}, {""var"": ""A"", ""rename"": ""real_part_range_start""}]"
./sympy/utilities/randtest.py,verify_numerically,numerical_equality_verification,29,52,"def verify_numerically(f, g, z=None, tol=1e-06, a=2, b=-1, c=3, d=1):
    """"""
    Test numerically that f and g agree when evaluated in the argument z.

    If z is None, all symbols will be tested. This routine does not test
    whether there are Floats present with precision higher than 15 digits
    so if there are, your results may not be what you expect due to round-
    off errors.

    Examples
    ========

    >>> from sympy import sin, cos
    >>> from sympy.abc import x
    >>> from sympy.utilities.randtest import verify_numerically as tn
    >>> tn(sin(x)**2 + cos(x)**2, 1, x)
    True
    """"""
    f, g, z = Tuple(f, g, z)
    z = [z] if isinstance(z, Symbol) else f.free_symbols | g.free_symbols
    reps = list(zip(z, [random_complex_number(a, b, c, d) for zi in z]))
    z1 = f.subs(reps).n()
    z2 = g.subs(reps).n()
    return comp(z1, z2, tol)","def numerical_equality_verification(f, g, z=None, tol=1e-06, a=2, b=-1, c=3, d=1):
    """"""
    Test numerically that f and g agree when evaluated in the argument z.

    If z is None, all symbols will be tested. This routine does not test
    whether there are Floats present with precision higher than 15 digits
    so if there are, your results may not be what you expect due to round-
    off errors.

    Examples
    ========

    >>> from sympy import sin, cos
    >>> from sympy.abc import x
    >>> from sympy.utilities.randtest import verify_numerically as tn
    >>> tn(sin(x)**2 + cos(x)**2, 1, x)
    True
    """"""
    f, g, z = Tuple(f, g, z)
    z = [z] if isinstance(z, Symbol) else f.free_symbols | g.free_symbols
    reps = list(zip(z, [random_complex_number(a, b, c, d) for zi in z]))
    z1 = f.subs(reps).n()
    z2 = g.subs(reps).n()
    return comp(z1, z2, tol)","[{""var"": ""z1"", ""rename"": ""evaluated_f_value""}, {""var"": ""reps"", ""rename"": ""symbol_value_pairs""}, {""var"": ""zi"", ""rename"": ""random_complex_instances""}, {""var"": ""z2"", ""rename"": ""evaluated_expression_g""}]"
