file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/core/management/commands/makemigrations.py,handle,manage_migrations,65,195,"def handle(self, *app_labels, **options):
    self.verbosity = options['verbosity']
    self.interactive = options['interactive']
    self.dry_run = options['dry_run']
    self.merge = options['merge']
    self.empty = options['empty']
    self.migration_name = options['name']
    self.exit_code = options['exit_code']
    check_changes = options['check_changes']
    if self.exit_code:
        warnings.warn('The --exit option is deprecated in favor of the --check option.', RemovedInDjango20Warning)
    app_labels = set(app_labels)
    bad_app_labels = set()
    for app_label in app_labels:
        try:
            apps.get_app_config(app_label)
        except LookupError:
            bad_app_labels.add(app_label)
    if bad_app_labels:
        for app_label in bad_app_labels:
            self.stderr.write(""App '%s' could not be found. Is it in INSTALLED_APPS?"" % app_label)
        sys.exit(2)
    loader = MigrationLoader(None, ignore_no_migrations=True)
    consistency_check_labels = set((config.label for config in apps.get_app_configs()))
    aliases_to_check = connections if settings.DATABASE_ROUTERS else [DEFAULT_DB_ALIAS]
    for alias in sorted(aliases_to_check):
        connection = connections[alias]
        if connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any((router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name) for app_label in consistency_check_labels for model in apps.get_models(app_label))):
            loader.check_consistent_history(connection)
    conflicts = loader.detect_conflicts()
    if app_labels:
        conflicts = {app_label: conflict for app_label, conflict in iteritems(conflicts) if app_label in app_labels}
    if conflicts and (not self.merge):
        name_str = '; '.join(('%s in %s' % (', '.join(names), app) for app, names in conflicts.items()))
        raise CommandError(""Conflicting migrations detected; multiple leaf nodes in the migration graph: (%s).\nTo fix them run 'python manage.py makemigrations --merge'"" % name_str)
    if self.merge and (not conflicts):
        self.stdout.write('No conflicts detected to merge.')
        return
    if self.merge and conflicts:
        return self.handle_merge(loader, conflicts)
    if self.interactive:
        questioner = InteractiveMigrationQuestioner(specified_apps=app_labels, dry_run=self.dry_run)
    else:
        questioner = NonInteractiveMigrationQuestioner(specified_apps=app_labels, dry_run=self.dry_run)
    autodetector = MigrationAutodetector(loader.project_state(), ProjectState.from_apps(apps), questioner)
    if self.empty:
        if not app_labels:
            raise CommandError('You must supply at least one app label when using --empty.')
        changes = {app: [Migration('custom', app)] for app in app_labels}
        changes = autodetector.arrange_for_graph(changes=changes, graph=loader.graph, migration_name=self.migration_name)
        self.write_migration_files(changes)
        return
    changes = autodetector.changes(graph=loader.graph, trim_to_apps=app_labels or None, convert_apps=app_labels or None, migration_name=self.migration_name)
    if not changes:
        if self.verbosity >= 1:
            if len(app_labels) == 1:
                self.stdout.write(""No changes detected in app '%s'"" % app_labels.pop())
            elif len(app_labels) > 1:
                self.stdout.write(""No changes detected in apps '%s'"" % ""', '"".join(app_labels))
            else:
                self.stdout.write('No changes detected')
        if self.exit_code:
            sys.exit(1)
    else:
        self.write_migration_files(changes)
        if check_changes:
            sys.exit(1)","def manage_migrations(self, *app_labels, **options):
    self.verbosity = options['verbosity']
    self.interactive = options['interactive']
    self.dry_run = options['dry_run']
    self.merge = options['merge']
    self.empty = options['empty']
    self.migration_name = options['name']
    self.exit_code = options['exit_code']
    check_changes = options['check_changes']
    if self.exit_code:
        warnings.warn('The --exit option is deprecated in favor of the --check option.', RemovedInDjango20Warning)
    app_labels = set(app_labels)
    bad_app_labels = set()
    for app_label in app_labels:
        try:
            apps.get_app_config(app_label)
        except LookupError:
            bad_app_labels.add(app_label)
    if bad_app_labels:
        for app_label in bad_app_labels:
            self.stderr.write(""App '%s' could not be found. Is it in INSTALLED_APPS?"" % app_label)
        sys.exit(2)
    loader = MigrationLoader(None, ignore_no_migrations=True)
    consistency_check_labels = set((config.label for config in apps.get_app_configs()))
    aliases_to_check = connections if settings.DATABASE_ROUTERS else [DEFAULT_DB_ALIAS]
    for alias in sorted(aliases_to_check):
        connection = connections[alias]
        if connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any((router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name) for app_label in consistency_check_labels for model in apps.get_models(app_label))):
            loader.check_consistent_history(connection)
    conflicts = loader.detect_conflicts()
    if app_labels:
        conflicts = {app_label: conflict for app_label, conflict in iteritems(conflicts) if app_label in app_labels}
    if conflicts and (not self.merge):
        name_str = '; '.join(('%s in %s' % (', '.join(names), app) for app, names in conflicts.items()))
        raise CommandError(""Conflicting migrations detected; multiple leaf nodes in the migration graph: (%s).\nTo fix them run 'python manage.py makemigrations --merge'"" % name_str)
    if self.merge and (not conflicts):
        self.stdout.write('No conflicts detected to merge.')
        return
    if self.merge and conflicts:
        return self.handle_merge(loader, conflicts)
    if self.interactive:
        questioner = InteractiveMigrationQuestioner(specified_apps=app_labels, dry_run=self.dry_run)
    else:
        questioner = NonInteractiveMigrationQuestioner(specified_apps=app_labels, dry_run=self.dry_run)
    autodetector = MigrationAutodetector(loader.project_state(), ProjectState.from_apps(apps), questioner)
    if self.empty:
        if not app_labels:
            raise CommandError('You must supply at least one app label when using --empty.')
        changes = {app: [Migration('custom', app)] for app in app_labels}
        changes = autodetector.arrange_for_graph(changes=changes, graph=loader.graph, migration_name=self.migration_name)
        self.write_migration_files(changes)
        return
    changes = autodetector.changes(graph=loader.graph, trim_to_apps=app_labels or None, convert_apps=app_labels or None, migration_name=self.migration_name)
    if not changes:
        if self.verbosity >= 1:
            if len(app_labels) == 1:
                self.stdout.write(""No changes detected in app '%s'"" % app_labels.pop())
            elif len(app_labels) > 1:
                self.stdout.write(""No changes detected in apps '%s'"" % ""', '"".join(app_labels))
            else:
                self.stdout.write('No changes detected')
        if self.exit_code:
            sys.exit(1)
    else:
        self.write_migration_files(changes)
        if check_changes:
            sys.exit(1)","[{""var"": ""alias"", ""rename"": ""database_aliases""}, {""var"": ""consistency_check_labels"", ""rename"": ""app_label_consistency_set""}, {""var"": ""config"", ""rename"": ""app_configurations""}, {""var"": ""connection"", ""rename"": ""database_connection""}, {""var"": ""conflict"", ""rename"": ""migration_conflicts""}, {""var"": ""changes"", ""rename"": ""migration_changes""}, {""var"": ""name_str"", ""rename"": ""conflicting_migrations_list""}, {""var"": ""aliases_to_check"", ""rename"": ""database_aliases_for_consistency_check""}, {""var"": ""model"", ""rename"": ""migration_model""}, {""var"": ""loader"", ""rename"": ""migration_loader""}, {""var"": ""conflicts"", ""rename"": ""migration_conflict_map""}, {""var"": ""autodetector"", ""rename"": ""migration_change_autodetector""}, {""var"": ""app"", ""rename"": ""application_labels""}, {""var"": ""check_changes"", ""rename"": ""flag_check_migration_changes""}, {""var"": ""names"", ""rename"": ""conflicting_migration_names""}, {""var"": ""bad_app_labels"", ""rename"": ""invalid_app_labels""}, {""var"": ""app_label"", ""rename"": ""application_labels""}, {""var"": ""questioner"", ""rename"": ""migration_questioner""}]"
