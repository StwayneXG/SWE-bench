file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sympy/utilities/lambdify.py,_recursive_to_string,format_sympy_expressions_to_string,948,968,"def _recursive_to_string(doprint, arg):
    """"""Functions in lambdify accept both SymPy types and non-SymPy types such as python
    lists and tuples. This method ensures that we only call the doprint method of the
    printer with SymPy types (so that the printer safely can use SymPy-methods).""""""
    from sympy.matrices.common import MatrixOperations
    from sympy.core.basic import Basic
    if isinstance(arg, (Basic, MatrixOperations)):
        return doprint(arg)
    elif iterable(arg):
        if isinstance(arg, list):
            left, right = '[]'
        elif isinstance(arg, tuple):
            left, right = '()'
        else:
            raise NotImplementedError('unhandled type: %s, %s' % (type(arg), arg))
        return left + ', '.join((_recursive_to_string(doprint, e) for e in arg)) + right
    elif isinstance(arg, str):
        return arg
    else:
        return doprint(arg)","def format_sympy_expressions_to_string(doprint, arg):
    """"""Functions in lambdify accept both SymPy types and non-SymPy types such as python
    lists and tuples. This method ensures that we only call the doprint method of the
    printer with SymPy types (so that the printer safely can use SymPy-methods).""""""
    from sympy.matrices.common import MatrixOperations
    from sympy.core.basic import Basic
    if isinstance(arg, (Basic, MatrixOperations)):
        return doprint(arg)
    elif iterable(arg):
        if isinstance(arg, list):
            left, right = '[]'
        elif isinstance(arg, tuple):
            left, right = '()'
        else:
            raise NotImplementedError('unhandled type: %s, %s' % (type(arg), arg))
        return left + ', '.join((_recursive_to_string(doprint, e) for e in arg)) + right
    elif isinstance(arg, str):
        return arg
    else:
        return doprint(arg)","[{""var"": ""right"", ""rename"": ""enclosing_character_right""}, {""var"": ""left"", ""rename"": ""opening_delimiter""}, {""var"": ""e"", ""rename"": ""element""}]"
