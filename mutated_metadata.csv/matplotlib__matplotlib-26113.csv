file,method_name,new_method_name,start_line,end_line,original_code,code,var
./lib/matplotlib/axes/_axes.py,hexbin,hexagonal_binning_plot,4775,5162,"@_preprocess_data(replace_names=['x', 'y', 'C'], label_namer='y')
@_docstring.dedent_interpd
def hexbin(self, x, y, C=None, gridsize=100, bins=None, xscale='linear', yscale='linear', extent=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, edgecolors='face', reduce_C_function=np.mean, mincnt=None, marginals=False, **kwargs):
    """"""
        Make a 2D hexagonal binning plot of points *x*, *y*.

        If *C* is *None*, the value of the hexagon is determined by the number
        of points in the hexagon. Otherwise, *C* specifies values at the
        coordinate (x[i], y[i]). For each hexagon, these values are reduced
        using *reduce_C_function*.

        Parameters
        ----------
        x, y : array-like
            The data positions. *x* and *y* must be of the same length.

        C : array-like, optional
            If given, these values are accumulated in the bins. Otherwise,
            every point has a value of 1. Must be of the same length as *x*
            and *y*.

        gridsize : int or (int, int), default: 100
            If a single int, the number of hexagons in the *x*-direction.
            The number of hexagons in the *y*-direction is chosen such that
            the hexagons are approximately regular.

            Alternatively, if a tuple (*nx*, *ny*), the number of hexagons
            in the *x*-direction and the *y*-direction. In the
            *y*-direction, counting is done along vertically aligned
            hexagons, not along the zig-zag chains of hexagons; see the
            following illustration.

            .. plot::

               import numpy
               import matplotlib.pyplot as plt

               np.random.seed(19680801)
               n= 300
               x = np.random.standard_normal(n)
               y = np.random.standard_normal(n)

               fig, ax = plt.subplots(figsize=(4, 4))
               h = ax.hexbin(x, y, gridsize=(5, 3))
               hx, hy = h.get_offsets().T
               ax.plot(hx[24::3], hy[24::3], 'ro-')
               ax.plot(hx[-3:], hy[-3:], 'ro-')
               ax.set_title('gridsize=(5, 3)')
               ax.axis('off')

            To get approximately regular hexagons, choose
            :math:`n_x = \\sqrt{3}\\,n_y`.

        bins : 'log' or int or sequence, default: None
            Discretization of the hexagon values.

            - If *None*, no binning is applied; the color of each hexagon
              directly corresponds to its count value.
            - If 'log', use a logarithmic scale for the colormap.
              Internally, :math:`log_{10}(i+1)` is used to determine the
              hexagon color. This is equivalent to ``norm=LogNorm()``.
            - If an integer, divide the counts in the specified number
              of bins, and color the hexagons accordingly.
            - If a sequence of values, the values of the lower bound of
              the bins to be used.

        xscale : {'linear', 'log'}, default: 'linear'
            Use a linear or log10 scale on the horizontal axis.

        yscale : {'linear', 'log'}, default: 'linear'
            Use a linear or log10 scale on the vertical axis.

        mincnt : int > 0, default: *None*
            If not *None*, only display cells with more than *mincnt*
            number of points in the cell.

        marginals : bool, default: *False*
            If marginals is *True*, plot the marginal density as
            colormapped rectangles along the bottom of the x-axis and
            left of the y-axis.

        extent : 4-tuple of float, default: *None*
            The limits of the bins (xmin, xmax, ymin, ymax).
            The default assigns the limits based on
            *gridsize*, *x*, *y*, *xscale* and *yscale*.

            If *xscale* or *yscale* is set to 'log', the limits are
            expected to be the exponent for a power of 10. E.g. for
            x-limits of 1 and 50 in 'linear' scale and y-limits
            of 10 and 1000 in 'log' scale, enter (1, 50, 1, 3).

        Returns
        -------
        `~matplotlib.collections.PolyCollection`
            A `.PolyCollection` defining the hexagonal bins.

            - `.PolyCollection.get_offsets` contains a Mx2 array containing
              the x, y positions of the M hexagon centers.
            - `.PolyCollection.get_array` contains the values of the M
              hexagons.

            If *marginals* is *True*, horizontal
            bar and vertical bar (both PolyCollections) will be attached
            to the return collection as attributes *hbar* and *vbar*.

        Other Parameters
        ----------------
        %(cmap_doc)s

        %(norm_doc)s

        %(vmin_vmax_doc)s

        alpha : float between 0 and 1, optional
            The alpha blending value, between 0 (transparent) and 1 (opaque).

        linewidths : float, default: *None*
            If *None*, defaults to :rc:`patch.linewidth`.

        edgecolors : {'face', 'none', *None*} or color, default: 'face'
            The color of the hexagon edges. Possible values are:

            - 'face': Draw the edges in the same color as the fill color.
            - 'none': No edges are drawn. This can sometimes lead to unsightly
              unpainted pixels between the hexagons.
            - *None*: Draw outlines in the default color.
            - An explicit color.

        reduce_C_function : callable, default: `numpy.mean`
            The function to aggregate *C* within the bins. It is ignored if
            *C* is not given. This must have the signature::

                def reduce_C_function(C: array) -> float

            Commonly used functions are:

            - `numpy.mean`: average of the points
            - `numpy.sum`: integral of the point values
            - `numpy.amax`: value taken from the largest point

        data : indexable object, optional
            DATA_PARAMETER_PLACEHOLDER

        **kwargs : `~matplotlib.collections.PolyCollection` properties
            All other keyword arguments are passed on to `.PolyCollection`:

            %(PolyCollection:kwdoc)s

        See Also
        --------
        hist2d : 2D histogram rectangular bins
        """"""
    self._process_unit_info([('x', x), ('y', y)], kwargs, convert=False)
    x, y, C = cbook.delete_masked_points(x, y, C)
    if np.iterable(gridsize):
        nx, ny = gridsize
    else:
        nx = gridsize
        ny = int(nx / math.sqrt(3))
    x = np.asarray(x, float)
    y = np.asarray(y, float)
    tx = x
    ty = y
    if xscale == 'log':
        if np.any(x <= 0.0):
            raise ValueError('x contains non-positive values, so cannot be log-scaled')
        tx = np.log10(tx)
    if yscale == 'log':
        if np.any(y <= 0.0):
            raise ValueError('y contains non-positive values, so cannot be log-scaled')
        ty = np.log10(ty)
    if extent is not None:
        xmin, xmax, ymin, ymax = extent
    else:
        xmin, xmax = (tx.min(), tx.max()) if len(x) else (0, 1)
        ymin, ymax = (ty.min(), ty.max()) if len(y) else (0, 1)
        xmin, xmax = mtransforms.nonsingular(xmin, xmax, expander=0.1)
        ymin, ymax = mtransforms.nonsingular(ymin, ymax, expander=0.1)
    nx1 = nx + 1
    ny1 = ny + 1
    nx2 = nx
    ny2 = ny
    n = nx1 * ny1 + nx2 * ny2
    padding = 1e-09 * (xmax - xmin)
    xmin -= padding
    xmax += padding
    sx = (xmax - xmin) / nx
    sy = (ymax - ymin) / ny
    ix = (tx - xmin) / sx
    iy = (ty - ymin) / sy
    ix1 = np.round(ix).astype(int)
    iy1 = np.round(iy).astype(int)
    ix2 = np.floor(ix).astype(int)
    iy2 = np.floor(iy).astype(int)
    i1 = np.where((0 <= ix1) & (ix1 < nx1) & (0 <= iy1) & (iy1 < ny1), ix1 * ny1 + iy1 + 1, 0)
    i2 = np.where((0 <= ix2) & (ix2 < nx2) & (0 <= iy2) & (iy2 < ny2), ix2 * ny2 + iy2 + 1, 0)
    d1 = (ix - ix1) ** 2 + 3.0 * (iy - iy1) ** 2
    d2 = (ix - ix2 - 0.5) ** 2 + 3.0 * (iy - iy2 - 0.5) ** 2
    bdist = d1 < d2
    if C is None:
        counts1 = np.bincount(i1[bdist], minlength=1 + nx1 * ny1)[1:]
        counts2 = np.bincount(i2[~bdist], minlength=1 + nx2 * ny2)[1:]
        accum = np.concatenate([counts1, counts2]).astype(float)
        if mincnt is not None:
            accum[accum < mincnt] = np.nan
        C = np.ones(len(x))
    else:
        Cs_at_i1 = [[] for _ in range(1 + nx1 * ny1)]
        Cs_at_i2 = [[] for _ in range(1 + nx2 * ny2)]
        for i in range(len(x)):
            if bdist[i]:
                Cs_at_i1[i1[i]].append(C[i])
            else:
                Cs_at_i2[i2[i]].append(C[i])
        if mincnt is None:
            mincnt = 0
        accum = np.array([reduce_C_function(acc) if len(acc) > mincnt else np.nan for Cs_at_i in [Cs_at_i1, Cs_at_i2] for acc in Cs_at_i[1:]], float)
    good_idxs = ~np.isnan(accum)
    offsets = np.zeros((n, 2), float)
    offsets[:nx1 * ny1, 0] = np.repeat(np.arange(nx1), ny1)
    offsets[:nx1 * ny1, 1] = np.tile(np.arange(ny1), nx1)
    offsets[nx1 * ny1:, 0] = np.repeat(np.arange(nx2) + 0.5, ny2)
    offsets[nx1 * ny1:, 1] = np.tile(np.arange(ny2), nx2) + 0.5
    offsets[:, 0] *= sx
    offsets[:, 1] *= sy
    offsets[:, 0] += xmin
    offsets[:, 1] += ymin
    offsets = offsets[good_idxs, :]
    accum = accum[good_idxs]
    polygon = [sx, sy / 3] * np.array([[0.5, -0.5], [0.5, 0.5], [0.0, 1.0], [-0.5, 0.5], [-0.5, -0.5], [0.0, -1.0]])
    if linewidths is None:
        linewidths = [mpl.rcParams['patch.linewidth']]
    if xscale == 'log' or yscale == 'log':
        polygons = np.expand_dims(polygon, 0) + np.expand_dims(offsets, 1)
        if xscale == 'log':
            polygons[:, :, 0] = 10.0 ** polygons[:, :, 0]
            xmin = 10.0 ** xmin
            xmax = 10.0 ** xmax
            self.set_xscale(xscale)
        if yscale == 'log':
            polygons[:, :, 1] = 10.0 ** polygons[:, :, 1]
            ymin = 10.0 ** ymin
            ymax = 10.0 ** ymax
            self.set_yscale(yscale)
        collection = mcoll.PolyCollection(polygons, edgecolors=edgecolors, linewidths=linewidths)
    else:
        collection = mcoll.PolyCollection([polygon], edgecolors=edgecolors, linewidths=linewidths, offsets=offsets, offset_transform=mtransforms.AffineDeltaTransform(self.transData))
    if bins == 'log':
        if norm is not None:
            _api.warn_external(f""Only one of 'bins' and 'norm' arguments can be supplied, ignoring bins={bins}"")
        else:
            norm = mcolors.LogNorm(vmin=vmin, vmax=vmax)
            vmin = vmax = None
        bins = None
    if norm is not None:
        if norm.vmin is None and norm.vmax is None:
            norm.autoscale(accum)
    if bins is not None:
        if not np.iterable(bins):
            minimum, maximum = (min(accum), max(accum))
            bins -= 1
            bins = minimum + (maximum - minimum) * np.arange(bins) / bins
        bins = np.sort(bins)
        accum = bins.searchsorted(accum)
    collection.set_array(accum)
    collection.set_cmap(cmap)
    collection.set_norm(norm)
    collection.set_alpha(alpha)
    collection._internal_update(kwargs)
    collection._scale_norm(norm, vmin, vmax)
    corners = ((xmin, ymin), (xmax, ymax))
    self.update_datalim(corners)
    self._request_autoscale_view(tight=True)
    self.add_collection(collection, autolim=False)
    if not marginals:
        return collection
    bars = []
    for zname, z, zmin, zmax, zscale, nbins in [('x', x, xmin, xmax, xscale, nx), ('y', y, ymin, ymax, yscale, 2 * ny)]:
        if zscale == 'log':
            bin_edges = np.geomspace(zmin, zmax, nbins + 1)
        else:
            bin_edges = np.linspace(zmin, zmax, nbins + 1)
        verts = np.empty((nbins, 4, 2))
        verts[:, 0, 0] = verts[:, 1, 0] = bin_edges[:-1]
        verts[:, 2, 0] = verts[:, 3, 0] = bin_edges[1:]
        verts[:, 0, 1] = verts[:, 3, 1] = 0.0
        verts[:, 1, 1] = verts[:, 2, 1] = 0.05
        if zname == 'y':
            verts = verts[:, :, ::-1]
        bin_idxs = np.searchsorted(bin_edges, z) - 1
        values = np.empty(nbins)
        for i in range(nbins):
            ci = C[bin_idxs == i]
            values[i] = reduce_C_function(ci) if len(ci) > 0 else np.nan
        mask = ~np.isnan(values)
        verts = verts[mask]
        values = values[mask]
        trans = getattr(self, f'get_{zname}axis_transform')(which='grid')
        bar = mcoll.PolyCollection(verts, transform=trans, edgecolors='face')
        bar.set_array(values)
        bar.set_cmap(cmap)
        bar.set_norm(norm)
        bar.set_alpha(alpha)
        bar._internal_update(kwargs)
        bars.append(self.add_collection(bar, autolim=False))
    collection.hbar, collection.vbar = bars

    def on_changed(collection):
        collection.hbar.set_cmap(collection.get_cmap())
        collection.hbar.set_cmap(collection.get_cmap())
        collection.vbar.set_clim(collection.get_clim())
        collection.vbar.set_clim(collection.get_clim())
    collection.callbacks.connect('changed', on_changed)
    return collection","@_preprocess_data(replace_names=['x', 'y', 'C'], label_namer='y')
@_docstring.dedent_interpd
def hexagonal_binning_plot(self, x, y, C=None, gridsize=100, bins=None, xscale='linear', yscale='linear', extent=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, edgecolors='face', reduce_C_function=np.mean, mincnt=None, marginals=False, **kwargs):
    """"""
        Make a 2D hexagonal binning plot of points *x*, *y*.

        If *C* is *None*, the value of the hexagon is determined by the number
        of points in the hexagon. Otherwise, *C* specifies values at the
        coordinate (x[i], y[i]). For each hexagon, these values are reduced
        using *reduce_C_function*.

        Parameters
        ----------
        x, y : array-like
            The data positions. *x* and *y* must be of the same length.

        C : array-like, optional
            If given, these values are accumulated in the bins. Otherwise,
            every point has a value of 1. Must be of the same length as *x*
            and *y*.

        gridsize : int or (int, int), default: 100
            If a single int, the number of hexagons in the *x*-direction.
            The number of hexagons in the *y*-direction is chosen such that
            the hexagons are approximately regular.

            Alternatively, if a tuple (*nx*, *ny*), the number of hexagons
            in the *x*-direction and the *y*-direction. In the
            *y*-direction, counting is done along vertically aligned
            hexagons, not along the zig-zag chains of hexagons; see the
            following illustration.

            .. plot::

               import numpy
               import matplotlib.pyplot as plt

               np.random.seed(19680801)
               n= 300
               x = np.random.standard_normal(n)
               y = np.random.standard_normal(n)

               fig, ax = plt.subplots(figsize=(4, 4))
               h = ax.hexbin(x, y, gridsize=(5, 3))
               hx, hy = h.get_offsets().T
               ax.plot(hx[24::3], hy[24::3], 'ro-')
               ax.plot(hx[-3:], hy[-3:], 'ro-')
               ax.set_title('gridsize=(5, 3)')
               ax.axis('off')

            To get approximately regular hexagons, choose
            :math:`n_x = \\sqrt{3}\\,n_y`.

        bins : 'log' or int or sequence, default: None
            Discretization of the hexagon values.

            - If *None*, no binning is applied; the color of each hexagon
              directly corresponds to its count value.
            - If 'log', use a logarithmic scale for the colormap.
              Internally, :math:`log_{10}(i+1)` is used to determine the
              hexagon color. This is equivalent to ``norm=LogNorm()``.
            - If an integer, divide the counts in the specified number
              of bins, and color the hexagons accordingly.
            - If a sequence of values, the values of the lower bound of
              the bins to be used.

        xscale : {'linear', 'log'}, default: 'linear'
            Use a linear or log10 scale on the horizontal axis.

        yscale : {'linear', 'log'}, default: 'linear'
            Use a linear or log10 scale on the vertical axis.

        mincnt : int > 0, default: *None*
            If not *None*, only display cells with more than *mincnt*
            number of points in the cell.

        marginals : bool, default: *False*
            If marginals is *True*, plot the marginal density as
            colormapped rectangles along the bottom of the x-axis and
            left of the y-axis.

        extent : 4-tuple of float, default: *None*
            The limits of the bins (xmin, xmax, ymin, ymax).
            The default assigns the limits based on
            *gridsize*, *x*, *y*, *xscale* and *yscale*.

            If *xscale* or *yscale* is set to 'log', the limits are
            expected to be the exponent for a power of 10. E.g. for
            x-limits of 1 and 50 in 'linear' scale and y-limits
            of 10 and 1000 in 'log' scale, enter (1, 50, 1, 3).

        Returns
        -------
        `~matplotlib.collections.PolyCollection`
            A `.PolyCollection` defining the hexagonal bins.

            - `.PolyCollection.get_offsets` contains a Mx2 array containing
              the x, y positions of the M hexagon centers.
            - `.PolyCollection.get_array` contains the values of the M
              hexagons.

            If *marginals* is *True*, horizontal
            bar and vertical bar (both PolyCollections) will be attached
            to the return collection as attributes *hbar* and *vbar*.

        Other Parameters
        ----------------
        %(cmap_doc)s

        %(norm_doc)s

        %(vmin_vmax_doc)s

        alpha : float between 0 and 1, optional
            The alpha blending value, between 0 (transparent) and 1 (opaque).

        linewidths : float, default: *None*
            If *None*, defaults to :rc:`patch.linewidth`.

        edgecolors : {'face', 'none', *None*} or color, default: 'face'
            The color of the hexagon edges. Possible values are:

            - 'face': Draw the edges in the same color as the fill color.
            - 'none': No edges are drawn. This can sometimes lead to unsightly
              unpainted pixels between the hexagons.
            - *None*: Draw outlines in the default color.
            - An explicit color.

        reduce_C_function : callable, default: `numpy.mean`
            The function to aggregate *C* within the bins. It is ignored if
            *C* is not given. This must have the signature::

                def reduce_C_function(C: array) -> float

            Commonly used functions are:

            - `numpy.mean`: average of the points
            - `numpy.sum`: integral of the point values
            - `numpy.amax`: value taken from the largest point

        data : indexable object, optional
            DATA_PARAMETER_PLACEHOLDER

        **kwargs : `~matplotlib.collections.PolyCollection` properties
            All other keyword arguments are passed on to `.PolyCollection`:

            %(PolyCollection:kwdoc)s

        See Also
        --------
        hist2d : 2D histogram rectangular bins
        """"""
    self._process_unit_info([('x', x), ('y', y)], kwargs, convert=False)
    x, y, C = cbook.delete_masked_points(x, y, C)
    if np.iterable(gridsize):
        nx, ny = gridsize
    else:
        nx = gridsize
        ny = int(nx / math.sqrt(3))
    x = np.asarray(x, float)
    y = np.asarray(y, float)
    tx = x
    ty = y
    if xscale == 'log':
        if np.any(x <= 0.0):
            raise ValueError('x contains non-positive values, so cannot be log-scaled')
        tx = np.log10(tx)
    if yscale == 'log':
        if np.any(y <= 0.0):
            raise ValueError('y contains non-positive values, so cannot be log-scaled')
        ty = np.log10(ty)
    if extent is not None:
        xmin, xmax, ymin, ymax = extent
    else:
        xmin, xmax = (tx.min(), tx.max()) if len(x) else (0, 1)
        ymin, ymax = (ty.min(), ty.max()) if len(y) else (0, 1)
        xmin, xmax = mtransforms.nonsingular(xmin, xmax, expander=0.1)
        ymin, ymax = mtransforms.nonsingular(ymin, ymax, expander=0.1)
    nx1 = nx + 1
    ny1 = ny + 1
    nx2 = nx
    ny2 = ny
    n = nx1 * ny1 + nx2 * ny2
    padding = 1e-09 * (xmax - xmin)
    xmin -= padding
    xmax += padding
    sx = (xmax - xmin) / nx
    sy = (ymax - ymin) / ny
    ix = (tx - xmin) / sx
    iy = (ty - ymin) / sy
    ix1 = np.round(ix).astype(int)
    iy1 = np.round(iy).astype(int)
    ix2 = np.floor(ix).astype(int)
    iy2 = np.floor(iy).astype(int)
    i1 = np.where((0 <= ix1) & (ix1 < nx1) & (0 <= iy1) & (iy1 < ny1), ix1 * ny1 + iy1 + 1, 0)
    i2 = np.where((0 <= ix2) & (ix2 < nx2) & (0 <= iy2) & (iy2 < ny2), ix2 * ny2 + iy2 + 1, 0)
    d1 = (ix - ix1) ** 2 + 3.0 * (iy - iy1) ** 2
    d2 = (ix - ix2 - 0.5) ** 2 + 3.0 * (iy - iy2 - 0.5) ** 2
    bdist = d1 < d2
    if C is None:
        counts1 = np.bincount(i1[bdist], minlength=1 + nx1 * ny1)[1:]
        counts2 = np.bincount(i2[~bdist], minlength=1 + nx2 * ny2)[1:]
        accum = np.concatenate([counts1, counts2]).astype(float)
        if mincnt is not None:
            accum[accum < mincnt] = np.nan
        C = np.ones(len(x))
    else:
        Cs_at_i1 = [[] for _ in range(1 + nx1 * ny1)]
        Cs_at_i2 = [[] for _ in range(1 + nx2 * ny2)]
        for i in range(len(x)):
            if bdist[i]:
                Cs_at_i1[i1[i]].append(C[i])
            else:
                Cs_at_i2[i2[i]].append(C[i])
        if mincnt is None:
            mincnt = 0
        accum = np.array([reduce_C_function(acc) if len(acc) > mincnt else np.nan for Cs_at_i in [Cs_at_i1, Cs_at_i2] for acc in Cs_at_i[1:]], float)
    good_idxs = ~np.isnan(accum)
    offsets = np.zeros((n, 2), float)
    offsets[:nx1 * ny1, 0] = np.repeat(np.arange(nx1), ny1)
    offsets[:nx1 * ny1, 1] = np.tile(np.arange(ny1), nx1)
    offsets[nx1 * ny1:, 0] = np.repeat(np.arange(nx2) + 0.5, ny2)
    offsets[nx1 * ny1:, 1] = np.tile(np.arange(ny2), nx2) + 0.5
    offsets[:, 0] *= sx
    offsets[:, 1] *= sy
    offsets[:, 0] += xmin
    offsets[:, 1] += ymin
    offsets = offsets[good_idxs, :]
    accum = accum[good_idxs]
    polygon = [sx, sy / 3] * np.array([[0.5, -0.5], [0.5, 0.5], [0.0, 1.0], [-0.5, 0.5], [-0.5, -0.5], [0.0, -1.0]])
    if linewidths is None:
        linewidths = [mpl.rcParams['patch.linewidth']]
    if xscale == 'log' or yscale == 'log':
        polygons = np.expand_dims(polygon, 0) + np.expand_dims(offsets, 1)
        if xscale == 'log':
            polygons[:, :, 0] = 10.0 ** polygons[:, :, 0]
            xmin = 10.0 ** xmin
            xmax = 10.0 ** xmax
            self.set_xscale(xscale)
        if yscale == 'log':
            polygons[:, :, 1] = 10.0 ** polygons[:, :, 1]
            ymin = 10.0 ** ymin
            ymax = 10.0 ** ymax
            self.set_yscale(yscale)
        collection = mcoll.PolyCollection(polygons, edgecolors=edgecolors, linewidths=linewidths)
    else:
        collection = mcoll.PolyCollection([polygon], edgecolors=edgecolors, linewidths=linewidths, offsets=offsets, offset_transform=mtransforms.AffineDeltaTransform(self.transData))
    if bins == 'log':
        if norm is not None:
            _api.warn_external(f""Only one of 'bins' and 'norm' arguments can be supplied, ignoring bins={bins}"")
        else:
            norm = mcolors.LogNorm(vmin=vmin, vmax=vmax)
            vmin = vmax = None
        bins = None
    if norm is not None:
        if norm.vmin is None and norm.vmax is None:
            norm.autoscale(accum)
    if bins is not None:
        if not np.iterable(bins):
            minimum, maximum = (min(accum), max(accum))
            bins -= 1
            bins = minimum + (maximum - minimum) * np.arange(bins) / bins
        bins = np.sort(bins)
        accum = bins.searchsorted(accum)
    collection.set_array(accum)
    collection.set_cmap(cmap)
    collection.set_norm(norm)
    collection.set_alpha(alpha)
    collection._internal_update(kwargs)
    collection._scale_norm(norm, vmin, vmax)
    corners = ((xmin, ymin), (xmax, ymax))
    self.update_datalim(corners)
    self._request_autoscale_view(tight=True)
    self.add_collection(collection, autolim=False)
    if not marginals:
        return collection
    bars = []
    for zname, z, zmin, zmax, zscale, nbins in [('x', x, xmin, xmax, xscale, nx), ('y', y, ymin, ymax, yscale, 2 * ny)]:
        if zscale == 'log':
            bin_edges = np.geomspace(zmin, zmax, nbins + 1)
        else:
            bin_edges = np.linspace(zmin, zmax, nbins + 1)
        verts = np.empty((nbins, 4, 2))
        verts[:, 0, 0] = verts[:, 1, 0] = bin_edges[:-1]
        verts[:, 2, 0] = verts[:, 3, 0] = bin_edges[1:]
        verts[:, 0, 1] = verts[:, 3, 1] = 0.0
        verts[:, 1, 1] = verts[:, 2, 1] = 0.05
        if zname == 'y':
            verts = verts[:, :, ::-1]
        bin_idxs = np.searchsorted(bin_edges, z) - 1
        values = np.empty(nbins)
        for i in range(nbins):
            ci = C[bin_idxs == i]
            values[i] = reduce_C_function(ci) if len(ci) > 0 else np.nan
        mask = ~np.isnan(values)
        verts = verts[mask]
        values = values[mask]
        trans = getattr(self, f'get_{zname}axis_transform')(which='grid')
        bar = mcoll.PolyCollection(verts, transform=trans, edgecolors='face')
        bar.set_array(values)
        bar.set_cmap(cmap)
        bar.set_norm(norm)
        bar.set_alpha(alpha)
        bar._internal_update(kwargs)
        bars.append(self.add_collection(bar, autolim=False))
    collection.hbar, collection.vbar = bars

    def on_changed(collection):
        collection.hbar.set_cmap(collection.get_cmap())
        collection.hbar.set_cmap(collection.get_cmap())
        collection.vbar.set_clim(collection.get_clim())
        collection.vbar.set_clim(collection.get_clim())
    collection.callbacks.connect('changed', on_changed)
    return collection","[{""var"": ""sx"", ""rename"": ""hexagon_width""}, {""var"": ""acc"", ""rename"": ""accumulated_values""}, {""var"": ""n"", ""rename"": ""total_hexagons""}, {""var"": ""i"", ""rename"": ""index""}, {""var"": ""bdist"", ""rename"": ""is_closer_to_ix1""}, {""var"": ""nbins"", ""rename"": ""numBinsForMarginals""}, {""var"": ""bin_edges"", ""rename"": ""hexagonal_bin_boundaries""}, {""var"": ""padding"", ""rename"": ""boundaryPadding""}, {""var"": ""tx"", ""rename"": ""transformed_x""}, {""var"": ""ix2"", ""rename"": ""x_floor_index""}, {""var"": ""nx2"", ""rename"": ""x_hexagon_count""}, {""var"": ""ymax"", ""rename"": ""y_maximum_extent""}, {""var"": ""bin_idxs"", ""rename"": ""bin_index_positions""}, {""var"": ""ty"", ""rename"": ""transformed_y""}, {""var"": ""bar"", ""rename"": ""coordinate_and_value_replacer_decorator""}, {""var"": ""i1"", ""rename"": ""primary_hexbin_indices""}, {""var"": ""Cs_at_i2"", ""rename"": ""aggregateValuesAtSecondIndex""}, {""var"": ""iy1"", ""rename"": ""rounded_y_scaled_indices""}, {""var"": ""values"", ""rename"": ""hexagon_values""}, {""var"": ""zscale"", ""rename"": ""zscale_data_handling""}, {""var"": ""ny1"", ""rename"": ""number_of_y_hexagons_plus_one""}, {""var"": ""minimum"", ""rename"": ""threshold_count""}, {""var"": ""d1"", ""rename"": ""distance_to_hex_center_1""}, {""var"": ""counts1"", ""rename"": ""hex_bin_point_counts1""}, {""var"": ""ix1"", ""rename"": ""x_rounded_indices""}, {""var"": ""d2"", ""rename"": ""distance_to_center_offset""}, {""var"": ""good_idxs"", ""rename"": ""valid_accumulation_indexes""}, {""var"": ""iy"", ""rename"": ""normalized_y_indices""}, {""var"": ""ny"", ""rename"": ""num_y_hexagons""}, {""var"": ""sy"", ""rename"": ""y_scale_step""}, {""var"": ""iy2"", ""rename"": ""yIndexFloor""}, {""var"": ""accum"", ""rename"": ""bin_value_aggregator""}, {""var"": ""xmin"", ""rename"": ""x_minimum_bound""}, {""var"": ""bars"", ""rename"": ""marginal_density_bars""}, {""var"": ""verts"", ""rename"": ""hexagon_bin_vertices""}, {""var"": ""mask"", ""rename"": ""valid_data_mask""}, {""var"": ""zname"", ""rename"": ""axis_name""}, {""var"": ""offsets"", ""rename"": ""hexagon_center_positions""}, {""var"": ""zmin"", ""rename"": ""z_min_bound""}, {""var"": ""ix"", ""rename"": ""normalized_x_indices""}, {""var"": ""collection"", ""rename"": ""hex_grid_collection""}, {""var"": ""corners"", ""rename"": ""plot_boundary_corners""}, {""var"": ""trans"", ""rename"": ""transform""}, {""var"": ""ci"", ""rename"": ""marginal_bin_values""}, {""var"": ""Cs_at_i"", ""rename"": ""accumulated_C_values_at_index""}, {""var"": ""Cs_at_i1"", ""rename"": ""values_at_primary_bins""}, {""var"": ""polygons"", ""rename"": ""hexagonalPolygons""}, {""var"": ""polygon"", ""rename"": ""hexagon_vertices""}, {""var"": ""counts2"", ""rename"": ""The context for the variable `counts2` suggests it's used to store the count of points falling into certain hexagonal bins, based on a secondary condition (i.e., `~bdist`). Therefore, an appropriate and meaningful variable name should reflect this""}, {""var"": ""z"", ""rename"": ""coordinate_axis_values""}, {""var"": ""_"", ""rename"": ""preprocessed_data_info""}, {""var"": ""maximum"", ""rename"": ""maximum_bin_value""}, {""var"": ""zmax"", ""rename"": ""vertical_axis_max""}, {""var"": ""nx"", ""rename"": ""num_hexagons_x""}, {""var"": ""xmax"", ""rename"": ""x_max_bound""}, {""var"": ""nx1"", ""rename"": ""num_x_hexagons_plus_one""}, {""var"": ""ny2"", ""rename"": ""num_hexagons_y_direction""}, {""var"": ""i2"", ""rename"": ""primary_hexagon_indices""}, {""var"": ""ymin"", ""rename"": ""y_coordinate_min""}]"
