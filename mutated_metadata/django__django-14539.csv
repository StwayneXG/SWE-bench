file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/utils/html.py,urlize,convert_text_to_clickable_links,236,349,"@keep_lazy_text
def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):
    """"""
    Convert any URLs in text into clickable links.

    Works on http://, https://, www. links, and also on links ending in one of
    the original seven gTLDs (.com, .edu, .gov, .int, .mil, .net, and .org).
    Links can have trailing punctuation (periods, commas, close-parens) and
    leading punctuation (opening parens) and it'll still do the right thing.

    If trim_url_limit is not None, truncate the URLs in the link text longer
    than this limit to trim_url_limit - 1 characters and append an ellipsis.

    If nofollow is True, give the links a rel=""nofollow"" attribute.

    If autoescape is True, autoescape the link text and URLs.
    """"""
    safe_input = isinstance(text, SafeData)

    def trim_url(x, limit=trim_url_limit):
        if limit is None or len(x) <= limit:
            return x
        return '%s…' % x[:max(0, limit - 1)]

    def trim_punctuation(lead, middle, trail):
        """"""
        Trim trailing and wrapping punctuation from `middle`. Return the items
        of the new state.
        """"""
        trimmed_something = True
        while trimmed_something:
            trimmed_something = False
            for opening, closing in WRAPPING_PUNCTUATION:
                if middle.startswith(opening):
                    middle = middle[len(opening):]
                    lead += opening
                    trimmed_something = True
                if middle.endswith(closing) and middle.count(closing) == middle.count(opening) + 1:
                    middle = middle[:-len(closing)]
                    trail = closing + trail
                    trimmed_something = True
            middle_unescaped = html.unescape(middle)
            stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
            if middle_unescaped != stripped:
                trail = middle[len(stripped):] + trail
                middle = middle[:len(stripped) - len(middle_unescaped)]
                trimmed_something = True
        return (lead, middle, trail)

    def is_email_simple(value):
        """"""Return True if value looks like an email address.""""""
        if '@' not in value or value.startswith('@') or value.endswith('@'):
            return False
        try:
            p1, p2 = value.split('@')
        except ValueError:
            return False
        if '.' not in p2 or p2.startswith('.'):
            return False
        return True
    words = word_split_re.split(str(text))
    for i, word in enumerate(words):
        if '.' in word or '@' in word or ':' in word:
            lead, middle, trail = ('', word, '')
            lead, middle, trail = trim_punctuation(lead, middle, trail)
            url = None
            nofollow_attr = ' rel=""nofollow""' if nofollow else ''
            if simple_url_re.match(middle):
                url = smart_urlquote(html.unescape(middle))
            elif simple_url_2_re.match(middle):
                url = smart_urlquote('http://%s' % html.unescape(middle))
            elif ':' not in middle and is_email_simple(middle):
                local, domain = middle.rsplit('@', 1)
                try:
                    domain = punycode(domain)
                except UnicodeError:
                    continue
                url = 'mailto:%s@%s' % (local, domain)
                nofollow_attr = ''
            if url:
                trimmed = trim_url(middle)
                if autoescape and (not safe_input):
                    lead, trail = (escape(lead), escape(trail))
                    trimmed = escape(trimmed)
                middle = '<a href=""%s""%s>%s</a>' % (escape(url), nofollow_attr, trimmed)
                words[i] = mark_safe('%s%s%s' % (lead, middle, trail))
            elif safe_input:
                words[i] = mark_safe(word)
            elif autoescape:
                words[i] = escape(word)
        elif safe_input:
            words[i] = mark_safe(word)
        elif autoescape:
            words[i] = escape(word)
    return ''.join(words)","@keep_lazy_text
def convert_text_to_clickable_links(text, trim_url_limit=None, nofollow=False, autoescape=False):
    """"""
    Convert any URLs in text into clickable links.

    Works on http://, https://, www. links, and also on links ending in one of
    the original seven gTLDs (.com, .edu, .gov, .int, .mil, .net, and .org).
    Links can have trailing punctuation (periods, commas, close-parens) and
    leading punctuation (opening parens) and it'll still do the right thing.

    If trim_url_limit is not None, truncate the URLs in the link text longer
    than this limit to trim_url_limit - 1 characters and append an ellipsis.

    If nofollow is True, give the links a rel=""nofollow"" attribute.

    If autoescape is True, autoescape the link text and URLs.
    """"""
    safe_input = isinstance(text, SafeData)

    def trim_url(x, limit=trim_url_limit):
        if limit is None or len(x) <= limit:
            return x
        return '%s…' % x[:max(0, limit - 1)]

    def trim_punctuation(lead, middle, trail):
        """"""
        Trim trailing and wrapping punctuation from `middle`. Return the items
        of the new state.
        """"""
        trimmed_something = True
        while trimmed_something:
            trimmed_something = False
            for opening, closing in WRAPPING_PUNCTUATION:
                if middle.startswith(opening):
                    middle = middle[len(opening):]
                    lead += opening
                    trimmed_something = True
                if middle.endswith(closing) and middle.count(closing) == middle.count(opening) + 1:
                    middle = middle[:-len(closing)]
                    trail = closing + trail
                    trimmed_something = True
            middle_unescaped = html.unescape(middle)
            stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
            if middle_unescaped != stripped:
                trail = middle[len(stripped):] + trail
                middle = middle[:len(stripped) - len(middle_unescaped)]
                trimmed_something = True
        return (lead, middle, trail)

    def is_email_simple(value):
        """"""Return True if value looks like an email address.""""""
        if '@' not in value or value.startswith('@') or value.endswith('@'):
            return False
        try:
            p1, p2 = value.split('@')
        except ValueError:
            return False
        if '.' not in p2 or p2.startswith('.'):
            return False
        return True
    words = word_split_re.split(str(text))
    for i, word in enumerate(words):
        if '.' in word or '@' in word or ':' in word:
            lead, middle, trail = ('', word, '')
            lead, middle, trail = trim_punctuation(lead, middle, trail)
            url = None
            nofollow_attr = ' rel=""nofollow""' if nofollow else ''
            if simple_url_re.match(middle):
                url = smart_urlquote(html.unescape(middle))
            elif simple_url_2_re.match(middle):
                url = smart_urlquote('http://%s' % html.unescape(middle))
            elif ':' not in middle and is_email_simple(middle):
                local, domain = middle.rsplit('@', 1)
                try:
                    domain = punycode(domain)
                except UnicodeError:
                    continue
                url = 'mailto:%s@%s' % (local, domain)
                nofollow_attr = ''
            if url:
                trimmed = trim_url(middle)
                if autoescape and (not safe_input):
                    lead, trail = (escape(lead), escape(trail))
                    trimmed = escape(trimmed)
                middle = '<a href=""%s""%s>%s</a>' % (escape(url), nofollow_attr, trimmed)
                words[i] = mark_safe('%s%s%s' % (lead, middle, trail))
            elif safe_input:
                words[i] = mark_safe(word)
            elif autoescape:
                words[i] = escape(word)
        elif safe_input:
            words[i] = mark_safe(word)
        elif autoescape:
            words[i] = escape(word)
    return ''.join(words)","[{""var"": ""stripped"", ""rename"": ""trimmed_text""}, {""var"": ""url"", ""rename"": ""clickable_url""}, {""var"": ""middle_unescaped"", ""rename"": ""unescaped_middle_content""}, {""var"": ""words"", ""rename"": ""text_segments""}, {""var"": ""local"", ""rename"": ""email_local_part""}, {""var"": ""p1"", ""rename"": ""python\nlocal_part""}, {""var"": ""i"", ""rename"": ""word_index""}, {""var"": ""closing"", ""rename"": ""trailing_punctuation""}, {""var"": ""trimmed"", ""rename"": ""truncated_link_text""}, {""var"": ""trimmed_something"", ""rename"": ""punctuation_trimmed""}, {""var"": ""p2"", ""rename"": ""email_domain_part""}, {""var"": ""domain"", ""rename"": ""email_domain_component""}, {""var"": ""opening"", ""rename"": ""opening_punct""}, {""var"": ""safe_input"", ""rename"": ""is_safe_text""}, {""var"": ""nofollow_attr"", ""rename"": ""nofollow_rel_attribute""}, {""var"": ""word"", ""rename"": ""current_word""}]"
./django/utils/html.py,trim_punctuation,remove_wrapping_and_trailing_punctuation,259,289,"def trim_punctuation(lead, middle, trail):
    """"""
        Trim trailing and wrapping punctuation from `middle`. Return the items
        of the new state.
        """"""
    trimmed_something = True
    while trimmed_something:
        trimmed_something = False
        for opening, closing in WRAPPING_PUNCTUATION:
            if middle.startswith(opening):
                middle = middle[len(opening):]
                lead += opening
                trimmed_something = True
            if middle.endswith(closing) and middle.count(closing) == middle.count(opening) + 1:
                middle = middle[:-len(closing)]
                trail = closing + trail
                trimmed_something = True
        middle_unescaped = html.unescape(middle)
        stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
        if middle_unescaped != stripped:
            trail = middle[len(stripped):] + trail
            middle = middle[:len(stripped) - len(middle_unescaped)]
            trimmed_something = True
    return (lead, middle, trail)","def remove_wrapping_and_trailing_punctuation(lead, middle, trail):
    """"""
        Trim trailing and wrapping punctuation from `middle`. Return the items
        of the new state.
        """"""
    trimmed_something = True
    while trimmed_something:
        trimmed_something = False
        for opening, closing in WRAPPING_PUNCTUATION:
            if middle.startswith(opening):
                middle = middle[len(opening):]
                lead += opening
                trimmed_something = True
            if middle.endswith(closing) and middle.count(closing) == middle.count(opening) + 1:
                middle = middle[:-len(closing)]
                trail = closing + trail
                trimmed_something = True
        middle_unescaped = html.unescape(middle)
        stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
        if middle_unescaped != stripped:
            trail = middle[len(stripped):] + trail
            middle = middle[:len(stripped) - len(middle_unescaped)]
            trimmed_something = True
    return (lead, middle, trail)","[{""var"": ""stripped"", ""rename"": ""punctuation_trimmed_middle""}, {""var"": ""middle_unescaped"", ""rename"": ""unescaped_middle_segment""}, {""var"": ""closing"", ""rename"": ""wrapping_closing""}, {""var"": ""trimmed_something"", ""rename"": ""punctuation_was_trimmed""}, {""var"": ""opening"", ""rename"": ""opening_punctuation""}]"
