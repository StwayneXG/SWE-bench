file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sphinx/domains/python.py,make_xrefs,generate_cross_references,304,324,"def make_xrefs(self, rolename: str, domain: str, target: str, innernode: Type[TextlikeNode]=nodes.emphasis, contnode: Node=None, env: BuildEnvironment=None) -> List[Node]:
    delims = '(\\s*[\\[\\]\\(\\),](?:\\s*or\\s)?\\s*|\\s+or\\s+|\\.\\.\\.)'
    delims_re = re.compile(delims)
    sub_targets = re.split(delims, target)
    split_contnode = bool(contnode and contnode.astext() == target)
    results = []
    for sub_target in filter(None, sub_targets):
        if split_contnode:
            contnode = nodes.Text(sub_target)
        if delims_re.match(sub_target):
            results.append(contnode or innernode(sub_target, sub_target))
        else:
            results.append(self.make_xref(rolename, domain, sub_target, innernode, contnode, env))
    return results","def generate_cross_references(self, rolename: str, domain: str, target: str, innernode: Type[TextlikeNode]=nodes.emphasis, contnode: Node=None, env: BuildEnvironment=None) -> List[Node]:
    delims = '(\\s*[\\[\\]\\(\\),](?:\\s*or\\s)?\\s*|\\s+or\\s+|\\.\\.\\.)'
    delims_re = re.compile(delims)
    sub_targets = re.split(delims, target)
    split_contnode = bool(contnode and contnode.astext() == target)
    results = []
    for sub_target in filter(None, sub_targets):
        if split_contnode:
            contnode = nodes.Text(sub_target)
        if delims_re.match(sub_target):
            results.append(contnode or innernode(sub_target, sub_target))
        else:
            results.append(self.make_xref(rolename, domain, sub_target, innernode, contnode, env))
    return results","[{""var"": ""results"", ""rename"": ""xref_nodes_list""}, {""var"": ""sub_targets"", ""rename"": ""split_targets_list""}, {""var"": ""sub_target"", ""rename"": ""extracted_subtargets""}, {""var"": ""delims_re"", ""rename"": ""delimiter_pattern_re""}, {""var"": ""delims"", ""rename"": ""delimiter_pattern""}, {""var"": ""split_contnode"", ""rename"": ""is_contnode_split""}]"
