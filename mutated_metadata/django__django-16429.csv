file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/utils/timesince.py,timesince,format_time_difference,28,130,"def timesince(d, now=None, reversed=False, time_strings=None, depth=2):
    """"""
    Take two datetime objects and return the time between d and now as a nicely
    formatted string, e.g. ""10 minutes"". If d occurs after now, return
    ""0 minutes"".

    Units used are years, months, weeks, days, hours, and minutes.
    Seconds and microseconds are ignored.

    The algorithm takes into account the varying duration of years and months.
    There is exactly ""1 year, 1 month"" between 2013/02/10 and 2014/03/10,
    but also between 2007/08/10 and 2008/09/10 despite the delta being 393 days
    in the former case and 397 in the latter.

    Up to `depth` adjacent units will be displayed.  For example,
    ""2 weeks, 3 days"" and ""1 year, 3 months"" are possible outputs, but
    ""2 weeks, 3 hours"" and ""1 year, 5 days"" are not.

    `time_strings` is an optional dict of strings to replace the default
    TIME_STRINGS dict.

    `depth` is an optional integer to control the number of adjacent time
    units returned.

    Originally adapted from
    https://web.archive.org/web/20060617175230/http://blog.natbat.co.uk/archive/2003/Jun/14/time_since
    Modified to improve results for years and months.
    """"""
    if time_strings is None:
        time_strings = TIME_STRINGS
    if depth <= 0:
        raise ValueError('depth must be greater than 0.')
    if not isinstance(d, datetime.datetime):
        d = datetime.datetime(d.year, d.month, d.day)
    if now and (not isinstance(now, datetime.datetime)):
        now = datetime.datetime(now.year, now.month, now.day)
    now = now or datetime.datetime.now(datetime.timezone.utc if is_aware(d) else None)
    if reversed:
        d, now = (now, d)
    delta = now - d
    since = delta.days * 24 * 60 * 60 + delta.seconds
    if since <= 0:
        return avoid_wrapping(time_strings['minute'] % {'num': 0})
    total_months = (now.year - d.year) * 12 + (now.month - d.month)
    if d.day > now.day or (d.day == now.day and d.time() > now.time()):
        total_months -= 1
    years, months = divmod(total_months, 12)
    if years or months:
        pivot_year = d.year + years
        pivot_month = d.month + months
        if pivot_month > 12:
            pivot_month -= 12
            pivot_year += 1
        pivot = datetime.datetime(pivot_year, pivot_month, min(MONTHS_DAYS[pivot_month - 1], d.day), d.hour, d.minute, d.second)
    else:
        pivot = d
    remaining_time = (now - pivot).total_seconds()
    partials = [years, months]
    for chunk in TIME_CHUNKS:
        count = remaining_time // chunk
        partials.append(count)
        remaining_time -= chunk * count
    i = 0
    for i, value in enumerate(partials):
        if value != 0:
            break
    else:
        return avoid_wrapping(time_strings['minute'] % {'num': 0})
    result = []
    current_depth = 0
    while i < len(TIME_STRINGS_KEYS) and current_depth < depth:
        value = partials[i]
        if value == 0:
            break
        name = TIME_STRINGS_KEYS[i]
        result.append(avoid_wrapping(time_strings[name] % {'num': value}))
        current_depth += 1
        i += 1
    return gettext(', ').join(result)","def format_time_difference(d, now=None, reversed=False, time_strings=None, depth=2):
    """"""
    Take two datetime objects and return the time between d and now as a nicely
    formatted string, e.g. ""10 minutes"". If d occurs after now, return
    ""0 minutes"".

    Units used are years, months, weeks, days, hours, and minutes.
    Seconds and microseconds are ignored.

    The algorithm takes into account the varying duration of years and months.
    There is exactly ""1 year, 1 month"" between 2013/02/10 and 2014/03/10,
    but also between 2007/08/10 and 2008/09/10 despite the delta being 393 days
    in the former case and 397 in the latter.

    Up to `depth` adjacent units will be displayed.  For example,
    ""2 weeks, 3 days"" and ""1 year, 3 months"" are possible outputs, but
    ""2 weeks, 3 hours"" and ""1 year, 5 days"" are not.

    `time_strings` is an optional dict of strings to replace the default
    TIME_STRINGS dict.

    `depth` is an optional integer to control the number of adjacent time
    units returned.

    Originally adapted from
    https://web.archive.org/web/20060617175230/http://blog.natbat.co.uk/archive/2003/Jun/14/time_since
    Modified to improve results for years and months.
    """"""
    if time_strings is None:
        time_strings = TIME_STRINGS
    if depth <= 0:
        raise ValueError('depth must be greater than 0.')
    if not isinstance(d, datetime.datetime):
        d = datetime.datetime(d.year, d.month, d.day)
    if now and (not isinstance(now, datetime.datetime)):
        now = datetime.datetime(now.year, now.month, now.day)
    now = now or datetime.datetime.now(datetime.timezone.utc if is_aware(d) else None)
    if reversed:
        d, now = (now, d)
    delta = now - d
    since = delta.days * 24 * 60 * 60 + delta.seconds
    if since <= 0:
        return avoid_wrapping(time_strings['minute'] % {'num': 0})
    total_months = (now.year - d.year) * 12 + (now.month - d.month)
    if d.day > now.day or (d.day == now.day and d.time() > now.time()):
        total_months -= 1
    years, months = divmod(total_months, 12)
    if years or months:
        pivot_year = d.year + years
        pivot_month = d.month + months
        if pivot_month > 12:
            pivot_month -= 12
            pivot_year += 1
        pivot = datetime.datetime(pivot_year, pivot_month, min(MONTHS_DAYS[pivot_month - 1], d.day), d.hour, d.minute, d.second)
    else:
        pivot = d
    remaining_time = (now - pivot).total_seconds()
    partials = [years, months]
    for chunk in TIME_CHUNKS:
        count = remaining_time // chunk
        partials.append(count)
        remaining_time -= chunk * count
    i = 0
    for i, value in enumerate(partials):
        if value != 0:
            break
    else:
        return avoid_wrapping(time_strings['minute'] % {'num': 0})
    result = []
    current_depth = 0
    while i < len(TIME_STRINGS_KEYS) and current_depth < depth:
        value = partials[i]
        if value == 0:
            break
        name = TIME_STRINGS_KEYS[i]
        result.append(avoid_wrapping(time_strings[name] % {'num': value}))
        current_depth += 1
        i += 1
    return gettext(', ').join(result)","[{""var"": ""count"", ""rename"": ""time_unit_count""}, {""var"": ""name"", ""rename"": ""time_unit_name""}, {""var"": ""months"", ""rename"": ""months_elapsed""}, {""var"": ""pivot"", ""rename"": ""adjusted_date""}, {""var"": ""pivot_year"", ""rename"": ""transition_year""}, {""var"": ""i"", ""rename"": ""first_nonzero_index""}, {""var"": ""delta"", ""rename"": ""time_difference""}, {""var"": ""since"", ""rename"": ""elapsed_seconds""}, {""var"": ""result"", ""rename"": ""formatted_time_difference""}, {""var"": ""years"", ""rename"": ""elapsed_years""}, {""var"": ""partials"", ""rename"": ""time_units_count""}, {""var"": ""chunk"", ""rename"": ""time_unit_duration""}, {""var"": ""value"", ""rename"": ""time_unit_quantity""}, {""var"": ""remaining_time"", ""rename"": ""remaining_seconds_since_pivot""}, {""var"": ""pivot_month"", ""rename"": ""adjusted_month""}, {""var"": ""current_depth"", ""rename"": ""tracked_unit_count""}, {""var"": ""total_months"", ""rename"": ""months_between_dates""}]"
