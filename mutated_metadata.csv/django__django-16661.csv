file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/contrib/admin/options.py,lookup_allowed,is_lookup_valid_for_filtering,439,497,"def lookup_allowed(self, lookup, value):
    from django.contrib.admin.filters import SimpleListFilter
    model = self.model
    for fk_lookup in model._meta.related_fkey_lookups:
        if callable(fk_lookup):
            fk_lookup = fk_lookup()
        if (lookup, value) in widgets.url_params_from_lookup_dict(fk_lookup).items():
            return True
    relation_parts = []
    prev_field = None
    for part in lookup.split(LOOKUP_SEP):
        try:
            field = model._meta.get_field(part)
        except FieldDoesNotExist:
            break
        if not prev_field or (prev_field.is_relation and field not in prev_field.path_infos[-1].target_fields):
            relation_parts.append(part)
        if not getattr(field, 'path_infos', None):
            break
        prev_field = field
        model = field.path_infos[-1].to_opts.model
    if len(relation_parts) <= 1:
        return True
    valid_lookups = {self.date_hierarchy}
    for filter_item in self.list_filter:
        if isinstance(filter_item, type) and issubclass(filter_item, SimpleListFilter):
            valid_lookups.add(filter_item.parameter_name)
        elif isinstance(filter_item, (list, tuple)):
            valid_lookups.add(filter_item[0])
        else:
            valid_lookups.add(filter_item)
    return not {LOOKUP_SEP.join(relation_parts), LOOKUP_SEP.join(relation_parts + [part])}.isdisjoint(valid_lookups)","def is_lookup_valid_for_filtering(self, lookup, value):
    from django.contrib.admin.filters import SimpleListFilter
    model = self.model
    for fk_lookup in model._meta.related_fkey_lookups:
        if callable(fk_lookup):
            fk_lookup = fk_lookup()
        if (lookup, value) in widgets.url_params_from_lookup_dict(fk_lookup).items():
            return True
    relation_parts = []
    prev_field = None
    for part in lookup.split(LOOKUP_SEP):
        try:
            field = model._meta.get_field(part)
        except FieldDoesNotExist:
            break
        if not prev_field or (prev_field.is_relation and field not in prev_field.path_infos[-1].target_fields):
            relation_parts.append(part)
        if not getattr(field, 'path_infos', None):
            break
        prev_field = field
        model = field.path_infos[-1].to_opts.model
    if len(relation_parts) <= 1:
        return True
    valid_lookups = {self.date_hierarchy}
    for filter_item in self.list_filter:
        if isinstance(filter_item, type) and issubclass(filter_item, SimpleListFilter):
            valid_lookups.add(filter_item.parameter_name)
        elif isinstance(filter_item, (list, tuple)):
            valid_lookups.add(filter_item[0])
        else:
            valid_lookups.add(filter_item)
    return not {LOOKUP_SEP.join(relation_parts), LOOKUP_SEP.join(relation_parts + [part])}.isdisjoint(valid_lookups)","[{""var"": ""part"", ""rename"": ""lookup_part""}, {""var"": ""field"", ""rename"": ""field_descriptor""}, {""var"": ""model"", ""rename"": ""current_model""}, {""var"": ""filter_item"", ""rename"": ""filter_criteria""}, {""var"": ""prev_field"", ""rename"": ""previous_field""}, {""var"": ""valid_lookups"", ""rename"": ""permissible_filter_parameters""}, {""var"": ""fk_lookup"", ""rename"": ""foreign_key_lookup""}, {""var"": ""relation_parts"", ""rename"": ""lookup_relation_segments""}]"
