file,method_name,new_method_name,start_line,end_line,original_code,code,var
./src/_pytest/mark/expression.py,expression,parse_complete_expression_with_end,130,136,"def expression(s: Scanner) -> ast.Expression:
    if s.accept(TokenType.EOF):
        ret = ast.NameConstant(False)
    else:
        ret = expr(s)
        s.accept(TokenType.EOF, reject=True)
    return ast.fix_missing_locations(ast.Expression(ret))","def parse_complete_expression_with_end(s: Scanner) -> ast.Expression:
    if s.accept(TokenType.EOF):
        ret = ast.NameConstant(False)
    else:
        ret = expr(s)
        s.accept(TokenType.EOF, reject=True)
    return ast.fix_missing_locations(ast.Expression(ret))","[{""var"": ""ret"", ""rename"": ""parsed_expression_node""}]"
./src/_pytest/mark/expression.py,__len__,calculate_size_not_implemented,180,181,"def __len__(self) -> int:
    raise NotImplementedError()","def calculate_size_not_implemented(self) -> int:
    raise NotImplementedError()",[]
