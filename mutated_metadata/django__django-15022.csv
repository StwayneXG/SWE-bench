file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/contrib/admin/options.py,get_search_results,retrieve_filtered_search_results,994,1046,"def get_search_results(self, request, queryset, search_term):
    """"""
        Return a tuple containing a queryset to implement the search
        and a boolean indicating if the results may contain duplicates.
        """"""

    def construct_search(field_name):
        if field_name.startswith('^'):
            return '%s__istartswith' % field_name[1:]
        elif field_name.startswith('='):
            return '%s__iexact' % field_name[1:]
        elif field_name.startswith('@'):
            return '%s__search' % field_name[1:]
        opts = queryset.model._meta
        lookup_fields = field_name.split(LOOKUP_SEP)
        prev_field = None
        for path_part in lookup_fields:
            if path_part == 'pk':
                path_part = opts.pk.name
            try:
                field = opts.get_field(path_part)
            except FieldDoesNotExist:
                if prev_field and prev_field.get_lookup(path_part):
                    return field_name
            else:
                prev_field = field
                if hasattr(field, 'path_infos'):
                    opts = field.path_infos[-1].to_opts
        return '%s__icontains' % field_name
    may_have_duplicates = False
    search_fields = self.get_search_fields(request)
    if search_fields and search_term:
        orm_lookups = [construct_search(str(search_field)) for search_field in search_fields]
        for bit in smart_split(search_term):
            if bit.startswith(('""', ""'"")) and bit[0] == bit[-1]:
                bit = unescape_string_literal(bit)
            or_queries = models.Q(*((orm_lookup, bit) for orm_lookup in orm_lookups), _connector=models.Q.OR)
            queryset = queryset.filter(or_queries)
        may_have_duplicates |= any((lookup_spawns_duplicates(self.opts, search_spec) for search_spec in orm_lookups))
    return (queryset, may_have_duplicates)","def retrieve_filtered_search_results(self, request, queryset, search_term):
    """"""
        Return a tuple containing a queryset to implement the search
        and a boolean indicating if the results may contain duplicates.
        """"""

    def construct_search(field_name):
        if field_name.startswith('^'):
            return '%s__istartswith' % field_name[1:]
        elif field_name.startswith('='):
            return '%s__iexact' % field_name[1:]
        elif field_name.startswith('@'):
            return '%s__search' % field_name[1:]
        opts = queryset.model._meta
        lookup_fields = field_name.split(LOOKUP_SEP)
        prev_field = None
        for path_part in lookup_fields:
            if path_part == 'pk':
                path_part = opts.pk.name
            try:
                field = opts.get_field(path_part)
            except FieldDoesNotExist:
                if prev_field and prev_field.get_lookup(path_part):
                    return field_name
            else:
                prev_field = field
                if hasattr(field, 'path_infos'):
                    opts = field.path_infos[-1].to_opts
        return '%s__icontains' % field_name
    may_have_duplicates = False
    search_fields = self.get_search_fields(request)
    if search_fields and search_term:
        orm_lookups = [construct_search(str(search_field)) for search_field in search_fields]
        for bit in smart_split(search_term):
            if bit.startswith(('""', ""'"")) and bit[0] == bit[-1]:
                bit = unescape_string_literal(bit)
            or_queries = models.Q(*((orm_lookup, bit) for orm_lookup in orm_lookups), _connector=models.Q.OR)
            queryset = queryset.filter(or_queries)
        may_have_duplicates |= any((lookup_spawns_duplicates(self.opts, search_spec) for search_spec in orm_lookups))
    return (queryset, may_have_duplicates)","[{""var"": ""search_field"", ""rename"": ""field_search_descriptor""}, {""var"": ""bit"", ""rename"": ""search_term_component""}, {""var"": ""field"", ""rename"": ""query_field""}, {""var"": ""search_spec"", ""rename"": ""search_query_modifier""}, {""var"": ""may_have_duplicates"", ""rename"": ""potential_duplicate_results""}, {""var"": ""opts"", ""rename"": ""model_meta_options""}, {""var"": ""or_queries"", ""rename"": ""combined_search_conditions""}, {""var"": ""search_fields"", ""rename"": ""search_criteria_fields""}, {""var"": ""orm_lookup"", ""rename"": ""search_field_lookups""}, {""var"": ""prev_field"", ""rename"": ""previous_field_instance""}, {""var"": ""lookup_fields"", ""rename"": ""field_lookup_path_parts""}, {""var"": ""orm_lookups"", ""rename"": ""search_query_lookups""}, {""var"": ""path_part"", ""rename"": ""lookup_segment""}]"
