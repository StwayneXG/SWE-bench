file,method_name,new_method_name,start_line,end_line,original_code,code,var
./lib/matplotlib/legend.py,__init__,configure_legend_properties,294,553,"@docstring.dedent_interpd
def __init__(self, parent, handles, labels, loc=None, numpoints=None, markerscale=None, markerfirst=True, scatterpoints=None, scatteryoffsets=None, prop=None, fontsize=None, labelcolor=None, borderpad=None, labelspacing=None, handlelength=None, handleheight=None, handletextpad=None, borderaxespad=None, columnspacing=None, ncol=1, mode=None, fancybox=None, shadow=None, title=None, title_fontsize=None, framealpha=None, edgecolor=None, facecolor=None, bbox_to_anchor=None, bbox_transform=None, frameon=None, handler_map=None, title_fontproperties=None):
    """"""
        Parameters
        ----------
        parent : `~matplotlib.axes.Axes` or `.Figure`
            The artist that contains the legend.

        handles : list of `.Artist`
            A list of Artists (lines, patches) to be added to the legend.

        labels : list of str
            A list of labels to show next to the artists. The length of handles
            and labels should be the same. If they are not, they are truncated
            to the smaller of both lengths.

        Other Parameters
        ----------------
        %(_legend_kw_doc)s

        Notes
        -----
        Users can specify any arbitrary location for the legend using the
        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a
        `.BboxBase` (or derived therefrom) or a tuple of 2 or 4 floats.
        See `set_bbox_to_anchor` for more detail.

        The legend location can be specified by setting *loc* with a tuple of
        2 floats, which is interpreted as the lower-left corner of the legend
        in the normalized axes coordinate.
        """"""
    from matplotlib.axes import Axes
    from matplotlib.figure import Figure
    super().__init__()
    if prop is None:
        if fontsize is not None:
            self.prop = FontProperties(size=fontsize)
        else:
            self.prop = FontProperties(size=mpl.rcParams['legend.fontsize'])
    else:
        self.prop = FontProperties._from_any(prop)
        if isinstance(prop, dict) and 'size' not in prop:
            self.prop.set_size(mpl.rcParams['legend.fontsize'])
    self._fontsize = self.prop.get_size_in_points()
    self.texts = []
    self.legendHandles = []
    self._legend_title_box = None
    self._custom_handler_map = handler_map
    locals_view = locals()
    for name in ['numpoints', 'markerscale', 'shadow', 'columnspacing', 'scatterpoints', 'handleheight', 'borderpad', 'labelspacing', 'handlelength', 'handletextpad', 'borderaxespad']:
        if locals_view[name] is None:
            value = mpl.rcParams['legend.' + name]
        else:
            value = locals_view[name]
        setattr(self, name, value)
    del locals_view
    _lab, _hand = ([], [])
    for label, handle in zip(labels, handles):
        if isinstance(label, str) and label.startswith('_'):
            _api.warn_external('The handle {!r} has a label of {!r} which cannot be automatically added to the legend.'.format(handle, label))
        else:
            _lab.append(label)
            _hand.append(handle)
    labels, handles = (_lab, _hand)
    handles = list(handles)
    if len(handles) < 2:
        ncol = 1
    self._ncol = ncol
    if self.numpoints <= 0:
        raise ValueError('numpoints must be > 0; it was %d' % numpoints)
    if scatteryoffsets is None:
        self._scatteryoffsets = np.array([3.0 / 8.0, 4.0 / 8.0, 2.5 / 8.0])
    else:
        self._scatteryoffsets = np.asarray(scatteryoffsets)
    reps = self.scatterpoints // len(self._scatteryoffsets) + 1
    self._scatteryoffsets = np.tile(self._scatteryoffsets, reps)[:self.scatterpoints]
    self._legend_box = None
    if isinstance(parent, Axes):
        self.isaxes = True
        self.axes = parent
        self.set_figure(parent.figure)
    elif isinstance(parent, Figure):
        self.isaxes = False
        self.set_figure(parent)
    else:
        raise TypeError('Legend needs either Axes or Figure as parent')
    self.parent = parent
    self._loc_used_default = loc is None
    if loc is None:
        loc = mpl.rcParams['legend.loc']
        if not self.isaxes and loc in [0, 'best']:
            loc = 'upper right'
    if isinstance(loc, str):
        loc = _api.check_getitem(self.codes, loc=loc)
    if not self.isaxes and loc == 0:
        raise ValueError(""Automatic legend placement (loc='best') not implemented for figure legend"")
    self._mode = mode
    self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)
    if facecolor is None:
        facecolor = mpl.rcParams['legend.facecolor']
    if facecolor == 'inherit':
        facecolor = mpl.rcParams['axes.facecolor']
    if edgecolor is None:
        edgecolor = mpl.rcParams['legend.edgecolor']
    if edgecolor == 'inherit':
        edgecolor = mpl.rcParams['axes.edgecolor']
    if fancybox is None:
        fancybox = mpl.rcParams['legend.fancybox']
    self.legendPatch = FancyBboxPatch(xy=(0, 0), width=1, height=1, facecolor=facecolor, edgecolor=edgecolor, alpha=framealpha if framealpha is not None else 1 if shadow else mpl.rcParams['legend.framealpha'], boxstyle='round,pad=0,rounding_size=0.2' if fancybox else 'square,pad=0', mutation_scale=self._fontsize, snap=True, visible=frameon if frameon is not None else mpl.rcParams['legend.frameon'])
    self._set_artist_props(self.legendPatch)
    self._init_legend_box(handles, labels, markerfirst)
    tmp = self._loc_used_default
    self._set_loc(loc)
    self._loc_used_default = tmp
    if title_fontsize is not None and title_fontproperties is not None:
        raise ValueError(""title_fontsize and title_fontproperties can't be specified at the same time. Only use one of them. "")
    title_prop_fp = FontProperties._from_any(title_fontproperties)
    if isinstance(title_fontproperties, dict):
        if 'size' not in title_fontproperties:
            title_fontsize = mpl.rcParams['legend.title_fontsize']
            title_prop_fp.set_size(title_fontsize)
    elif title_fontsize is not None:
        title_prop_fp.set_size(title_fontsize)
    elif not isinstance(title_fontproperties, FontProperties):
        title_fontsize = mpl.rcParams['legend.title_fontsize']
        title_prop_fp.set_size(title_fontsize)
    self.set_title(title, prop=title_prop_fp)
    self._draggable = None
    color_getters = {'linecolor': ['get_color', 'get_facecolor'], 'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'], 'mfc': ['get_markerfacecolor', 'get_facecolor'], 'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'], 'mec': ['get_markeredgecolor', 'get_edgecolor']}
    if labelcolor is None:
        if mpl.rcParams['legend.labelcolor'] is not None:
            labelcolor = mpl.rcParams['legend.labelcolor']
        else:
            labelcolor = mpl.rcParams['text.color']
    if isinstance(labelcolor, str) and labelcolor in color_getters:
        getter_names = color_getters[labelcolor]
        for handle, text in zip(self.legendHandles, self.texts):
            for getter_name in getter_names:
                try:
                    color = getattr(handle, getter_name)()
                    text.set_color(color)
                    break
                except AttributeError:
                    pass
    elif isinstance(labelcolor, str) and labelcolor == 'none':
        for text in self.texts:
            text.set_color(labelcolor)
    elif np.iterable(labelcolor):
        for text, color in zip(self.texts, itertools.cycle(colors.to_rgba_array(labelcolor))):
            text.set_color(color)
    else:
        raise ValueError('Invalid argument for labelcolor : %s' % str(labelcolor))","@docstring.dedent_interpd
def configure_legend_properties(self, parent, handles, labels, loc=None, numpoints=None, markerscale=None, markerfirst=True, scatterpoints=None, scatteryoffsets=None, prop=None, fontsize=None, labelcolor=None, borderpad=None, labelspacing=None, handlelength=None, handleheight=None, handletextpad=None, borderaxespad=None, columnspacing=None, ncol=1, mode=None, fancybox=None, shadow=None, title=None, title_fontsize=None, framealpha=None, edgecolor=None, facecolor=None, bbox_to_anchor=None, bbox_transform=None, frameon=None, handler_map=None, title_fontproperties=None):
    """"""
        Parameters
        ----------
        parent : `~matplotlib.axes.Axes` or `.Figure`
            The artist that contains the legend.

        handles : list of `.Artist`
            A list of Artists (lines, patches) to be added to the legend.

        labels : list of str
            A list of labels to show next to the artists. The length of handles
            and labels should be the same. If they are not, they are truncated
            to the smaller of both lengths.

        Other Parameters
        ----------------
        %(_legend_kw_doc)s

        Notes
        -----
        Users can specify any arbitrary location for the legend using the
        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a
        `.BboxBase` (or derived therefrom) or a tuple of 2 or 4 floats.
        See `set_bbox_to_anchor` for more detail.

        The legend location can be specified by setting *loc* with a tuple of
        2 floats, which is interpreted as the lower-left corner of the legend
        in the normalized axes coordinate.
        """"""
    from matplotlib.axes import Axes
    from matplotlib.figure import Figure
    super().__init__()
    if prop is None:
        if fontsize is not None:
            self.prop = FontProperties(size=fontsize)
        else:
            self.prop = FontProperties(size=mpl.rcParams['legend.fontsize'])
    else:
        self.prop = FontProperties._from_any(prop)
        if isinstance(prop, dict) and 'size' not in prop:
            self.prop.set_size(mpl.rcParams['legend.fontsize'])
    self._fontsize = self.prop.get_size_in_points()
    self.texts = []
    self.legendHandles = []
    self._legend_title_box = None
    self._custom_handler_map = handler_map
    locals_view = locals()
    for name in ['numpoints', 'markerscale', 'shadow', 'columnspacing', 'scatterpoints', 'handleheight', 'borderpad', 'labelspacing', 'handlelength', 'handletextpad', 'borderaxespad']:
        if locals_view[name] is None:
            value = mpl.rcParams['legend.' + name]
        else:
            value = locals_view[name]
        setattr(self, name, value)
    del locals_view
    _lab, _hand = ([], [])
    for label, handle in zip(labels, handles):
        if isinstance(label, str) and label.startswith('_'):
            _api.warn_external('The handle {!r} has a label of {!r} which cannot be automatically added to the legend.'.format(handle, label))
        else:
            _lab.append(label)
            _hand.append(handle)
    labels, handles = (_lab, _hand)
    handles = list(handles)
    if len(handles) < 2:
        ncol = 1
    self._ncol = ncol
    if self.numpoints <= 0:
        raise ValueError('numpoints must be > 0; it was %d' % numpoints)
    if scatteryoffsets is None:
        self._scatteryoffsets = np.array([3.0 / 8.0, 4.0 / 8.0, 2.5 / 8.0])
    else:
        self._scatteryoffsets = np.asarray(scatteryoffsets)
    reps = self.scatterpoints // len(self._scatteryoffsets) + 1
    self._scatteryoffsets = np.tile(self._scatteryoffsets, reps)[:self.scatterpoints]
    self._legend_box = None
    if isinstance(parent, Axes):
        self.isaxes = True
        self.axes = parent
        self.set_figure(parent.figure)
    elif isinstance(parent, Figure):
        self.isaxes = False
        self.set_figure(parent)
    else:
        raise TypeError('Legend needs either Axes or Figure as parent')
    self.parent = parent
    self._loc_used_default = loc is None
    if loc is None:
        loc = mpl.rcParams['legend.loc']
        if not self.isaxes and loc in [0, 'best']:
            loc = 'upper right'
    if isinstance(loc, str):
        loc = _api.check_getitem(self.codes, loc=loc)
    if not self.isaxes and loc == 0:
        raise ValueError(""Automatic legend placement (loc='best') not implemented for figure legend"")
    self._mode = mode
    self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)
    if facecolor is None:
        facecolor = mpl.rcParams['legend.facecolor']
    if facecolor == 'inherit':
        facecolor = mpl.rcParams['axes.facecolor']
    if edgecolor is None:
        edgecolor = mpl.rcParams['legend.edgecolor']
    if edgecolor == 'inherit':
        edgecolor = mpl.rcParams['axes.edgecolor']
    if fancybox is None:
        fancybox = mpl.rcParams['legend.fancybox']
    self.legendPatch = FancyBboxPatch(xy=(0, 0), width=1, height=1, facecolor=facecolor, edgecolor=edgecolor, alpha=framealpha if framealpha is not None else 1 if shadow else mpl.rcParams['legend.framealpha'], boxstyle='round,pad=0,rounding_size=0.2' if fancybox else 'square,pad=0', mutation_scale=self._fontsize, snap=True, visible=frameon if frameon is not None else mpl.rcParams['legend.frameon'])
    self._set_artist_props(self.legendPatch)
    self._init_legend_box(handles, labels, markerfirst)
    tmp = self._loc_used_default
    self._set_loc(loc)
    self._loc_used_default = tmp
    if title_fontsize is not None and title_fontproperties is not None:
        raise ValueError(""title_fontsize and title_fontproperties can't be specified at the same time. Only use one of them. "")
    title_prop_fp = FontProperties._from_any(title_fontproperties)
    if isinstance(title_fontproperties, dict):
        if 'size' not in title_fontproperties:
            title_fontsize = mpl.rcParams['legend.title_fontsize']
            title_prop_fp.set_size(title_fontsize)
    elif title_fontsize is not None:
        title_prop_fp.set_size(title_fontsize)
    elif not isinstance(title_fontproperties, FontProperties):
        title_fontsize = mpl.rcParams['legend.title_fontsize']
        title_prop_fp.set_size(title_fontsize)
    self.set_title(title, prop=title_prop_fp)
    self._draggable = None
    color_getters = {'linecolor': ['get_color', 'get_facecolor'], 'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'], 'mfc': ['get_markerfacecolor', 'get_facecolor'], 'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'], 'mec': ['get_markeredgecolor', 'get_edgecolor']}
    if labelcolor is None:
        if mpl.rcParams['legend.labelcolor'] is not None:
            labelcolor = mpl.rcParams['legend.labelcolor']
        else:
            labelcolor = mpl.rcParams['text.color']
    if isinstance(labelcolor, str) and labelcolor in color_getters:
        getter_names = color_getters[labelcolor]
        for handle, text in zip(self.legendHandles, self.texts):
            for getter_name in getter_names:
                try:
                    color = getattr(handle, getter_name)()
                    text.set_color(color)
                    break
                except AttributeError:
                    pass
    elif isinstance(labelcolor, str) and labelcolor == 'none':
        for text in self.texts:
            text.set_color(labelcolor)
    elif np.iterable(labelcolor):
        for text, color in zip(self.texts, itertools.cycle(colors.to_rgba_array(labelcolor))):
            text.set_color(color)
    else:
        raise ValueError('Invalid argument for labelcolor : %s' % str(labelcolor))","[{""var"": ""handle"", ""rename"": ""legend_handles""}, {""var"": ""reps"", ""rename"": ""scatter_offset_repetitions""}, {""var"": ""name"", ""rename"": ""variable_name""}, {""var"": ""color"", ""rename"": ""display_color""}, {""var"": ""label"", ""rename"": ""legendLabels""}, {""var"": ""title_prop_fp"", ""rename"": ""title_font_properties""}, {""var"": ""getter_names"", ""rename"": ""color_attribute_getters""}, {""var"": ""tmp"", ""rename"": ""default_location_used""}, {""var"": ""getter_name"", ""rename"": ""color_getter_name""}, {""var"": ""_hand"", ""rename"": ""legend_handles""}, {""var"": ""value"", ""rename"": ""default_value""}, {""var"": ""locals_view"", ""rename"": ""python\nlegend_parameters""}, {""var"": ""color_getters"", ""rename"": ""legend_color_attributes""}, {""var"": ""text"", ""rename"": ""legend_text_elements""}, {""var"": ""_lab"", ""rename"": ""filtered_labels""}]"
