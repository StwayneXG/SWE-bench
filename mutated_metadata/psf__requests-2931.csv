file,method_name,new_method_name,start_line,end_line,original_code,code,var
./requests/models.py,_encode_params,encode_parameters_to_url_format,75,99,"@staticmethod
def _encode_params(data):
    """"""Encode parameters in a piece of data.

        Will successfully encode parameters when passed as a dict or a list of
        2-tuples. Order is retained if data is a list of 2-tuples but arbitrary
        if parameters are supplied as a dict.
        """"""
    if isinstance(data, (str, bytes)):
        return to_native_string(data)
    elif hasattr(data, 'read'):
        return data
    elif hasattr(data, '__iter__'):
        result = []
        for k, vs in to_key_val_list(data):
            if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):
                vs = [vs]
            for v in vs:
                if v is not None:
                    result.append((k.encode('utf-8') if isinstance(k, str) else k, v.encode('utf-8') if isinstance(v, str) else v))
        return urlencode(result, doseq=True)
    else:
        return data","@staticmethod
def encode_parameters_to_url_format(data):
    """"""Encode parameters in a piece of data.

        Will successfully encode parameters when passed as a dict or a list of
        2-tuples. Order is retained if data is a list of 2-tuples but arbitrary
        if parameters are supplied as a dict.
        """"""
    if isinstance(data, (str, bytes)):
        return to_native_string(data)
    elif hasattr(data, 'read'):
        return data
    elif hasattr(data, '__iter__'):
        result = []
        for k, vs in to_key_val_list(data):
            if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):
                vs = [vs]
            for v in vs:
                if v is not None:
                    result.append((k.encode('utf-8') if isinstance(k, str) else k, v.encode('utf-8') if isinstance(v, str) else v))
        return urlencode(result, doseq=True)
    else:
        return data","[{""var"": ""v"", ""rename"": ""value""}, {""var"": ""vs"", ""rename"": ""value_sequence""}, {""var"": ""result"", ""rename"": ""encoded_parameters_list""}, {""var"": ""k"", ""rename"": ""key""}]"
./requests/models.py,prepare_url,construct_valid_http_url,324,396,"def prepare_url(self, url, params):
    """"""Prepares the given HTTP URL.""""""
    if isinstance(url, bytes):
        url = url.decode('utf8')
    else:
        url = unicode(url) if is_py2 else str(url)
    if ':' in url and (not url.lower().startswith('http')):
        self.url = url
        return
    try:
        scheme, auth, host, port, path, query, fragment = parse_url(url)
    except LocationParseError as e:
        raise InvalidURL(*e.args)
    if not scheme:
        error = 'Invalid URL {0!r}: No schema supplied. Perhaps you meant http://{0}?'
        error = error.format(to_native_string(url, 'utf8'))
        raise MissingSchema(error)
    if not host:
        raise InvalidURL('Invalid URL %r: No host supplied' % url)
    try:
        host = host.encode('idna').decode('utf-8')
    except UnicodeError:
        raise InvalidURL('URL has an invalid label.')
    netloc = auth or ''
    if netloc:
        netloc += '@'
    netloc += host
    if port:
        netloc += ':' + str(port)
    if not path:
        path = '/'
    if is_py2:
        if isinstance(scheme, str):
            scheme = scheme.encode('utf-8')
        if isinstance(netloc, str):
            netloc = netloc.encode('utf-8')
        if isinstance(path, str):
            path = path.encode('utf-8')
        if isinstance(query, str):
            query = query.encode('utf-8')
        if isinstance(fragment, str):
            fragment = fragment.encode('utf-8')
    enc_params = self._encode_params(params)
    if enc_params:
        if query:
            query = '%s&%s' % (query, enc_params)
        else:
            query = enc_params
    url = requote_uri(urlunparse([scheme, netloc, path, None, query, fragment]))
    self.url = url","def construct_valid_http_url(self, url, params):
    """"""Prepares the given HTTP URL.""""""
    if isinstance(url, bytes):
        url = url.decode('utf8')
    else:
        url = unicode(url) if is_py2 else str(url)
    if ':' in url and (not url.lower().startswith('http')):
        self.url = url
        return
    try:
        scheme, auth, host, port, path, query, fragment = parse_url(url)
    except LocationParseError as e:
        raise InvalidURL(*e.args)
    if not scheme:
        error = 'Invalid URL {0!r}: No schema supplied. Perhaps you meant http://{0}?'
        error = error.format(to_native_string(url, 'utf8'))
        raise MissingSchema(error)
    if not host:
        raise InvalidURL('Invalid URL %r: No host supplied' % url)
    try:
        host = host.encode('idna').decode('utf-8')
    except UnicodeError:
        raise InvalidURL('URL has an invalid label.')
    netloc = auth or ''
    if netloc:
        netloc += '@'
    netloc += host
    if port:
        netloc += ':' + str(port)
    if not path:
        path = '/'
    if is_py2:
        if isinstance(scheme, str):
            scheme = scheme.encode('utf-8')
        if isinstance(netloc, str):
            netloc = netloc.encode('utf-8')
        if isinstance(path, str):
            path = path.encode('utf-8')
        if isinstance(query, str):
            query = query.encode('utf-8')
        if isinstance(fragment, str):
            fragment = fragment.encode('utf-8')
    enc_params = self._encode_params(params)
    if enc_params:
        if query:
            query = '%s&%s' % (query, enc_params)
        else:
            query = enc_params
    url = requote_uri(urlunparse([scheme, netloc, path, None, query, fragment]))
    self.url = url","[{""var"": ""error"", ""rename"": ""url_error_message""}, {""var"": ""query"", ""rename"": ""url_query_string""}, {""var"": ""enc_params"", ""rename"": ""encoded_query_parameters""}, {""var"": ""host"", ""rename"": ""serverDomain""}, {""var"": ""port"", ""rename"": ""network_port""}, {""var"": ""path"", ""rename"": ""url_path_segment""}, {""var"": ""fragment"", ""rename"": ""url_fragment""}, {""var"": ""netloc"", ""rename"": ""network_location""}, {""var"": ""auth"", ""rename"": ""authentication_info""}, {""var"": ""scheme"", ""rename"": ""url_scheme""}]"
