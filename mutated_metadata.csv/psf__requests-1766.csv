file,method_name,new_method_name,start_line,end_line,original_code,code,var
./requests/auth.py,build_digest_header,generate_http_digest_auth_header,68,149,"def build_digest_header(self, method, url):
    realm = self.chal['realm']
    nonce = self.chal['nonce']
    qop = self.chal.get('qop')
    algorithm = self.chal.get('algorithm')
    opaque = self.chal.get('opaque')
    if algorithm is None:
        _algorithm = 'MD5'
    else:
        _algorithm = algorithm.upper()
    if _algorithm == 'MD5' or _algorithm == 'MD5-SESS':

        def md5_utf8(x):
            if isinstance(x, str):
                x = x.encode('utf-8')
            return hashlib.md5(x).hexdigest()
        hash_utf8 = md5_utf8
    elif _algorithm == 'SHA':

        def sha_utf8(x):
            if isinstance(x, str):
                x = x.encode('utf-8')
            return hashlib.sha1(x).hexdigest()
        hash_utf8 = sha_utf8
    KD = lambda s, d: hash_utf8('%s:%s' % (s, d))
    if hash_utf8 is None:
        return None
    entdig = None
    p_parsed = urlparse(url)
    path = p_parsed.path
    if p_parsed.query:
        path += '?' + p_parsed.query
    A1 = '%s:%s:%s' % (self.username, realm, self.password)
    A2 = '%s:%s' % (method, path)
    HA1 = hash_utf8(A1)
    HA2 = hash_utf8(A2)
    if nonce == self.last_nonce:
        self.nonce_count += 1
    else:
        self.nonce_count = 1
    ncvalue = '%08x' % self.nonce_count
    s = str(self.nonce_count).encode('utf-8')
    s += nonce.encode('utf-8')
    s += time.ctime().encode('utf-8')
    s += os.urandom(8)
    cnonce = hashlib.sha1(s).hexdigest()[:16]
    noncebit = '%s:%s:%s:%s:%s' % (nonce, ncvalue, cnonce, qop, HA2)
    if _algorithm == 'MD5-SESS':
        HA1 = hash_utf8('%s:%s:%s' % (HA1, nonce, cnonce))
    if qop is None:
        respdig = KD(HA1, '%s:%s' % (nonce, HA2))
    elif qop == 'auth' or 'auth' in qop.split(','):
        respdig = KD(HA1, noncebit)
    else:
        return None
    self.last_nonce = nonce
    base = 'username=""%s"", realm=""%s"", nonce=""%s"", uri=""%s"", response=""%s""' % (self.username, realm, nonce, path, respdig)
    if opaque:
        base += ', opaque=""%s""' % opaque
    if algorithm:
        base += ', algorithm=""%s""' % algorithm
    if entdig:
        base += ', digest=""%s""' % entdig
    if qop:
        base += ', qop=auth, nc=%s, cnonce=""%s""' % (ncvalue, cnonce)
    return 'Digest %s' % base","def generate_http_digest_auth_header(self, method, url):
    realm = self.chal['realm']
    nonce = self.chal['nonce']
    qop = self.chal.get('qop')
    algorithm = self.chal.get('algorithm')
    opaque = self.chal.get('opaque')
    if algorithm is None:
        _algorithm = 'MD5'
    else:
        _algorithm = algorithm.upper()
    if _algorithm == 'MD5' or _algorithm == 'MD5-SESS':

        def md5_utf8(x):
            if isinstance(x, str):
                x = x.encode('utf-8')
            return hashlib.md5(x).hexdigest()
        hash_utf8 = md5_utf8
    elif _algorithm == 'SHA':

        def sha_utf8(x):
            if isinstance(x, str):
                x = x.encode('utf-8')
            return hashlib.sha1(x).hexdigest()
        hash_utf8 = sha_utf8
    KD = lambda s, d: hash_utf8('%s:%s' % (s, d))
    if hash_utf8 is None:
        return None
    entdig = None
    p_parsed = urlparse(url)
    path = p_parsed.path
    if p_parsed.query:
        path += '?' + p_parsed.query
    A1 = '%s:%s:%s' % (self.username, realm, self.password)
    A2 = '%s:%s' % (method, path)
    HA1 = hash_utf8(A1)
    HA2 = hash_utf8(A2)
    if nonce == self.last_nonce:
        self.nonce_count += 1
    else:
        self.nonce_count = 1
    ncvalue = '%08x' % self.nonce_count
    s = str(self.nonce_count).encode('utf-8')
    s += nonce.encode('utf-8')
    s += time.ctime().encode('utf-8')
    s += os.urandom(8)
    cnonce = hashlib.sha1(s).hexdigest()[:16]
    noncebit = '%s:%s:%s:%s:%s' % (nonce, ncvalue, cnonce, qop, HA2)
    if _algorithm == 'MD5-SESS':
        HA1 = hash_utf8('%s:%s:%s' % (HA1, nonce, cnonce))
    if qop is None:
        respdig = KD(HA1, '%s:%s' % (nonce, HA2))
    elif qop == 'auth' or 'auth' in qop.split(','):
        respdig = KD(HA1, noncebit)
    else:
        return None
    self.last_nonce = nonce
    base = 'username=""%s"", realm=""%s"", nonce=""%s"", uri=""%s"", response=""%s""' % (self.username, realm, nonce, path, respdig)
    if opaque:
        base += ', opaque=""%s""' % opaque
    if algorithm:
        base += ', algorithm=""%s""' % algorithm
    if entdig:
        base += ', digest=""%s""' % entdig
    if qop:
        base += ', qop=auth, nc=%s, cnonce=""%s""' % (ncvalue, cnonce)
    return 'Digest %s' % base","[{""var"": ""algorithm"", ""rename"": ""selected_algorithm""}, {""var"": ""_algorithm"", ""rename"": ""selected_algorithm""}, {""var"": ""qop"", ""rename"": ""quality_of_protection""}, {""var"": ""noncebit"", ""rename"": ""digest_components""}, {""var"": ""HA1"", ""rename"": ""hashed_credentials_A1""}, {""var"": ""respdig"", ""rename"": ""response_digest""}, {""var"": ""base"", ""rename"": ""digest_auth_header_base""}, {""var"": ""ncvalue"", ""rename"": ""nonce_count_hex""}, {""var"": ""A2"", ""rename"": ""http_method_and_path""}, {""var"": ""p_parsed"", ""rename"": ""python\nurl_components""}, {""var"": ""cnonce"", ""rename"": ""client_nonce""}, {""var"": ""KD"", ""rename"": ""compute_response_digest""}, {""var"": ""path"", ""rename"": ""request_uri_path""}, {""var"": ""entdig"", ""rename"": ""entity_digest""}, {""var"": ""A1"", ""rename"": ""username_realm_password_triplet""}, {""var"": ""nonce"", ""rename"": ""auth_nonce_value""}, {""var"": ""hash_utf8"", ""rename"": ""digest_algorithm""}, {""var"": ""opaque"", ""rename"": ""authentication_opaque_token""}, {""var"": ""HA2"", ""rename"": ""hashedMethodAndPath""}, {""var"": ""realm"", ""rename"": ""authentication_realm""}]"
