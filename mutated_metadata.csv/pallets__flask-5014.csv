file,method_name,new_method_name,start_line,end_line,original_code,code,var
./src/flask/blueprints.py,__init__,initialize_blueprint,172,206,"def __init__(self, name: str, import_name: str, static_folder: t.Optional[t.Union[str, os.PathLike]]=None, static_url_path: t.Optional[str]=None, template_folder: t.Optional[t.Union[str, os.PathLike]]=None, url_prefix: t.Optional[str]=None, subdomain: t.Optional[str]=None, url_defaults: t.Optional[dict]=None, root_path: t.Optional[str]=None, cli_group: t.Optional[str]=_sentinel):
    super().__init__(import_name=import_name, static_folder=static_folder, static_url_path=static_url_path, template_folder=template_folder, root_path=root_path)
    if '.' in name:
        raise ValueError(""'name' may not contain a dot '.' character."")
    self.name = name
    self.url_prefix = url_prefix
    self.subdomain = subdomain
    self.deferred_functions: t.List[DeferredSetupFunction] = []
    if url_defaults is None:
        url_defaults = {}
    self.url_values_defaults = url_defaults
    self.cli_group = cli_group
    self._blueprints: t.List[t.Tuple['Blueprint', dict]] = []","def initialize_blueprint(self, name: str, import_name: str, static_folder: t.Optional[t.Union[str, os.PathLike]]=None, static_url_path: t.Optional[str]=None, template_folder: t.Optional[t.Union[str, os.PathLike]]=None, url_prefix: t.Optional[str]=None, subdomain: t.Optional[str]=None, url_defaults: t.Optional[dict]=None, root_path: t.Optional[str]=None, cli_group: t.Optional[str]=_sentinel):
    super().__init__(import_name=import_name, static_folder=static_folder, static_url_path=static_url_path, template_folder=template_folder, root_path=root_path)
    if '.' in name:
        raise ValueError(""'name' may not contain a dot '.' character."")
    self.name = name
    self.url_prefix = url_prefix
    self.subdomain = subdomain
    self.deferred_functions: t.List[DeferredSetupFunction] = []
    if url_defaults is None:
        url_defaults = {}
    self.url_values_defaults = url_defaults
    self.cli_group = cli_group
    self._blueprints: t.List[t.Tuple['Blueprint', dict]] = []",[]
