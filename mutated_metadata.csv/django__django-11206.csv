file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/utils/numberformat.py,format,format_number_with_locale,7,79,"def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='', force_grouping=False, use_l10n=None):
    """"""
    Get a number (as a number or string), and return it as a string,
    using formats defined as arguments:

    * decimal_sep: Decimal separator symbol (for example ""."")
    * decimal_pos: Number of decimal positions
    * grouping: Number of digits in every group limited by thousand separator.
        For non-uniform digit grouping, it can be a sequence with the number
        of digit group sizes following the format used by the Python locale
        module in locale.localeconv() LC_NUMERIC grouping (e.g. (3, 2, 0)).
    * thousand_sep: Thousand separator symbol (for example "","")
    """"""
    use_grouping = (use_l10n or (use_l10n is None and settings.USE_L10N)) and settings.USE_THOUSAND_SEPARATOR
    use_grouping = use_grouping or force_grouping
    use_grouping = use_grouping and grouping != 0
    if isinstance(number, int) and (not use_grouping) and (not decimal_pos):
        return mark_safe(number)
    sign = ''
    if isinstance(number, Decimal):
        _, digits, exponent = number.as_tuple()
        if abs(exponent) + len(digits) > 200:
            number = '{:e}'.format(number)
            coefficient, exponent = number.split('e')
            coefficient = format(coefficient, decimal_sep, decimal_pos, grouping, thousand_sep, force_grouping, use_l10n)
            return '{}e{}'.format(coefficient, exponent)
        else:
            str_number = '{:f}'.format(number)
    else:
        str_number = str(number)
    if str_number[0] == '-':
        sign = '-'
        str_number = str_number[1:]
    if '.' in str_number:
        int_part, dec_part = str_number.split('.')
        if decimal_pos is not None:
            dec_part = dec_part[:decimal_pos]
    else:
        int_part, dec_part = (str_number, '')
    if decimal_pos is not None:
        dec_part = dec_part + '0' * (decimal_pos - len(dec_part))
    dec_part = dec_part and decimal_sep + dec_part
    if use_grouping:
        try:
            intervals = list(grouping)
        except TypeError:
            intervals = [grouping, 0]
        active_interval = intervals.pop(0)
        int_part_gd = ''
        cnt = 0
        for digit in int_part[::-1]:
            if cnt and cnt == active_interval:
                if intervals:
                    active_interval = intervals.pop(0) or active_interval
                int_part_gd += thousand_sep[::-1]
                cnt = 0
            int_part_gd += digit
            cnt += 1
        int_part = int_part_gd[::-1]
    return sign + int_part + dec_part","def format_number_with_locale(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='', force_grouping=False, use_l10n=None):
    """"""
    Get a number (as a number or string), and return it as a string,
    using formats defined as arguments:

    * decimal_sep: Decimal separator symbol (for example ""."")
    * decimal_pos: Number of decimal positions
    * grouping: Number of digits in every group limited by thousand separator.
        For non-uniform digit grouping, it can be a sequence with the number
        of digit group sizes following the format used by the Python locale
        module in locale.localeconv() LC_NUMERIC grouping (e.g. (3, 2, 0)).
    * thousand_sep: Thousand separator symbol (for example "","")
    """"""
    use_grouping = (use_l10n or (use_l10n is None and settings.USE_L10N)) and settings.USE_THOUSAND_SEPARATOR
    use_grouping = use_grouping or force_grouping
    use_grouping = use_grouping and grouping != 0
    if isinstance(number, int) and (not use_grouping) and (not decimal_pos):
        return mark_safe(number)
    sign = ''
    if isinstance(number, Decimal):
        _, digits, exponent = number.as_tuple()
        if abs(exponent) + len(digits) > 200:
            number = '{:e}'.format(number)
            coefficient, exponent = number.split('e')
            coefficient = format(coefficient, decimal_sep, decimal_pos, grouping, thousand_sep, force_grouping, use_l10n)
            return '{}e{}'.format(coefficient, exponent)
        else:
            str_number = '{:f}'.format(number)
    else:
        str_number = str(number)
    if str_number[0] == '-':
        sign = '-'
        str_number = str_number[1:]
    if '.' in str_number:
        int_part, dec_part = str_number.split('.')
        if decimal_pos is not None:
            dec_part = dec_part[:decimal_pos]
    else:
        int_part, dec_part = (str_number, '')
    if decimal_pos is not None:
        dec_part = dec_part + '0' * (decimal_pos - len(dec_part))
    dec_part = dec_part and decimal_sep + dec_part
    if use_grouping:
        try:
            intervals = list(grouping)
        except TypeError:
            intervals = [grouping, 0]
        active_interval = intervals.pop(0)
        int_part_gd = ''
        cnt = 0
        for digit in int_part[::-1]:
            if cnt and cnt == active_interval:
                if intervals:
                    active_interval = intervals.pop(0) or active_interval
                int_part_gd += thousand_sep[::-1]
                cnt = 0
            int_part_gd += digit
            cnt += 1
        int_part = int_part_gd[::-1]
    return sign + int_part + dec_part","[{""var"": ""active_interval"", ""rename"": ""current_grouping_interval""}, {""var"": ""int_part_gd"", ""rename"": ""grouped_int_part""}, {""var"": ""intervals"", ""rename"": ""digit_group_intervals""}, {""var"": ""use_grouping"", ""rename"": ""apply_thousand_separator""}, {""var"": ""int_part"", ""rename"": ""integer_component""}, {""var"": ""_"", ""rename"": ""formatted_number_string""}, {""var"": ""cnt"", ""rename"": ""digit_counter""}, {""var"": ""digit"", ""rename"": ""single_digit""}, {""var"": ""str_number"", ""rename"": ""formatted_number_str""}, {""var"": ""exponent"", ""rename"": ""decimal_exponent""}, {""var"": ""sign"", ""rename"": ""number_sign""}, {""var"": ""dec_part"", ""rename"": ""decimal_fraction""}, {""var"": ""digits"", ""rename"": ""number_digits""}, {""var"": ""coefficient"", ""rename"": ""formatted_coefficient""}]"
