file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/forms/formsets.py,full_clean,validate_and_clean_forms,330,383,"def full_clean(self):
    """"""
        Clean all of self.data and populate self._errors and
        self._non_form_errors.
        """"""
    self._errors = []
    self._non_form_errors = self.error_class()
    empty_forms_count = 0
    if not self.is_bound:
        return
    if not self.management_form.is_valid():
        error = ValidationError(self.error_messages['missing_management_form'], params={'field_names': ', '.join((self.management_form.add_prefix(field_name) for field_name in self.management_form.errors))}, code='missing_management_form')
        self._non_form_errors.append(error)
    for i, form in enumerate(self.forms):
        if not form.has_changed() and i >= self.initial_form_count():
            empty_forms_count += 1
        form_errors = form.errors
        if self.can_delete and self._should_delete_form(form):
            continue
        self._errors.append(form_errors)
    try:
        if self.validate_max and self.total_form_count() - len(self.deleted_forms) > self.max_num or self.management_form.cleaned_data[TOTAL_FORM_COUNT] > self.absolute_max:
            raise ValidationError(ngettext('Please submit at most %d form.', 'Please submit at most %d forms.', self.max_num) % self.max_num, code='too_many_forms')
        if self.validate_min and self.total_form_count() - len(self.deleted_forms) - empty_forms_count < self.min_num:
            raise ValidationError(ngettext('Please submit at least %d form.', 'Please submit at least %d forms.', self.min_num) % self.min_num, code='too_few_forms')
        self.clean()
    except ValidationError as e:
        self._non_form_errors = self.error_class(e.error_list)","def validate_and_clean_forms(self):
    """"""
        Clean all of self.data and populate self._errors and
        self._non_form_errors.
        """"""
    self._errors = []
    self._non_form_errors = self.error_class()
    empty_forms_count = 0
    if not self.is_bound:
        return
    if not self.management_form.is_valid():
        error = ValidationError(self.error_messages['missing_management_form'], params={'field_names': ', '.join((self.management_form.add_prefix(field_name) for field_name in self.management_form.errors))}, code='missing_management_form')
        self._non_form_errors.append(error)
    for i, form in enumerate(self.forms):
        if not form.has_changed() and i >= self.initial_form_count():
            empty_forms_count += 1
        form_errors = form.errors
        if self.can_delete and self._should_delete_form(form):
            continue
        self._errors.append(form_errors)
    try:
        if self.validate_max and self.total_form_count() - len(self.deleted_forms) > self.max_num or self.management_form.cleaned_data[TOTAL_FORM_COUNT] > self.absolute_max:
            raise ValidationError(ngettext('Please submit at most %d form.', 'Please submit at most %d forms.', self.max_num) % self.max_num, code='too_many_forms')
        if self.validate_min and self.total_form_count() - len(self.deleted_forms) - empty_forms_count < self.min_num:
            raise ValidationError(ngettext('Please submit at least %d form.', 'Please submit at least %d forms.', self.min_num) % self.min_num, code='too_few_forms')
        self.clean()
    except ValidationError as e:
        self._non_form_errors = self.error_class(e.error_list)","[{""var"": ""error"", ""rename"": ""validation_error""}, {""var"": ""form_errors"", ""rename"": ""individual_form_errors""}, {""var"": ""i"", ""rename"": ""form_index""}, {""var"": ""empty_forms_count"", ""rename"": ""unchanged_forms_counter""}, {""var"": ""field_name"", ""rename"": ""management_form_field_name""}, {""var"": ""form"", ""rename"": ""input_form_data""}]"
./django/forms/formsets.py,clean,perform_formset_wide_cleaning,385,392,"def clean(self):
    """"""
        Hook for doing any extra formset-wide cleaning after Form.clean() has
        been called on every form. Any ValidationError raised by this method
        will not be associated with a particular form; it will be accessible
        via formset.non_form_errors()
        """"""
    pass","def perform_formset_wide_cleaning(self):
    """"""
        Hook for doing any extra formset-wide cleaning after Form.clean() has
        been called on every form. Any ValidationError raised by this method
        will not be associated with a particular form; it will be accessible
        via formset.non_form_errors()
        """"""
    pass",[]
