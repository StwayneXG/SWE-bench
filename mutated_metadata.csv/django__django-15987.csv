file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/core/management/commands/loaddata.py,fixture_dirs,collect_fixture_directories,355,383,"@cached_property
def fixture_dirs(self):
    """"""
        Return a list of fixture directories.

        The list contains the 'fixtures' subdirectory of each installed
        application, if it exists, the directories in FIXTURE_DIRS, and the
        current directory.
        """"""
    dirs = []
    fixture_dirs = settings.FIXTURE_DIRS
    if len(fixture_dirs) != len(set(fixture_dirs)):
        raise ImproperlyConfigured('settings.FIXTURE_DIRS contains duplicates.')
    for app_config in apps.get_app_configs():
        app_label = app_config.label
        app_dir = os.path.join(app_config.path, 'fixtures')
        if app_dir in fixture_dirs:
            raise ImproperlyConfigured(""'%s' is a default fixture directory for the '%s' app and cannot be listed in settings.FIXTURE_DIRS."" % (app_dir, app_label))
        if self.app_label and app_label != self.app_label:
            continue
        if os.path.isdir(app_dir):
            dirs.append(app_dir)
    dirs.extend(fixture_dirs)
    dirs.append('')
    return [os.path.realpath(d) for d in dirs]","@cached_property
def collect_fixture_directories(self):
    """"""
        Return a list of fixture directories.

        The list contains the 'fixtures' subdirectory of each installed
        application, if it exists, the directories in FIXTURE_DIRS, and the
        current directory.
        """"""
    dirs = []
    fixture_dirs = settings.FIXTURE_DIRS
    if len(fixture_dirs) != len(set(fixture_dirs)):
        raise ImproperlyConfigured('settings.FIXTURE_DIRS contains duplicates.')
    for app_config in apps.get_app_configs():
        app_label = app_config.label
        app_dir = os.path.join(app_config.path, 'fixtures')
        if app_dir in fixture_dirs:
            raise ImproperlyConfigured(""'%s' is a default fixture directory for the '%s' app and cannot be listed in settings.FIXTURE_DIRS."" % (app_dir, app_label))
        if self.app_label and app_label != self.app_label:
            continue
        if os.path.isdir(app_dir):
            dirs.append(app_dir)
    dirs.extend(fixture_dirs)
    dirs.append('')
    return [os.path.realpath(d) for d in dirs]","[{""var"": ""d"", ""rename"": ""real_fixture_dirs""}, {""var"": ""dirs"", ""rename"": ""fixture_directory_list""}, {""var"": ""app_config"", ""rename"": ""application_configuration""}, {""var"": ""fixture_dirs"", ""rename"": ""fixture_directory_list""}, {""var"": ""app_label"", ""rename"": ""application_label""}, {""var"": ""app_dir"", ""rename"": ""application_fixture_dir""}]"
