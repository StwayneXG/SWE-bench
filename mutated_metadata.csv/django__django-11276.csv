file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/utils/html.py,escape,encode_text_for_html_usage,37,46,"@keep_lazy(str, SafeString)
def escape(text):
    """"""
    Return the given text with ampersands, quotes and angle brackets encoded
    for use in HTML.

    Always escape input, even if it's already escaped and marked as such.
    This may result in double-escaping. If this is a concern, use
    conditional_escape() instead.
    """"""
    return mark_safe(str(text).translate(_html_escapes))","@keep_lazy(str, SafeString)
def encode_text_for_html_usage(text):
    """"""
    Return the given text with ampersands, quotes and angle brackets encoded
    for use in HTML.

    Always escape input, even if it's already escaped and marked as such.
    This may result in double-escaping. If this is a concern, use
    conditional_escape() instead.
    """"""
    return mark_safe(str(text).translate(_html_escapes))",[]
./django/utils/html.py,urlize,convert_text_to_clickable_links,239,361,"@keep_lazy_text
def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):
    """"""
    Convert any URLs in text into clickable links.

    Works on http://, https://, www. links, and also on links ending in one of
    the original seven gTLDs (.com, .edu, .gov, .int, .mil, .net, and .org).
    Links can have trailing punctuation (periods, commas, close-parens) and
    leading punctuation (opening parens) and it'll still do the right thing.

    If trim_url_limit is not None, truncate the URLs in the link text longer
    than this limit to trim_url_limit - 1 characters and append an ellipsis.

    If nofollow is True, give the links a rel=""nofollow"" attribute.

    If autoescape is True, autoescape the link text and URLs.
    """"""
    safe_input = isinstance(text, SafeData)

    def trim_url(x, limit=trim_url_limit):
        if limit is None or len(x) <= limit:
            return x
        return '%s…' % x[:max(0, limit - 1)]

    def unescape(text):
        """"""
        If input URL is HTML-escaped, unescape it so that it can be safely fed
        to smart_urlquote. For example:
        http://example.com?x=1&amp;y=&lt;2&gt; => http://example.com?x=1&y=<2>
        """"""
        return text.replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>').replace('&quot;', '""').replace('&#39;', ""'"")

    def trim_punctuation(lead, middle, trail):
        """"""
        Trim trailing and wrapping punctuation from `middle`. Return the items
        of the new state.
        """"""
        trimmed_something = True
        while trimmed_something:
            trimmed_something = False
            for opening, closing in WRAPPING_PUNCTUATION:
                if middle.startswith(opening):
                    middle = middle[len(opening):]
                    lead += opening
                    trimmed_something = True
                if middle.endswith(closing) and middle.count(closing) == middle.count(opening) + 1:
                    middle = middle[:-len(closing)]
                    trail = closing + trail
                    trimmed_something = True
            middle_unescaped = unescape(middle)
            stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
            if middle_unescaped != stripped:
                trail = middle[len(stripped):] + trail
                middle = middle[:len(stripped) - len(middle_unescaped)]
                trimmed_something = True
        return (lead, middle, trail)

    def is_email_simple(value):
        """"""Return True if value looks like an email address.""""""
        if '@' not in value or value.startswith('@') or value.endswith('@'):
            return False
        try:
            p1, p2 = value.split('@')
        except ValueError:
            return False
        if '.' not in p2 or p2.startswith('.'):
            return False
        return True
    words = word_split_re.split(str(text))
    for i, word in enumerate(words):
        if '.' in word or '@' in word or ':' in word:
            lead, middle, trail = ('', word, '')
            lead, middle, trail = trim_punctuation(lead, middle, trail)
            url = None
            nofollow_attr = ' rel=""nofollow""' if nofollow else ''
            if simple_url_re.match(middle):
                url = smart_urlquote(unescape(middle))
            elif simple_url_2_re.match(middle):
                url = smart_urlquote('http://%s' % unescape(middle))
            elif ':' not in middle and is_email_simple(middle):
                local, domain = middle.rsplit('@', 1)
                try:
                    domain = domain.encode('idna').decode('ascii')
                except UnicodeError:
                    continue
                url = 'mailto:%s@%s' % (local, domain)
                nofollow_attr = ''
            if url:
                trimmed = trim_url(middle)
                if autoescape and (not safe_input):
                    lead, trail = (escape(lead), escape(trail))
                    trimmed = escape(trimmed)
                middle = '<a href=""%s""%s>%s</a>' % (escape(url), nofollow_attr, trimmed)
                words[i] = mark_safe('%s%s%s' % (lead, middle, trail))
            elif safe_input:
                words[i] = mark_safe(word)
            elif autoescape:
                words[i] = escape(word)
        elif safe_input:
            words[i] = mark_safe(word)
        elif autoescape:
            words[i] = escape(word)
    return ''.join(words)","@keep_lazy_text
def convert_text_to_clickable_links(text, trim_url_limit=None, nofollow=False, autoescape=False):
    """"""
    Convert any URLs in text into clickable links.

    Works on http://, https://, www. links, and also on links ending in one of
    the original seven gTLDs (.com, .edu, .gov, .int, .mil, .net, and .org).
    Links can have trailing punctuation (periods, commas, close-parens) and
    leading punctuation (opening parens) and it'll still do the right thing.

    If trim_url_limit is not None, truncate the URLs in the link text longer
    than this limit to trim_url_limit - 1 characters and append an ellipsis.

    If nofollow is True, give the links a rel=""nofollow"" attribute.

    If autoescape is True, autoescape the link text and URLs.
    """"""
    safe_input = isinstance(text, SafeData)

    def trim_url(x, limit=trim_url_limit):
        if limit is None or len(x) <= limit:
            return x
        return '%s…' % x[:max(0, limit - 1)]

    def unescape(text):
        """"""
        If input URL is HTML-escaped, unescape it so that it can be safely fed
        to smart_urlquote. For example:
        http://example.com?x=1&amp;y=&lt;2&gt; => http://example.com?x=1&y=<2>
        """"""
        return text.replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>').replace('&quot;', '""').replace('&#39;', ""'"")

    def trim_punctuation(lead, middle, trail):
        """"""
        Trim trailing and wrapping punctuation from `middle`. Return the items
        of the new state.
        """"""
        trimmed_something = True
        while trimmed_something:
            trimmed_something = False
            for opening, closing in WRAPPING_PUNCTUATION:
                if middle.startswith(opening):
                    middle = middle[len(opening):]
                    lead += opening
                    trimmed_something = True
                if middle.endswith(closing) and middle.count(closing) == middle.count(opening) + 1:
                    middle = middle[:-len(closing)]
                    trail = closing + trail
                    trimmed_something = True
            middle_unescaped = unescape(middle)
            stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
            if middle_unescaped != stripped:
                trail = middle[len(stripped):] + trail
                middle = middle[:len(stripped) - len(middle_unescaped)]
                trimmed_something = True
        return (lead, middle, trail)

    def is_email_simple(value):
        """"""Return True if value looks like an email address.""""""
        if '@' not in value or value.startswith('@') or value.endswith('@'):
            return False
        try:
            p1, p2 = value.split('@')
        except ValueError:
            return False
        if '.' not in p2 or p2.startswith('.'):
            return False
        return True
    words = word_split_re.split(str(text))
    for i, word in enumerate(words):
        if '.' in word or '@' in word or ':' in word:
            lead, middle, trail = ('', word, '')
            lead, middle, trail = trim_punctuation(lead, middle, trail)
            url = None
            nofollow_attr = ' rel=""nofollow""' if nofollow else ''
            if simple_url_re.match(middle):
                url = smart_urlquote(unescape(middle))
            elif simple_url_2_re.match(middle):
                url = smart_urlquote('http://%s' % unescape(middle))
            elif ':' not in middle and is_email_simple(middle):
                local, domain = middle.rsplit('@', 1)
                try:
                    domain = domain.encode('idna').decode('ascii')
                except UnicodeError:
                    continue
                url = 'mailto:%s@%s' % (local, domain)
                nofollow_attr = ''
            if url:
                trimmed = trim_url(middle)
                if autoescape and (not safe_input):
                    lead, trail = (escape(lead), escape(trail))
                    trimmed = escape(trimmed)
                middle = '<a href=""%s""%s>%s</a>' % (escape(url), nofollow_attr, trimmed)
                words[i] = mark_safe('%s%s%s' % (lead, middle, trail))
            elif safe_input:
                words[i] = mark_safe(word)
            elif autoescape:
                words[i] = escape(word)
        elif safe_input:
            words[i] = mark_safe(word)
        elif autoescape:
            words[i] = escape(word)
    return ''.join(words)","[{""var"": ""stripped"", ""rename"": ""unescaped_trimmed_text""}, {""var"": ""url"", ""rename"": ""clickable_url""}, {""var"": ""middle_unescaped"", ""rename"": ""unescaped_middle_text""}, {""var"": ""words"", ""rename"": ""text_components""}, {""var"": ""local"", ""rename"": ""local_part_of_email""}, {""var"": ""p1"", ""rename"": ""email_local_part""}, {""var"": ""i"", ""rename"": ""word_index""}, {""var"": ""closing"", ""rename"": ""closing_punctuations""}, {""var"": ""trimmed"", ""rename"": ""truncated_url_text""}, {""var"": ""trimmed_something"", ""rename"": ""punctuation_trimmed""}, {""var"": ""p2"", ""rename"": ""email_domain_part""}, {""var"": ""domain"", ""rename"": ""email_domain_part""}, {""var"": ""opening"", ""rename"": ""wrapping_punctuation_open""}, {""var"": ""safe_input"", ""rename"": ""is_safe_data""}, {""var"": ""nofollow_attr"", ""rename"": ""nofollow_rel_attribute""}, {""var"": ""word"", ""rename"": ""text_segment""}]"
./django/utils/html.py,trim_punctuation,remove_wrapping_and_trailing_punctuation,271,301,"def trim_punctuation(lead, middle, trail):
    """"""
        Trim trailing and wrapping punctuation from `middle`. Return the items
        of the new state.
        """"""
    trimmed_something = True
    while trimmed_something:
        trimmed_something = False
        for opening, closing in WRAPPING_PUNCTUATION:
            if middle.startswith(opening):
                middle = middle[len(opening):]
                lead += opening
                trimmed_something = True
            if middle.endswith(closing) and middle.count(closing) == middle.count(opening) + 1:
                middle = middle[:-len(closing)]
                trail = closing + trail
                trimmed_something = True
        middle_unescaped = unescape(middle)
        stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
        if middle_unescaped != stripped:
            trail = middle[len(stripped):] + trail
            middle = middle[:len(stripped) - len(middle_unescaped)]
            trimmed_something = True
    return (lead, middle, trail)","def remove_wrapping_and_trailing_punctuation(lead, middle, trail):
    """"""
        Trim trailing and wrapping punctuation from `middle`. Return the items
        of the new state.
        """"""
    trimmed_something = True
    while trimmed_something:
        trimmed_something = False
        for opening, closing in WRAPPING_PUNCTUATION:
            if middle.startswith(opening):
                middle = middle[len(opening):]
                lead += opening
                trimmed_something = True
            if middle.endswith(closing) and middle.count(closing) == middle.count(opening) + 1:
                middle = middle[:-len(closing)]
                trail = closing + trail
                trimmed_something = True
        middle_unescaped = unescape(middle)
        stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
        if middle_unescaped != stripped:
            trail = middle[len(stripped):] + trail
            middle = middle[:len(stripped) - len(middle_unescaped)]
            trimmed_something = True
    return (lead, middle, trail)","[{""var"": ""stripped"", ""rename"": ""punctuation_trimmed_middle""}, {""var"": ""middle_unescaped"", ""rename"": ""unescaped_middle_segment""}, {""var"": ""closing"", ""rename"": ""closing_punctuations""}, {""var"": ""trimmed_something"", ""rename"": ""punctuation_trimmed""}, {""var"": ""opening"", ""rename"": ""wrapping_start""}]"
./django/utils/html.py,is_email_simple,validate_basic_email_format,303,316,"def is_email_simple(value):
    """"""Return True if value looks like an email address.""""""
    if '@' not in value or value.startswith('@') or value.endswith('@'):
        return False
    try:
        p1, p2 = value.split('@')
    except ValueError:
        return False
    if '.' not in p2 or p2.startswith('.'):
        return False
    return True","def validate_basic_email_format(value):
    """"""Return True if value looks like an email address.""""""
    if '@' not in value or value.startswith('@') or value.endswith('@'):
        return False
    try:
        p1, p2 = value.split('@')
    except ValueError:
        return False
    if '.' not in p2 or p2.startswith('.'):
        return False
    return True","[{""var"": ""p2"", ""rename"": ""domain_part""}, {""var"": ""p1"", ""rename"": ""local_part""}]"
