file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sympy/functions/elementary/hyperbolic.py,eval,evaluate_hyperbolic_identity,557,607,"@classmethod
def eval(cls, arg):
    from sympy import cot
    arg = sympify(arg)
    if arg.is_Number:
        if arg is S.NaN:
            return S.NaN
        elif arg is S.Infinity:
            return S.One
        elif arg is S.NegativeInfinity:
            return S.NegativeOne
        elif arg is S.Zero:
            return S.ComplexInfinity
        elif arg.is_negative:
            return -cls(-arg)
    else:
        if arg is S.ComplexInfinity:
            return S.NaN
        i_coeff = arg.as_coefficient(S.ImaginaryUnit)
        if i_coeff is not None:
            if _coeff_isneg(i_coeff):
                return S.ImaginaryUnit * cot(-i_coeff)
            return -S.ImaginaryUnit * cot(i_coeff)
        elif _coeff_isneg(arg):
            return -cls(-arg)
        if arg.is_Add:
            x, m = _peeloff_ipi(arg)
            if m:
                cothm = coth(m)
                if cotm is S.ComplexInfinity:
                    return coth(x)
                else:
                    return tanh(x)
        if arg.func == asinh:
            x = arg.args[0]
            return sqrt(1 + x ** 2) / x
        if arg.func == acosh:
            x = arg.args[0]
            return x / (sqrt(x - 1) * sqrt(x + 1))
        if arg.func == atanh:
            return 1 / arg.args[0]
        if arg.func == acoth:
            return arg.args[0]","@classmethod
def evaluate_hyperbolic_identity(cls, arg):
    from sympy import cot
    arg = sympify(arg)
    if arg.is_Number:
        if arg is S.NaN:
            return S.NaN
        elif arg is S.Infinity:
            return S.One
        elif arg is S.NegativeInfinity:
            return S.NegativeOne
        elif arg is S.Zero:
            return S.ComplexInfinity
        elif arg.is_negative:
            return -cls(-arg)
    else:
        if arg is S.ComplexInfinity:
            return S.NaN
        i_coeff = arg.as_coefficient(S.ImaginaryUnit)
        if i_coeff is not None:
            if _coeff_isneg(i_coeff):
                return S.ImaginaryUnit * cot(-i_coeff)
            return -S.ImaginaryUnit * cot(i_coeff)
        elif _coeff_isneg(arg):
            return -cls(-arg)
        if arg.is_Add:
            x, m = _peeloff_ipi(arg)
            if m:
                cothm = coth(m)
                if cotm is S.ComplexInfinity:
                    return coth(x)
                else:
                    return tanh(x)
        if arg.func == asinh:
            x = arg.args[0]
            return sqrt(1 + x ** 2) / x
        if arg.func == acosh:
            x = arg.args[0]
            return x / (sqrt(x - 1) * sqrt(x + 1))
        if arg.func == atanh:
            return 1 / arg.args[0]
        if arg.func == acoth:
            return arg.args[0]","[{""var"": ""x"", ""rename"": ""argument_value""}, {""var"": ""i_coeff"", ""rename"": ""imaginary_coefficient""}, {""var"": ""cothm"", ""rename"": ""complex_hyperbolic_evaluation""}, {""var"": ""m"", ""rename"": ""pi_coefficient""}]"
