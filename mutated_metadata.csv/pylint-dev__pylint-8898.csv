file,method_name,new_method_name,start_line,end_line,original_code,code,var
./pylint/config/argument.py,_regexp_csv_transfomer,transform_csv_to_regex_patterns,114,119,"def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:
    """"""Transforms a comma separated list of regular expressions.""""""
    patterns: list[Pattern[str]] = []
    for pattern in _csv_transformer(value):
        patterns.append(_regex_transformer(pattern))
    return patterns","def transform_csv_to_regex_patterns(value: str) -> Sequence[Pattern[str]]:
    """"""Transforms a comma separated list of regular expressions.""""""
    patterns: list[Pattern[str]] = []
    for pattern in _csv_transformer(value):
        patterns.append(_regex_transformer(pattern))
    return patterns","[{""var"": ""patterns"", ""rename"": ""regexPatternList""}, {""var"": ""pattern"", ""rename"": ""regex_pattern_segment""}]"
./pylint/utils/utils.py,_comment,format_as_comment_block,256,260,"def _comment(string: str) -> str:
    """"""Return string as a comment.""""""
    lines = [line.strip() for line in string.splitlines()]
    sep = '\n'
    return '# ' + f'{sep}# '.join(lines)","def format_as_comment_block(string: str) -> str:
    """"""Return string as a comment.""""""
    lines = [line.strip() for line in string.splitlines()]
    sep = '\n'
    return '# ' + f'{sep}# '.join(lines)","[{""var"": ""line"", ""rename"": ""stripped_line""}, {""var"": ""lines"", ""rename"": ""comment_lines""}, {""var"": ""sep"", ""rename"": ""line_separator""}]"
./pylint/utils/utils.py,_format_option_value,convert_compiled_value_to_string,263,281,"def _format_option_value(optdict: OptionDict, value: Any) -> str:
    """"""Return the user input's value from a 'compiled' value.

    TODO: Refactor the code to not use this deprecated function
    """"""
    if optdict.get('type', None) == 'py_version':
        value = '.'.join((str(item) for item in value))
    elif isinstance(value, (list, tuple)):
        value = ','.join((_format_option_value(optdict, item) for item in value))
    elif isinstance(value, dict):
        value = ','.join((f'{k}:{v}' for k, v in value.items()))
    elif hasattr(value, 'match'):
        value = value.pattern
    elif optdict.get('type') == 'yn':
        value = 'yes' if value else 'no'
    elif isinstance(value, str) and value.isspace():
        value = f""'{value}'""
    return str(value)","def convert_compiled_value_to_string(optdict: OptionDict, value: Any) -> str:
    """"""Return the user input's value from a 'compiled' value.

    TODO: Refactor the code to not use this deprecated function
    """"""
    if optdict.get('type', None) == 'py_version':
        value = '.'.join((str(item) for item in value))
    elif isinstance(value, (list, tuple)):
        value = ','.join((_format_option_value(optdict, item) for item in value))
    elif isinstance(value, dict):
        value = ','.join((f'{k}:{v}' for k, v in value.items()))
    elif hasattr(value, 'match'):
        value = value.pattern
    elif optdict.get('type') == 'yn':
        value = 'yes' if value else 'no'
    elif isinstance(value, str) and value.isspace():
        value = f""'{value}'""
    return str(value)","[{""var"": ""v"", ""rename"": ""formatted_value""}, {""var"": ""k"", ""rename"": ""key_value_pair""}, {""var"": ""item"", ""rename"": ""component""}]"
