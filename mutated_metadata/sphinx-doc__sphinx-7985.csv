file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sphinx/builders/linkcheck.py,check_thread,process_uri_link_check,112,247,"def check_thread(self) -> None:
    kwargs = {'allow_redirects': True}
    if self.app.config.linkcheck_timeout:
        kwargs['timeout'] = self.app.config.linkcheck_timeout

    def get_request_headers() -> Dict:
        url = urlparse(uri)
        candidates = ['%s://%s' % (url.scheme, url.netloc), '%s://%s/' % (url.scheme, url.netloc), uri, '*']
        for u in candidates:
            if u in self.config.linkcheck_request_headers:
                headers = dict(DEFAULT_REQUEST_HEADERS)
                headers.update(self.config.linkcheck_request_headers[u])
                return headers
        return {}

    def check_uri() -> Tuple[str, str, int]:
        if '#' in uri:
            req_url, anchor = uri.split('#', 1)
            for rex in self.anchors_ignore:
                if rex.match(anchor):
                    anchor = None
                    break
        else:
            req_url = uri
            anchor = None
        try:
            req_url.encode('ascii')
        except UnicodeError:
            req_url = encode_uri(req_url)
        for pattern, auth_info in self.auth:
            if pattern.match(uri):
                break
        else:
            auth_info = None
        kwargs['headers'] = get_request_headers()
        try:
            if anchor and self.app.config.linkcheck_anchors:
                response = requests.get(req_url, stream=True, config=self.app.config, auth=auth_info, **kwargs)
                found = check_anchor(response, unquote(anchor))
                if not found:
                    raise Exception(__(""Anchor '%s' not found"") % anchor)
            else:
                try:
                    response = requests.head(req_url, config=self.app.config, auth=auth_info, **kwargs)
                    response.raise_for_status()
                except HTTPError:
                    response = requests.get(req_url, stream=True, config=self.app.config, auth=auth_info, **kwargs)
                    response.raise_for_status()
        except HTTPError as err:
            if err.response.status_code == 401:
                return ('working', ' - unauthorized', 0)
            elif err.response.status_code == 503:
                return ('ignored', str(err), 0)
            else:
                return ('broken', str(err), 0)
        except Exception as err:
            if is_ssl_error(err):
                return ('ignored', str(err), 0)
            else:
                return ('broken', str(err), 0)
        if response.url.rstrip('/') == req_url.rstrip('/'):
            return ('working', '', 0)
        else:
            new_url = response.url
            if anchor:
                new_url += '#' + anchor
            if response.history:
                code = response.history[-1].status_code
                return ('redirected', new_url, code)
            else:
                return ('redirected', new_url, 0)

    def check() -> Tuple[str, str, int]:
        if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):
            return ('unchecked', '', 0)
        elif not uri.startswith(('http:', 'https:')):
            return ('local', '', 0)
        elif uri in self.good:
            return ('working', 'old', 0)
        elif uri in self.broken:
            return ('broken', self.broken[uri], 0)
        elif uri in self.redirected:
            return ('redirected', self.redirected[uri][0], self.redirected[uri][1])
        for rex in self.to_ignore:
            if rex.match(uri):
                return ('ignored', '', 0)
        for _ in range(self.app.config.linkcheck_retries):
            status, info, code = check_uri()
            if status != 'broken':
                break
        if status == 'working':
            self.good.add(uri)
        elif status == 'broken':
            self.broken[uri] = info
        elif status == 'redirected':
            self.redirected[uri] = (info, code)
        return (status, info, code)
    while True:
        uri, docname, lineno = self.wqueue.get()
        if uri is None:
            break
        status, info, code = check()
        self.rqueue.put((uri, docname, lineno, status, info, code))","def process_uri_link_check(self) -> None:
    kwargs = {'allow_redirects': True}
    if self.app.config.linkcheck_timeout:
        kwargs['timeout'] = self.app.config.linkcheck_timeout

    def get_request_headers() -> Dict:
        url = urlparse(uri)
        candidates = ['%s://%s' % (url.scheme, url.netloc), '%s://%s/' % (url.scheme, url.netloc), uri, '*']
        for u in candidates:
            if u in self.config.linkcheck_request_headers:
                headers = dict(DEFAULT_REQUEST_HEADERS)
                headers.update(self.config.linkcheck_request_headers[u])
                return headers
        return {}

    def check_uri() -> Tuple[str, str, int]:
        if '#' in uri:
            req_url, anchor = uri.split('#', 1)
            for rex in self.anchors_ignore:
                if rex.match(anchor):
                    anchor = None
                    break
        else:
            req_url = uri
            anchor = None
        try:
            req_url.encode('ascii')
        except UnicodeError:
            req_url = encode_uri(req_url)
        for pattern, auth_info in self.auth:
            if pattern.match(uri):
                break
        else:
            auth_info = None
        kwargs['headers'] = get_request_headers()
        try:
            if anchor and self.app.config.linkcheck_anchors:
                response = requests.get(req_url, stream=True, config=self.app.config, auth=auth_info, **kwargs)
                found = check_anchor(response, unquote(anchor))
                if not found:
                    raise Exception(__(""Anchor '%s' not found"") % anchor)
            else:
                try:
                    response = requests.head(req_url, config=self.app.config, auth=auth_info, **kwargs)
                    response.raise_for_status()
                except HTTPError:
                    response = requests.get(req_url, stream=True, config=self.app.config, auth=auth_info, **kwargs)
                    response.raise_for_status()
        except HTTPError as err:
            if err.response.status_code == 401:
                return ('working', ' - unauthorized', 0)
            elif err.response.status_code == 503:
                return ('ignored', str(err), 0)
            else:
                return ('broken', str(err), 0)
        except Exception as err:
            if is_ssl_error(err):
                return ('ignored', str(err), 0)
            else:
                return ('broken', str(err), 0)
        if response.url.rstrip('/') == req_url.rstrip('/'):
            return ('working', '', 0)
        else:
            new_url = response.url
            if anchor:
                new_url += '#' + anchor
            if response.history:
                code = response.history[-1].status_code
                return ('redirected', new_url, code)
            else:
                return ('redirected', new_url, 0)

    def check() -> Tuple[str, str, int]:
        if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):
            return ('unchecked', '', 0)
        elif not uri.startswith(('http:', 'https:')):
            return ('local', '', 0)
        elif uri in self.good:
            return ('working', 'old', 0)
        elif uri in self.broken:
            return ('broken', self.broken[uri], 0)
        elif uri in self.redirected:
            return ('redirected', self.redirected[uri][0], self.redirected[uri][1])
        for rex in self.to_ignore:
            if rex.match(uri):
                return ('ignored', '', 0)
        for _ in range(self.app.config.linkcheck_retries):
            status, info, code = check_uri()
            if status != 'broken':
                break
        if status == 'working':
            self.good.add(uri)
        elif status == 'broken':
            self.broken[uri] = info
        elif status == 'redirected':
            self.redirected[uri] = (info, code)
        return (status, info, code)
    while True:
        uri, docname, lineno = self.wqueue.get()
        if uri is None:
            break
        status, info, code = check()
        self.rqueue.put((uri, docname, lineno, status, info, code))","[{""var"": ""url"", ""rename"": ""The variable `url` is being used to represent a parsed URL object containing components like scheme and netloc. To make the name more meaningful and distinct from Python's built-in functionalities, the name could reflect its purpose related to URL parsing and request header""}, {""var"": ""anchor"", ""rename"": ""uri_anchor""}, {""var"": ""lineno"", ""rename"": ""line_number""}, {""var"": ""pattern"", ""rename"": ""auth_pattern""}, {""var"": ""info"", ""rename"": ""link_check_status_info""}, {""var"": ""status"", ""rename"": ""link_check_status""}, {""var"": ""found"", ""rename"": ""anchor_found""}, {""var"": ""new_url"", ""rename"": ""redirected_url_with_anchor""}, {""var"": ""code"", ""rename"": ""http_status_code""}, {""var"": ""kwargs"", ""rename"": ""http_request_options""}, {""var"": ""uri"", ""rename"": ""resource_uri""}, {""var"": ""docname"", ""rename"": ""document_identifier""}, {""var"": ""candidates"", ""rename"": ""url_variants""}, {""var"": ""auth_info"", ""rename"": ""authentication_credentials""}, {""var"": ""rex"", ""rename"": ""anchor_ignore_pattern""}, {""var"": ""response"", ""rename"": ""http_response""}, {""var"": ""headers"", ""rename"": ""request_headers""}, {""var"": ""_"", ""rename"": ""retry_attempt""}, {""var"": ""u"", ""rename"": ""candidate""}, {""var"": ""req_url"", ""rename"": ""request_uri""}]"
./sphinx/builders/linkcheck.py,check,categorize_and_validate_uri_status,211,240,"def check() -> Tuple[str, str, int]:
    if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):
        return ('unchecked', '', 0)
    elif not uri.startswith(('http:', 'https:')):
        return ('local', '', 0)
    elif uri in self.good:
        return ('working', 'old', 0)
    elif uri in self.broken:
        return ('broken', self.broken[uri], 0)
    elif uri in self.redirected:
        return ('redirected', self.redirected[uri][0], self.redirected[uri][1])
    for rex in self.to_ignore:
        if rex.match(uri):
            return ('ignored', '', 0)
    for _ in range(self.app.config.linkcheck_retries):
        status, info, code = check_uri()
        if status != 'broken':
            break
    if status == 'working':
        self.good.add(uri)
    elif status == 'broken':
        self.broken[uri] = info
    elif status == 'redirected':
        self.redirected[uri] = (info, code)
    return (status, info, code)","def categorize_and_validate_uri_status() -> Tuple[str, str, int]:
    if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):
        return ('unchecked', '', 0)
    elif not uri.startswith(('http:', 'https:')):
        return ('local', '', 0)
    elif uri in self.good:
        return ('working', 'old', 0)
    elif uri in self.broken:
        return ('broken', self.broken[uri], 0)
    elif uri in self.redirected:
        return ('redirected', self.redirected[uri][0], self.redirected[uri][1])
    for rex in self.to_ignore:
        if rex.match(uri):
            return ('ignored', '', 0)
    for _ in range(self.app.config.linkcheck_retries):
        status, info, code = check_uri()
        if status != 'broken':
            break
    if status == 'working':
        self.good.add(uri)
    elif status == 'broken':
        self.broken[uri] = info
    elif status == 'redirected':
        self.redirected[uri] = (info, code)
    return (status, info, code)","[{""var"": ""_"", ""rename"": ""retry_attempt""}, {""var"": ""code"", ""rename"": ""response_code""}, {""var"": ""rex"", ""rename"": ""regex_to_ignore""}, {""var"": ""status"", ""rename"": ""link_verification_status""}, {""var"": ""info"", ""rename"": ""uri_status_detail""}]"
