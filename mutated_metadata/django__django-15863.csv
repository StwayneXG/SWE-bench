file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/template/defaultfilters.py,floatformat,formatted_float_display,96,206,"@register.filter(is_safe=True)
def floatformat(text, arg=-1):
    """"""
    Display a float to a specified number of decimal places.

    If called without an argument, display the floating point number with one
    decimal place -- but only if there's a decimal place to be displayed:

    * num1 = 34.23234
    * num2 = 34.00000
    * num3 = 34.26000
    * {{ num1|floatformat }} displays ""34.2""
    * {{ num2|floatformat }} displays ""34""
    * {{ num3|floatformat }} displays ""34.3""

    If arg is positive, always display exactly arg number of decimal places:

    * {{ num1|floatformat:3 }} displays ""34.232""
    * {{ num2|floatformat:3 }} displays ""34.000""
    * {{ num3|floatformat:3 }} displays ""34.260""

    If arg is negative, display arg number of decimal places -- but only if
    there are places to be displayed:

    * {{ num1|floatformat:""-3"" }} displays ""34.232""
    * {{ num2|floatformat:""-3"" }} displays ""34""
    * {{ num3|floatformat:""-3"" }} displays ""34.260""

    If arg has the 'g' suffix, force the result to be grouped by the
    THOUSAND_SEPARATOR for the active locale. When the active locale is
    en (English):

    * {{ 6666.6666|floatformat:""2g"" }} displays ""6,666.67""
    * {{ 10000|floatformat:""g"" }} displays ""10,000""

    If arg has the 'u' suffix, force the result to be unlocalized. When the
    active locale is pl (Polish):

    * {{ 66666.6666|floatformat:""2"" }} displays ""66666,67""
    * {{ 66666.6666|floatformat:""2u"" }} displays ""66666.67""

    If the input float is infinity or NaN, display the string representation
    of that value.
    """"""
    force_grouping = False
    use_l10n = True
    if isinstance(arg, str):
        last_char = arg[-1]
        if arg[-2:] in {'gu', 'ug'}:
            force_grouping = True
            use_l10n = False
            arg = arg[:-2] or -1
        elif last_char == 'g':
            force_grouping = True
            arg = arg[:-1] or -1
        elif last_char == 'u':
            use_l10n = False
            arg = arg[:-1] or -1
    try:
        input_val = repr(text)
        d = Decimal(input_val)
    except InvalidOperation:
        try:
            d = Decimal(str(float(text)))
        except (ValueError, InvalidOperation, TypeError):
            return ''
    try:
        p = int(arg)
    except ValueError:
        return input_val
    try:
        m = int(d) - d
    except (ValueError, OverflowError, InvalidOperation):
        return input_val
    if not m and p < 0:
        return mark_safe(formats.number_format('%d' % int(d), 0, use_l10n=use_l10n, force_grouping=force_grouping))
    exp = Decimal(1).scaleb(-abs(p))
    tupl = d.as_tuple()
    units = len(tupl[1])
    units += -tupl[2] if m else tupl[2]
    prec = abs(p) + units + 1
    rounded_d = d.quantize(exp, ROUND_HALF_UP, Context(prec=prec))
    sign, digits, exponent = rounded_d.as_tuple()
    digits = [str(digit) for digit in reversed(digits)]
    while len(digits) <= abs(exponent):
        digits.append('0')
    digits.insert(-exponent, '.')
    if sign and rounded_d:
        digits.append('-')
    number = ''.join(reversed(digits))
    return mark_safe(formats.number_format(number, abs(p), use_l10n=use_l10n, force_grouping=force_grouping))","@register.filter(is_safe=True)
def formatted_float_display(text, arg=-1):
    """"""
    Display a float to a specified number of decimal places.

    If called without an argument, display the floating point number with one
    decimal place -- but only if there's a decimal place to be displayed:

    * num1 = 34.23234
    * num2 = 34.00000
    * num3 = 34.26000
    * {{ num1|floatformat }} displays ""34.2""
    * {{ num2|floatformat }} displays ""34""
    * {{ num3|floatformat }} displays ""34.3""

    If arg is positive, always display exactly arg number of decimal places:

    * {{ num1|floatformat:3 }} displays ""34.232""
    * {{ num2|floatformat:3 }} displays ""34.000""
    * {{ num3|floatformat:3 }} displays ""34.260""

    If arg is negative, display arg number of decimal places -- but only if
    there are places to be displayed:

    * {{ num1|floatformat:""-3"" }} displays ""34.232""
    * {{ num2|floatformat:""-3"" }} displays ""34""
    * {{ num3|floatformat:""-3"" }} displays ""34.260""

    If arg has the 'g' suffix, force the result to be grouped by the
    THOUSAND_SEPARATOR for the active locale. When the active locale is
    en (English):

    * {{ 6666.6666|floatformat:""2g"" }} displays ""6,666.67""
    * {{ 10000|floatformat:""g"" }} displays ""10,000""

    If arg has the 'u' suffix, force the result to be unlocalized. When the
    active locale is pl (Polish):

    * {{ 66666.6666|floatformat:""2"" }} displays ""66666,67""
    * {{ 66666.6666|floatformat:""2u"" }} displays ""66666.67""

    If the input float is infinity or NaN, display the string representation
    of that value.
    """"""
    force_grouping = False
    use_l10n = True
    if isinstance(arg, str):
        last_char = arg[-1]
        if arg[-2:] in {'gu', 'ug'}:
            force_grouping = True
            use_l10n = False
            arg = arg[:-2] or -1
        elif last_char == 'g':
            force_grouping = True
            arg = arg[:-1] or -1
        elif last_char == 'u':
            use_l10n = False
            arg = arg[:-1] or -1
    try:
        input_val = repr(text)
        d = Decimal(input_val)
    except InvalidOperation:
        try:
            d = Decimal(str(float(text)))
        except (ValueError, InvalidOperation, TypeError):
            return ''
    try:
        p = int(arg)
    except ValueError:
        return input_val
    try:
        m = int(d) - d
    except (ValueError, OverflowError, InvalidOperation):
        return input_val
    if not m and p < 0:
        return mark_safe(formats.number_format('%d' % int(d), 0, use_l10n=use_l10n, force_grouping=force_grouping))
    exp = Decimal(1).scaleb(-abs(p))
    tupl = d.as_tuple()
    units = len(tupl[1])
    units += -tupl[2] if m else tupl[2]
    prec = abs(p) + units + 1
    rounded_d = d.quantize(exp, ROUND_HALF_UP, Context(prec=prec))
    sign, digits, exponent = rounded_d.as_tuple()
    digits = [str(digit) for digit in reversed(digits)]
    while len(digits) <= abs(exponent):
        digits.append('0')
    digits.insert(-exponent, '.')
    if sign and rounded_d:
        digits.append('-')
    number = ''.join(reversed(digits))
    return mark_safe(formats.number_format(number, abs(p), use_l10n=use_l10n, force_grouping=force_grouping))","[{""var"": ""exp"", ""rename"": ""decimal_scaling_factor""}, {""var"": ""force_grouping"", ""rename"": ""enable_thousand_separator""}, {""var"": ""p"", ""rename"": ""decimal_places""}, {""var"": ""digit"", ""rename"": ""decimal_digit""}, {""var"": ""number"", ""rename"": ""formatted_number_str""}, {""var"": ""use_l10n"", ""rename"": ""apply_localization""}, {""var"": ""m"", ""rename"": ""decimal_fractional_part""}, {""var"": ""tupl"", ""rename"": ""decimal_tuple""}, {""var"": ""rounded_d"", ""rename"": ""formatted_decimal""}, {""var"": ""exponent"", ""rename"": ""decimal_exponent""}, {""var"": ""last_char"", ""rename"": ""arg_suffix""}, {""var"": ""sign"", ""rename"": ""number_sign""}, {""var"": ""prec"", ""rename"": ""precision_width""}, {""var"": ""input_val"", ""rename"": ""formatted_text_representation""}, {""var"": ""d"", ""rename"": ""decimal_value""}, {""var"": ""digits"", ""rename"": ""decimal_digits""}, {""var"": ""units"", ""rename"": ""decimal_length""}]"
