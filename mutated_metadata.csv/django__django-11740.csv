file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/db/migrations/autodetector.py,generate_altered_fields,resolve_field_changes,904,978,"def generate_altered_fields(self):
    """"""
        Make AlterField operations, or possibly RemovedField/AddField if alter
        isn's possible.
        """"""
    for app_label, model_name, field_name in sorted(self.old_field_keys & self.new_field_keys):
        old_model_name = self.renamed_models.get((app_label, model_name), model_name)
        old_field_name = self.renamed_fields.get((app_label, model_name, field_name), field_name)
        old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(old_field_name)
        new_field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)
        if hasattr(new_field, 'remote_field') and getattr(new_field.remote_field, 'model', None):
            rename_key = (new_field.remote_field.model._meta.app_label, new_field.remote_field.model._meta.model_name)
            if rename_key in self.renamed_models:
                new_field.remote_field.model = old_field.remote_field.model
            remote_field_name = getattr(new_field.remote_field, 'field_name', None)
            if remote_field_name:
                to_field_rename_key = rename_key + (remote_field_name,)
                if to_field_rename_key in self.renamed_fields:
                    new_field.remote_field.field_name = old_field.remote_field.field_name
            from_fields = getattr(new_field, 'from_fields', None)
            if from_fields:
                from_rename_key = (app_label, model_name)
                new_field.from_fields = tuple([self.renamed_fields.get(from_rename_key + (from_field,), from_field) for from_field in from_fields])
                new_field.to_fields = tuple([self.renamed_fields.get(rename_key + (to_field,), to_field) for to_field in new_field.to_fields])
        if hasattr(new_field, 'remote_field') and getattr(new_field.remote_field, 'through', None):
            rename_key = (new_field.remote_field.through._meta.app_label, new_field.remote_field.through._meta.model_name)
            if rename_key in self.renamed_models:
                new_field.remote_field.through = old_field.remote_field.through
        old_field_dec = self.deep_deconstruct(old_field)
        new_field_dec = self.deep_deconstruct(new_field)
        if old_field_dec != new_field_dec:
            both_m2m = old_field.many_to_many and new_field.many_to_many
            neither_m2m = not old_field.many_to_many and (not new_field.many_to_many)
            if both_m2m or neither_m2m:
                preserve_default = True
                if old_field.null and (not new_field.null) and (not new_field.has_default()) and (not new_field.many_to_many):
                    field = new_field.clone()
                    new_default = self.questioner.ask_not_null_alteration(field_name, model_name)
                    if new_default is not models.NOT_PROVIDED:
                        field.default = new_default
                        preserve_default = False
                else:
                    field = new_field
                self.add_operation(app_label, operations.AlterField(model_name=model_name, name=field_name, field=field, preserve_default=preserve_default))
            else:
                self._generate_removed_field(app_label, model_name, field_name)
                self._generate_added_field(app_label, model_name, field_name)","def resolve_field_changes(self):
    """"""
        Make AlterField operations, or possibly RemovedField/AddField if alter
        isn's possible.
        """"""
    for app_label, model_name, field_name in sorted(self.old_field_keys & self.new_field_keys):
        old_model_name = self.renamed_models.get((app_label, model_name), model_name)
        old_field_name = self.renamed_fields.get((app_label, model_name, field_name), field_name)
        old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(old_field_name)
        new_field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)
        if hasattr(new_field, 'remote_field') and getattr(new_field.remote_field, 'model', None):
            rename_key = (new_field.remote_field.model._meta.app_label, new_field.remote_field.model._meta.model_name)
            if rename_key in self.renamed_models:
                new_field.remote_field.model = old_field.remote_field.model
            remote_field_name = getattr(new_field.remote_field, 'field_name', None)
            if remote_field_name:
                to_field_rename_key = rename_key + (remote_field_name,)
                if to_field_rename_key in self.renamed_fields:
                    new_field.remote_field.field_name = old_field.remote_field.field_name
            from_fields = getattr(new_field, 'from_fields', None)
            if from_fields:
                from_rename_key = (app_label, model_name)
                new_field.from_fields = tuple([self.renamed_fields.get(from_rename_key + (from_field,), from_field) for from_field in from_fields])
                new_field.to_fields = tuple([self.renamed_fields.get(rename_key + (to_field,), to_field) for to_field in new_field.to_fields])
        if hasattr(new_field, 'remote_field') and getattr(new_field.remote_field, 'through', None):
            rename_key = (new_field.remote_field.through._meta.app_label, new_field.remote_field.through._meta.model_name)
            if rename_key in self.renamed_models:
                new_field.remote_field.through = old_field.remote_field.through
        old_field_dec = self.deep_deconstruct(old_field)
        new_field_dec = self.deep_deconstruct(new_field)
        if old_field_dec != new_field_dec:
            both_m2m = old_field.many_to_many and new_field.many_to_many
            neither_m2m = not old_field.many_to_many and (not new_field.many_to_many)
            if both_m2m or neither_m2m:
                preserve_default = True
                if old_field.null and (not new_field.null) and (not new_field.has_default()) and (not new_field.many_to_many):
                    field = new_field.clone()
                    new_default = self.questioner.ask_not_null_alteration(field_name, model_name)
                    if new_default is not models.NOT_PROVIDED:
                        field.default = new_default
                        preserve_default = False
                else:
                    field = new_field
                self.add_operation(app_label, operations.AlterField(model_name=model_name, name=field_name, field=field, preserve_default=preserve_default))
            else:
                self._generate_removed_field(app_label, model_name, field_name)
                self._generate_added_field(app_label, model_name, field_name)","[{""var"": ""to_field_rename_key"", ""rename"": ""remote_field_rename_identifier""}, {""var"": ""preserve_default"", ""rename"": ""retain_initial_value""}, {""var"": ""new_default"", ""rename"": ""new_field_default_value""}, {""var"": ""new_field"", ""rename"": ""updated_field_definition""}, {""var"": ""from_field"", ""rename"": ""original_field_reference""}, {""var"": ""old_field_name"", ""rename"": ""previous_field_name""}, {""var"": ""both_m2m"", ""rename"": ""fields_are_consistently_m2m""}, {""var"": ""neither_m2m"", ""rename"": ""non_m2m_fields_condition""}, {""var"": ""old_field"", ""rename"": ""previous_field_instance""}, {""var"": ""rename_key"", ""rename"": ""remote_model_key""}, {""var"": ""remote_field_name"", ""rename"": ""referenced_field_name""}, {""var"": ""from_rename_key"", ""rename"": ""field_renaming_key_source""}, {""var"": ""app_label"", ""rename"": ""application_namespace""}, {""var"": ""old_model_name"", ""rename"": ""prior_model_identifier""}, {""var"": ""field"", ""rename"": ""altered_field""}, {""var"": ""new_field_dec"", ""rename"": ""new_field_deconstructed""}, {""var"": ""old_field_dec"", ""rename"": ""original_field_deconstruction""}, {""var"": ""field_name"", ""rename"": ""shared_field_name""}, {""var"": ""from_fields"", ""rename"": ""source_field_paths""}, {""var"": ""to_field"", ""rename"": ""reference_field""}, {""var"": ""model_name"", ""rename"": ""target_model_name""}]"
