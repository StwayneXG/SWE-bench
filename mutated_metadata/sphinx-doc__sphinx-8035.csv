file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sphinx/ext/autodoc/__init__.py,merge_special_members_option,integrate_special_members_into_members_option,126,136,"def merge_special_members_option(options: Dict) -> None:
    """"""Merge :special-members: option to :members: option.""""""
    if 'special-members' in options and options['special-members'] is not ALL:
        if options.get('members') is ALL:
            pass
        elif options.get('members'):
            for member in options['special-members']:
                if member not in options['members']:
                    options['members'].append(member)
        else:
            options['members'] = options['special-members']","def integrate_special_members_into_members_option(options: Dict) -> None:
    """"""Merge :special-members: option to :members: option.""""""
    if 'special-members' in options and options['special-members'] is not ALL:
        if options.get('members') is ALL:
            pass
        elif options.get('members'):
            for member in options['special-members']:
                if member not in options['members']:
                    options['members'].append(member)
        else:
            options['members'] = options['special-members']","[{""var"": ""member"", ""rename"": ""special_member_entry""}]"
./sphinx/ext/autodoc/__init__.py,cut_lines,trim_docstring_lines,141,166,"def cut_lines(pre: int, post: int=0, what: str=None) -> Callable:
    """"""Return a listener that removes the first *pre* and last *post*
    lines of every docstring.  If *what* is a sequence of strings,
    only docstrings of a type in *what* will be processed.

    Use like this (e.g. in the ``setup()`` function of :file:`conf.py`)::

       from sphinx.ext.autodoc import cut_lines
       app.connect('autodoc-process-docstring', cut_lines(4, what=['module']))

    This can (and should) be used in place of :confval:`automodule_skip_lines`.
    """"""

    def process(app: Sphinx, what_: str, name: str, obj: Any, options: Any, lines: List[str]) -> None:
        if what and what_ not in what:
            return
        del lines[:pre]
        if post:
            if lines and (not lines[-1]):
                lines.pop(-1)
            del lines[-post:]
        if lines and lines[-1]:
            lines.append('')
    return process","def trim_docstring_lines(pre: int, post: int=0, what: str=None) -> Callable:
    """"""Return a listener that removes the first *pre* and last *post*
    lines of every docstring.  If *what* is a sequence of strings,
    only docstrings of a type in *what* will be processed.

    Use like this (e.g. in the ``setup()`` function of :file:`conf.py`)::

       from sphinx.ext.autodoc import cut_lines
       app.connect('autodoc-process-docstring', cut_lines(4, what=['module']))

    This can (and should) be used in place of :confval:`automodule_skip_lines`.
    """"""

    def process(app: Sphinx, what_: str, name: str, obj: Any, options: Any, lines: List[str]) -> None:
        if what and what_ not in what:
            return
        del lines[:pre]
        if post:
            if lines and (not lines[-1]):
                lines.pop(-1)
            del lines[-post:]
        if lines and lines[-1]:
            lines.append('')
    return process",[]
./sphinx/ext/autodoc/__init__.py,process,filter_and_format_docstring_lines,153,165,"def process(app: Sphinx, what_: str, name: str, obj: Any, options: Any, lines: List[str]) -> None:
    if what and what_ not in what:
        return
    del lines[:pre]
    if post:
        if lines and (not lines[-1]):
            lines.pop(-1)
        del lines[-post:]
    if lines and lines[-1]:
        lines.append('')","def filter_and_format_docstring_lines(app: Sphinx, what_: str, name: str, obj: Any, options: Any, lines: List[str]) -> None:
    if what and what_ not in what:
        return
    del lines[:pre]
    if post:
        if lines and (not lines[-1]):
            lines.pop(-1)
        del lines[-post:]
    if lines and lines[-1]:
        lines.append('')",[]
./sphinx/ext/autodoc/__init__.py,filter_members,filter_and_classify_members,559,687,"def filter_members(self, members: List[Tuple[str, Any]], want_all: bool) -> List[Tuple[str, Any, bool]]:
    """"""Filter the given member list.

        Members are skipped if

        - they are private (except if given explicitly or the private-members
          option is set)
        - they are special methods (except if given explicitly or the
          special-members option is set)
        - they are undocumented (except if the undoc-members option is set)

        The user can override the skipping decision by connecting to the
        ``autodoc-skip-member`` event.
        """"""

    def is_filtered_inherited_member(name: str) -> bool:
        if inspect.isclass(self.object):
            for cls in self.object.__mro__:
                if cls.__name__ == self.options.inherited_members and cls != self.object:
                    return True
                elif name in cls.__dict__:
                    return False
        return False
    ret = []
    namespace = '.'.join(self.objpath)
    if self.analyzer:
        attr_docs = self.analyzer.find_attr_docs()
    else:
        attr_docs = {}
    for membername, member in members:
        if member is INSTANCEATTR:
            isattr = True
        else:
            isattr = False
        doc = getdoc(member, self.get_attr, self.env.config.autodoc_inherit_docstrings, self.parent, self.object_name)
        if not isinstance(doc, str):
            doc = None
        cls = self.get_attr(member, '__class__', None)
        if cls:
            cls_doc = self.get_attr(cls, '__doc__', None)
            if cls_doc == doc:
                doc = None
        has_doc = bool(doc)
        metadata = extract_metadata(doc)
        if 'private' in metadata:
            isprivate = True
        elif 'public' in metadata:
            isprivate = False
        else:
            isprivate = membername.startswith('_')
        keep = False
        if safe_getattr(member, '__sphinx_mock__', False):
            pass
        elif self.options.exclude_members not in (None, ALL) and membername in self.options.exclude_members:
            keep = False
        elif want_all and membername.startswith('__') and membername.endswith('__') and (len(membername) > 4):
            if self.options.special_members is ALL:
                if membername == '__doc__':
                    keep = False
                elif is_filtered_inherited_member(membername):
                    keep = False
                else:
                    keep = has_doc or self.options.undoc_members
            elif self.options.special_members:
                if membername in self.options.special_members:
                    keep = has_doc or self.options.undoc_members
        elif (namespace, membername) in attr_docs:
            if want_all and isprivate:
                keep = self.options.private_members
            else:
                keep = True
            isattr = True
        elif want_all and isprivate:
            keep = self.options.private_members and (has_doc or self.options.undoc_members)
        elif self.options.members is ALL and is_filtered_inherited_member(membername):
            keep = False
        else:
            keep = has_doc or self.options.undoc_members
        if self.env.app:
            try:
                skip_user = self.env.app.emit_firstresult('autodoc-skip-member', self.objtype, membername, member, not keep, self.options)
                if skip_user is not None:
                    keep = not skip_user
            except Exception as exc:
                logger.warning(__('autodoc: failed to determine %r to be documented, the following exception was raised:\n%s'), member, exc, type='autodoc')
                keep = False
        if keep:
            ret.append((membername, member, isattr))
    return ret","def filter_and_classify_members(self, members: List[Tuple[str, Any]], want_all: bool) -> List[Tuple[str, Any, bool]]:
    """"""Filter the given member list.

        Members are skipped if

        - they are private (except if given explicitly or the private-members
          option is set)
        - they are special methods (except if given explicitly or the
          special-members option is set)
        - they are undocumented (except if the undoc-members option is set)

        The user can override the skipping decision by connecting to the
        ``autodoc-skip-member`` event.
        """"""

    def is_filtered_inherited_member(name: str) -> bool:
        if inspect.isclass(self.object):
            for cls in self.object.__mro__:
                if cls.__name__ == self.options.inherited_members and cls != self.object:
                    return True
                elif name in cls.__dict__:
                    return False
        return False
    ret = []
    namespace = '.'.join(self.objpath)
    if self.analyzer:
        attr_docs = self.analyzer.find_attr_docs()
    else:
        attr_docs = {}
    for membername, member in members:
        if member is INSTANCEATTR:
            isattr = True
        else:
            isattr = False
        doc = getdoc(member, self.get_attr, self.env.config.autodoc_inherit_docstrings, self.parent, self.object_name)
        if not isinstance(doc, str):
            doc = None
        cls = self.get_attr(member, '__class__', None)
        if cls:
            cls_doc = self.get_attr(cls, '__doc__', None)
            if cls_doc == doc:
                doc = None
        has_doc = bool(doc)
        metadata = extract_metadata(doc)
        if 'private' in metadata:
            isprivate = True
        elif 'public' in metadata:
            isprivate = False
        else:
            isprivate = membername.startswith('_')
        keep = False
        if safe_getattr(member, '__sphinx_mock__', False):
            pass
        elif self.options.exclude_members not in (None, ALL) and membername in self.options.exclude_members:
            keep = False
        elif want_all and membername.startswith('__') and membername.endswith('__') and (len(membername) > 4):
            if self.options.special_members is ALL:
                if membername == '__doc__':
                    keep = False
                elif is_filtered_inherited_member(membername):
                    keep = False
                else:
                    keep = has_doc or self.options.undoc_members
            elif self.options.special_members:
                if membername in self.options.special_members:
                    keep = has_doc or self.options.undoc_members
        elif (namespace, membername) in attr_docs:
            if want_all and isprivate:
                keep = self.options.private_members
            else:
                keep = True
            isattr = True
        elif want_all and isprivate:
            keep = self.options.private_members and (has_doc or self.options.undoc_members)
        elif self.options.members is ALL and is_filtered_inherited_member(membername):
            keep = False
        else:
            keep = has_doc or self.options.undoc_members
        if self.env.app:
            try:
                skip_user = self.env.app.emit_firstresult('autodoc-skip-member', self.objtype, membername, member, not keep, self.options)
                if skip_user is not None:
                    keep = not skip_user
            except Exception as exc:
                logger.warning(__('autodoc: failed to determine %r to be documented, the following exception was raised:\n%s'), member, exc, type='autodoc')
                keep = False
        if keep:
            ret.append((membername, member, isattr))
    return ret","[{""var"": ""keep"", ""rename"": ""should_include_member""}, {""var"": ""has_doc"", ""rename"": ""has_documentation""}, {""var"": ""membername"", ""rename"": ""member_identifier""}, {""var"": ""ret"", ""rename"": ""filtered_members_list""}, {""var"": ""isprivate"", ""rename"": ""is_private_member""}, {""var"": ""attr_docs"", ""rename"": ""attribute_documentation_map""}, {""var"": ""cls_doc"", ""rename"": ""class_documentation""}, {""var"": ""skip_user"", ""rename"": ""user_defined_skip_decision""}, {""var"": ""member"", ""rename"": ""member_data""}, {""var"": ""isattr"", ""rename"": ""is_instance_attribute""}, {""var"": ""doc"", ""rename"": ""documentation_string""}, {""var"": ""cls"", ""rename"": ""member_class""}, {""var"": ""namespace"", ""rename"": ""object_namespace_path""}, {""var"": ""metadata"", ""rename"": ""member_metadata""}]"
./sphinx/ext/autodoc/__init__.py,parse_name,warn_signature_conflicts_parse_name,884,890,"def parse_name(self) -> bool:
    ret = super().parse_name()
    if self.args or self.retann:
        logger.warning(__('signature arguments or return annotation given for automodule %s') % self.fullname, type='autodoc')
    return ret","def warn_signature_conflicts_parse_name(self) -> bool:
    ret = super().parse_name()
    if self.args or self.retann:
        logger.warning(__('signature arguments or return annotation given for automodule %s') % self.fullname, type='autodoc')
    return ret","[{""var"": ""ret"", ""rename"": ""parse_result""}]"
./sphinx/ext/autodoc/__init__.py,import_object,integrate_module_with_validation,892,914,"def import_object(self, raiseerror: bool=False) -> bool:

    def is_valid_module_all(__all__: Any) -> bool:
        """"""Check the given *__all__* is valid for a module.""""""
        if isinstance(__all__, (list, tuple)) and all((isinstance(e, str) for e in __all__)):
            return True
        else:
            return False
    ret = super().import_object(raiseerror)
    if not self.options.ignore_module_all:
        __all__ = getattr(self.object, '__all__', None)
        if is_valid_module_all(__all__):
            self.__all__ = __all__
        elif __all__:
            logger.warning(__('__all__ should be a list of strings, not %r (in module %s) -- ignoring __all__') % (__all__, self.fullname), type='autodoc')
    return ret","def integrate_module_with_validation(self, raiseerror: bool=False) -> bool:

    def is_valid_module_all(__all__: Any) -> bool:
        """"""Check the given *__all__* is valid for a module.""""""
        if isinstance(__all__, (list, tuple)) and all((isinstance(e, str) for e in __all__)):
            return True
        else:
            return False
    ret = super().import_object(raiseerror)
    if not self.options.ignore_module_all:
        __all__ = getattr(self.object, '__all__', None)
        if is_valid_module_all(__all__):
            self.__all__ = __all__
        elif __all__:
            logger.warning(__('__all__ should be a list of strings, not %r (in module %s) -- ignoring __all__') % (__all__, self.fullname), type='autodoc')
    return ret","[{""var"": ""ret"", ""rename"": ""import_success""}, {""var"": ""e"", ""rename"": ""element""}]"
./sphinx/ext/autodoc/__init__.py,_get_signature,determine_callable_signature_with_checks,1308,1370,"def _get_signature(self) -> Tuple[Optional[Any], Optional[str], Optional[Signature]]:

    def get_user_defined_function_or_method(obj: Any, attr: str) -> Any:
        """""" Get the `attr` function or method from `obj`, if it is user-defined. """"""
        if inspect.is_builtin_class_method(obj, attr):
            return None
        attr = self.get_attr(obj, attr, None)
        if not (inspect.ismethod(attr) or inspect.isfunction(attr)):
            return None
        return attr
    call = get_user_defined_function_or_method(type(self.object), '__call__')
    if call is not None:
        if '{0.__module__}.{0.__qualname__}'.format(call) in _METACLASS_CALL_BLACKLIST:
            call = None
    if call is not None:
        self.env.app.emit('autodoc-before-process-signature', call, True)
        try:
            sig = inspect.signature(call, bound_method=True)
            return (type(self.object), '__call__', sig)
        except ValueError:
            pass
    new = get_user_defined_function_or_method(self.object, '__new__')
    if new is not None:
        self.env.app.emit('autodoc-before-process-signature', new, True)
        try:
            sig = inspect.signature(new, bound_method=True)
            return (self.object, '__new__', sig)
        except ValueError:
            pass
    init = get_user_defined_function_or_method(self.object, '__init__')
    if init is not None:
        self.env.app.emit('autodoc-before-process-signature', init, True)
        try:
            sig = inspect.signature(init, bound_method=True)
            return (self.object, '__init__', sig)
        except ValueError:
            pass
    self.env.app.emit('autodoc-before-process-signature', self.object, False)
    try:
        sig = inspect.signature(self.object, bound_method=False)
        return (None, None, sig)
    except ValueError:
        pass
    return (None, None, None)","def determine_callable_signature_with_checks(self) -> Tuple[Optional[Any], Optional[str], Optional[Signature]]:

    def get_user_defined_function_or_method(obj: Any, attr: str) -> Any:
        """""" Get the `attr` function or method from `obj`, if it is user-defined. """"""
        if inspect.is_builtin_class_method(obj, attr):
            return None
        attr = self.get_attr(obj, attr, None)
        if not (inspect.ismethod(attr) or inspect.isfunction(attr)):
            return None
        return attr
    call = get_user_defined_function_or_method(type(self.object), '__call__')
    if call is not None:
        if '{0.__module__}.{0.__qualname__}'.format(call) in _METACLASS_CALL_BLACKLIST:
            call = None
    if call is not None:
        self.env.app.emit('autodoc-before-process-signature', call, True)
        try:
            sig = inspect.signature(call, bound_method=True)
            return (type(self.object), '__call__', sig)
        except ValueError:
            pass
    new = get_user_defined_function_or_method(self.object, '__new__')
    if new is not None:
        self.env.app.emit('autodoc-before-process-signature', new, True)
        try:
            sig = inspect.signature(new, bound_method=True)
            return (self.object, '__new__', sig)
        except ValueError:
            pass
    init = get_user_defined_function_or_method(self.object, '__init__')
    if init is not None:
        self.env.app.emit('autodoc-before-process-signature', init, True)
        try:
            sig = inspect.signature(init, bound_method=True)
            return (self.object, '__init__', sig)
        except ValueError:
            pass
    self.env.app.emit('autodoc-before-process-signature', self.object, False)
    try:
        sig = inspect.signature(self.object, bound_method=False)
        return (None, None, sig)
    except ValueError:
        pass
    return (None, None, None)","[{""var"": ""new"", ""rename"": ""user_defined_new_method""}, {""var"": ""call"", ""rename"": ""user_defined_callable""}, {""var"": ""sig"", ""rename"": ""function_signature""}, {""var"": ""init"", ""rename"": ""user_defined_init_method""}]"
./sphinx/ext/autodoc/__init__.py,is_valid_module_all,validate_module_all_attribute,893,899,"def is_valid_module_all(__all__: Any) -> bool:
    """"""Check the given *__all__* is valid for a module.""""""
    if isinstance(__all__, (list, tuple)) and all((isinstance(e, str) for e in __all__)):
        return True
    else:
        return False","def validate_module_all_attribute(__all__: Any) -> bool:
    """"""Check the given *__all__* is valid for a module.""""""
    if isinstance(__all__, (list, tuple)) and all((isinstance(e, str) for e in __all__)):
        return True
    else:
        return False","[{""var"": ""e"", ""rename"": ""module_member""}]"
./sphinx/ext/autodoc/__init__.py,get_user_defined_function_or_method,retrieve_user_defined_callable_attribute,1309,1316,"def get_user_defined_function_or_method(obj: Any, attr: str) -> Any:
    """""" Get the `attr` function or method from `obj`, if it is user-defined. """"""
    if inspect.is_builtin_class_method(obj, attr):
        return None
    attr = self.get_attr(obj, attr, None)
    if not (inspect.ismethod(attr) or inspect.isfunction(attr)):
        return None
    return attr","def retrieve_user_defined_callable_attribute(obj: Any, attr: str) -> Any:
    """""" Get the `attr` function or method from `obj`, if it is user-defined. """"""
    if inspect.is_builtin_class_method(obj, attr):
        return None
    attr = self.get_attr(obj, attr, None)
    if not (inspect.ismethod(attr) or inspect.isfunction(attr)):
        return None
    return attr",[]
