file,method_name,new_method_name,start_line,end_line,original_code,code,var
./astropy/io/fits/card.py,_split,separate_card_image_content,829,895,"def _split(self):
    """"""
        Split the card image between the keyword and the rest of the card.
        """"""
    if self._image is not None:
        image = self._image
    else:
        image = self.image
    if len(self._image) > self.length:
        values = []
        comments = []
        keyword = None
        for card in self._itersubcards():
            kw, vc = card._split()
            if keyword is None:
                keyword = kw
            if keyword in self._commentary_keywords:
                values.append(vc)
                continue
            m = self._strg_comment_RE.match(vc)
            if not m:
                return (kw, vc)
            value = m.group('strg') or ''
            value = value.rstrip().replace(""''"", ""'"")
            if value and value[-1] == '&':
                value = value[:-1]
            values.append(value)
            comment = m.group('comm')
            if comment:
                comments.append(comment.rstrip())
        if keyword in self._commentary_keywords:
            valuecomment = ''.join(values)
        else:
            valuecomment = f""'{''.join(values)}' / {' '.join(comments)}""
        return (keyword, valuecomment)
    if self.keyword in self._special_keywords:
        keyword, valuecomment = image.split(' ', 1)
    else:
        try:
            delim_index = image.index(self._value_indicator)
        except ValueError:
            delim_index = None
        if delim_index is None:
            keyword = image[:KEYWORD_LENGTH]
            valuecomment = image[KEYWORD_LENGTH:]
        elif delim_index > 10 and image[:9] != 'HIERARCH ':
            keyword = image[:8]
            valuecomment = image[8:]
        else:
            keyword, valuecomment = image.split(self._value_indicator, 1)
    return (keyword.strip(), valuecomment.strip())","def separate_card_image_content(self):
    """"""
        Split the card image between the keyword and the rest of the card.
        """"""
    if self._image is not None:
        image = self._image
    else:
        image = self.image
    if len(self._image) > self.length:
        values = []
        comments = []
        keyword = None
        for card in self._itersubcards():
            kw, vc = card._split()
            if keyword is None:
                keyword = kw
            if keyword in self._commentary_keywords:
                values.append(vc)
                continue
            m = self._strg_comment_RE.match(vc)
            if not m:
                return (kw, vc)
            value = m.group('strg') or ''
            value = value.rstrip().replace(""''"", ""'"")
            if value and value[-1] == '&':
                value = value[:-1]
            values.append(value)
            comment = m.group('comm')
            if comment:
                comments.append(comment.rstrip())
        if keyword in self._commentary_keywords:
            valuecomment = ''.join(values)
        else:
            valuecomment = f""'{''.join(values)}' / {' '.join(comments)}""
        return (keyword, valuecomment)
    if self.keyword in self._special_keywords:
        keyword, valuecomment = image.split(' ', 1)
    else:
        try:
            delim_index = image.index(self._value_indicator)
        except ValueError:
            delim_index = None
        if delim_index is None:
            keyword = image[:KEYWORD_LENGTH]
            valuecomment = image[KEYWORD_LENGTH:]
        elif delim_index > 10 and image[:9] != 'HIERARCH ':
            keyword = image[:8]
            valuecomment = image[8:]
        else:
            keyword, valuecomment = image.split(self._value_indicator, 1)
    return (keyword.strip(), valuecomment.strip())","[{""var"": ""values"", ""rename"": ""value_fragments""}, {""var"": ""kw"", ""rename"": ""keyword_split""}, {""var"": ""comments"", ""rename"": ""commentary_details""}, {""var"": ""image"", ""rename"": ""card_image_text""}, {""var"": ""valuecomment"", ""rename"": ""combinedValueComment""}, {""var"": ""m"", ""rename"": ""comment_match""}, {""var"": ""comment"", ""rename"": ""value_comment_combination""}, {""var"": ""delim_index"", ""rename"": ""value_delimiter_position""}, {""var"": ""card"", ""rename"": ""card_image_data""}, {""var"": ""keyword"", ""rename"": ""card_keyword""}, {""var"": ""vc"", ""rename"": ""value_comment_split""}, {""var"": ""value"", ""rename"": ""parsed_value""}]"
