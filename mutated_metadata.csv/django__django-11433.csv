file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/forms/models.py,construct_instance,assemble_model_instance_from_form_data,31,64,"def construct_instance(form, instance, fields=None, exclude=None):
    """"""
    Construct and return a model instance from the bound ``form``'s
    ``cleaned_data``, but do not save the returned instance to the database.
    """"""
    from django.db import models
    opts = instance._meta
    cleaned_data = form.cleaned_data
    file_field_list = []
    for f in opts.fields:
        if not f.editable or isinstance(f, models.AutoField) or f.name not in cleaned_data:
            continue
        if fields is not None and f.name not in fields:
            continue
        if exclude and f.name in exclude:
            continue
        if f.has_default() and form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name)):
            continue
        if isinstance(f, models.FileField):
            file_field_list.append(f)
        else:
            f.save_form_data(instance, cleaned_data[f.name])
    for f in file_field_list:
        f.save_form_data(instance, cleaned_data[f.name])
    return instance","def assemble_model_instance_from_form_data(form, instance, fields=None, exclude=None):
    """"""
    Construct and return a model instance from the bound ``form``'s
    ``cleaned_data``, but do not save the returned instance to the database.
    """"""
    from django.db import models
    opts = instance._meta
    cleaned_data = form.cleaned_data
    file_field_list = []
    for f in opts.fields:
        if not f.editable or isinstance(f, models.AutoField) or f.name not in cleaned_data:
            continue
        if fields is not None and f.name not in fields:
            continue
        if exclude and f.name in exclude:
            continue
        if f.has_default() and form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name)):
            continue
        if isinstance(f, models.FileField):
            file_field_list.append(f)
        else:
            f.save_form_data(instance, cleaned_data[f.name])
    for f in file_field_list:
        f.save_form_data(instance, cleaned_data[f.name])
    return instance","[{""var"": ""file_field_list"", ""rename"": ""file_fields_to_process""}, {""var"": ""f"", ""rename"": ""model_field""}, {""var"": ""opts"", ""rename"": ""model_meta_options""}, {""var"": ""cleaned_data"", ""rename"": ""form_cleaned_data""}]"
