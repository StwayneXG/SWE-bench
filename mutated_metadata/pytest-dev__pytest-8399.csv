file,method_name,new_method_name,start_line,end_line,original_code,code,var
./src/_pytest/python.py,_inject_setup_module_fixture,inject_xunit_lifecycle_fixture_into_module,510,540,"def _inject_setup_module_fixture(self) -> None:
    """"""Inject a hidden autouse, module scoped fixture into the collected module object
        that invokes setUpModule/tearDownModule if either or both are available.

        Using a fixture to invoke this methods ensures we play nicely and unsurprisingly with
        other fixtures (#517).
        """"""
    setup_module = _get_first_non_fixture_func(self.obj, ('setUpModule', 'setup_module'))
    teardown_module = _get_first_non_fixture_func(self.obj, ('tearDownModule', 'teardown_module'))
    if setup_module is None and teardown_module is None:
        return

    @fixtures.fixture(autouse=True, scope='module', name=f'xunit_setup_module_fixture_{self.obj.__name__}')
    def xunit_setup_module_fixture(request) -> Generator[None, None, None]:
        if setup_module is not None:
            _call_with_optional_argument(setup_module, request.module)
        yield
        if teardown_module is not None:
            _call_with_optional_argument(teardown_module, request.module)
    self.obj.__pytest_setup_module = xunit_setup_module_fixture","def inject_xunit_lifecycle_fixture_into_module(self) -> None:
    """"""Inject a hidden autouse, module scoped fixture into the collected module object
        that invokes setUpModule/tearDownModule if either or both are available.

        Using a fixture to invoke this methods ensures we play nicely and unsurprisingly with
        other fixtures (#517).
        """"""
    setup_module = _get_first_non_fixture_func(self.obj, ('setUpModule', 'setup_module'))
    teardown_module = _get_first_non_fixture_func(self.obj, ('tearDownModule', 'teardown_module'))
    if setup_module is None and teardown_module is None:
        return

    @fixtures.fixture(autouse=True, scope='module', name=f'xunit_setup_module_fixture_{self.obj.__name__}')
    def xunit_setup_module_fixture(request) -> Generator[None, None, None]:
        if setup_module is not None:
            _call_with_optional_argument(setup_module, request.module)
        yield
        if teardown_module is not None:
            _call_with_optional_argument(teardown_module, request.module)
    self.obj.__pytest_setup_module = xunit_setup_module_fixture","[{""var"": ""teardown_module"", ""rename"": ""xunit_teardown_module_callable""}, {""var"": ""setup_module"", ""rename"": ""module_setup_teardown_handler""}]"
./src/_pytest/python.py,_inject_setup_function_fixture,_register_xunit_fixture_for_setup_teardown_methods,542,574,"def _inject_setup_function_fixture(self) -> None:
    """"""Inject a hidden autouse, function scoped fixture into the collected module object
        that invokes setup_function/teardown_function if either or both are available.

        Using a fixture to invoke this methods ensures we play nicely and unsurprisingly with
        other fixtures (#517).
        """"""
    setup_function = _get_first_non_fixture_func(self.obj, ('setup_function',))
    teardown_function = _get_first_non_fixture_func(self.obj, ('teardown_function',))
    if setup_function is None and teardown_function is None:
        return

    @fixtures.fixture(autouse=True, scope='function', name=f'xunit_setup_function_fixture_{self.obj.__name__}')
    def xunit_setup_function_fixture(request) -> Generator[None, None, None]:
        if request.instance is not None:
            yield
            return
        if setup_function is not None:
            _call_with_optional_argument(setup_function, request.function)
        yield
        if teardown_function is not None:
            _call_with_optional_argument(teardown_function, request.function)
    self.obj.__pytest_setup_function = xunit_setup_function_fixture","def _register_xunit_fixture_for_setup_teardown_methods(self) -> None:
    """"""Inject a hidden autouse, function scoped fixture into the collected module object
        that invokes setup_function/teardown_function if either or both are available.

        Using a fixture to invoke this methods ensures we play nicely and unsurprisingly with
        other fixtures (#517).
        """"""
    setup_function = _get_first_non_fixture_func(self.obj, ('setup_function',))
    teardown_function = _get_first_non_fixture_func(self.obj, ('teardown_function',))
    if setup_function is None and teardown_function is None:
        return

    @fixtures.fixture(autouse=True, scope='function', name=f'xunit_setup_function_fixture_{self.obj.__name__}')
    def xunit_setup_function_fixture(request) -> Generator[None, None, None]:
        if request.instance is not None:
            yield
            return
        if setup_function is not None:
            _call_with_optional_argument(setup_function, request.function)
        yield
        if teardown_function is not None:
            _call_with_optional_argument(teardown_function, request.function)
    self.obj.__pytest_setup_function = xunit_setup_function_fixture","[{""var"": ""setup_function"", ""rename"": ""function_lifecycle_handler""}, {""var"": ""teardown_function"", ""rename"": ""function_teardown_procedure""}]"
./src/_pytest/python.py,_inject_setup_class_fixture,_insert_autouse_class_scope_fixture_for_xunit_methods,796,823,"def _inject_setup_class_fixture(self) -> None:
    """"""Inject a hidden autouse, class scoped fixture into the collected class object
        that invokes setup_class/teardown_class if either or both are available.

        Using a fixture to invoke this methods ensures we play nicely and unsurprisingly with
        other fixtures (#517).
        """"""
    setup_class = _get_first_non_fixture_func(self.obj, ('setup_class',))
    teardown_class = getattr(self.obj, 'teardown_class', None)
    if setup_class is None and teardown_class is None:
        return

    @fixtures.fixture(autouse=True, scope='class', name=f'xunit_setup_class_fixture_{self.obj.__qualname__}')
    def xunit_setup_class_fixture(cls) -> Generator[None, None, None]:
        if setup_class is not None:
            func = getimfunc(setup_class)
            _call_with_optional_argument(func, self.obj)
        yield
        if teardown_class is not None:
            func = getimfunc(teardown_class)
            _call_with_optional_argument(func, self.obj)
    self.obj.__pytest_setup_class = xunit_setup_class_fixture","def _insert_autouse_class_scope_fixture_for_xunit_methods(self) -> None:
    """"""Inject a hidden autouse, class scoped fixture into the collected class object
        that invokes setup_class/teardown_class if either or both are available.

        Using a fixture to invoke this methods ensures we play nicely and unsurprisingly with
        other fixtures (#517).
        """"""
    setup_class = _get_first_non_fixture_func(self.obj, ('setup_class',))
    teardown_class = getattr(self.obj, 'teardown_class', None)
    if setup_class is None and teardown_class is None:
        return

    @fixtures.fixture(autouse=True, scope='class', name=f'xunit_setup_class_fixture_{self.obj.__qualname__}')
    def xunit_setup_class_fixture(cls) -> Generator[None, None, None]:
        if setup_class is not None:
            func = getimfunc(setup_class)
            _call_with_optional_argument(func, self.obj)
        yield
        if teardown_class is not None:
            func = getimfunc(teardown_class)
            _call_with_optional_argument(func, self.obj)
    self.obj.__pytest_setup_class = xunit_setup_class_fixture","[{""var"": ""setup_class"", ""rename"": ""class_lifecycle_handler""}, {""var"": ""teardown_class"", ""rename"": ""teardown_class_method""}, {""var"": ""func"", ""rename"": ""invoke_class_setup_teardown_func""}]"
./src/_pytest/python.py,_inject_setup_method_fixture,_add_xunit_style_method_fixtures,825,853,"def _inject_setup_method_fixture(self) -> None:
    """"""Inject a hidden autouse, function scoped fixture into the collected class object
        that invokes setup_method/teardown_method if either or both are available.

        Using a fixture to invoke this methods ensures we play nicely and unsurprisingly with
        other fixtures (#517).
        """"""
    setup_method = _get_first_non_fixture_func(self.obj, ('setup_method',))
    teardown_method = getattr(self.obj, 'teardown_method', None)
    if setup_method is None and teardown_method is None:
        return

    @fixtures.fixture(autouse=True, scope='function', name=f'xunit_setup_method_fixture_{self.obj.__qualname__}')
    def xunit_setup_method_fixture(self, request) -> Generator[None, None, None]:
        method = request.function
        if setup_method is not None:
            func = getattr(self, 'setup_method')
            _call_with_optional_argument(func, method)
        yield
        if teardown_method is not None:
            func = getattr(self, 'teardown_method')
            _call_with_optional_argument(func, method)
    self.obj.__pytest_setup_method = xunit_setup_method_fixture","def _add_xunit_style_method_fixtures(self) -> None:
    """"""Inject a hidden autouse, function scoped fixture into the collected class object
        that invokes setup_method/teardown_method if either or both are available.

        Using a fixture to invoke this methods ensures we play nicely and unsurprisingly with
        other fixtures (#517).
        """"""
    setup_method = _get_first_non_fixture_func(self.obj, ('setup_method',))
    teardown_method = getattr(self.obj, 'teardown_method', None)
    if setup_method is None and teardown_method is None:
        return

    @fixtures.fixture(autouse=True, scope='function', name=f'xunit_setup_method_fixture_{self.obj.__qualname__}')
    def xunit_setup_method_fixture(self, request) -> Generator[None, None, None]:
        method = request.function
        if setup_method is not None:
            func = getattr(self, 'setup_method')
            _call_with_optional_argument(func, method)
        yield
        if teardown_method is not None:
            func = getattr(self, 'teardown_method')
            _call_with_optional_argument(func, method)
    self.obj.__pytest_setup_method = xunit_setup_method_fixture","[{""var"": ""func"", ""rename"": ""method_function_handler""}, {""var"": ""teardown_method"", ""rename"": ""cleanup_method_callback""}, {""var"": ""method"", ""rename"": ""current_test_function""}, {""var"": ""setup_method"", ""rename"": ""initialize_teardown_procedure""}]"
./src/_pytest/unittest.py,_make_xunit_fixture,generate_xunit_style_fixture,123,181,"def _make_xunit_fixture(obj: type, setup_name: str, teardown_name: str, cleanup_name: Optional[str], scope: '_Scope', pass_self: bool):
    setup = getattr(obj, setup_name, None)
    teardown = getattr(obj, teardown_name, None)
    if setup is None and teardown is None:
        return None
    if cleanup_name:
        cleanup = getattr(obj, cleanup_name, lambda *args: None)
    else:

        def cleanup(*args):
            pass

    @pytest.fixture(scope=scope, autouse=True, name=f'unittest_{setup_name}_fixture_{obj.__qualname__}')
    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:
        if _is_skipped(self):
            reason = self.__unittest_skip_why__
            raise pytest.skip.Exception(reason, _use_item_location=True)
        if setup is not None:
            try:
                if pass_self:
                    setup(self, request.function)
                else:
                    setup()
            except Exception:
                if pass_self:
                    cleanup(self)
                else:
                    cleanup()
                raise
        yield
        try:
            if teardown is not None:
                if pass_self:
                    teardown(self, request.function)
                else:
                    teardown()
        finally:
            if pass_self:
                cleanup(self)
            else:
                cleanup()
    return fixture","def generate_xunit_style_fixture(obj: type, setup_name: str, teardown_name: str, cleanup_name: Optional[str], scope: '_Scope', pass_self: bool):
    setup = getattr(obj, setup_name, None)
    teardown = getattr(obj, teardown_name, None)
    if setup is None and teardown is None:
        return None
    if cleanup_name:
        cleanup = getattr(obj, cleanup_name, lambda *args: None)
    else:

        def cleanup(*args):
            pass

    @pytest.fixture(scope=scope, autouse=True, name=f'unittest_{setup_name}_fixture_{obj.__qualname__}')
    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:
        if _is_skipped(self):
            reason = self.__unittest_skip_why__
            raise pytest.skip.Exception(reason, _use_item_location=True)
        if setup is not None:
            try:
                if pass_self:
                    setup(self, request.function)
                else:
                    setup()
            except Exception:
                if pass_self:
                    cleanup(self)
                else:
                    cleanup()
                raise
        yield
        try:
            if teardown is not None:
                if pass_self:
                    teardown(self, request.function)
                else:
                    teardown()
        finally:
            if pass_self:
                cleanup(self)
            else:
                cleanup()
    return fixture","[{""var"": ""teardown"", ""rename"": ""teardown_method_callable""}, {""var"": ""reason"", ""rename"": ""skip_reason_message""}, {""var"": ""setup"", ""rename"": ""initialization_procedure""}, {""var"": ""cleanup"", ""rename"": ""deferred_cleanup_action""}]"
