file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sphinx/ext/autodoc/typehints.py,augment_descriptions_with_types,enhance_field_list_with_type_annotations,130,173,"def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[str, str]) -> None:
    fields = cast(Iterable[nodes.field], node)
    has_description = set()
    has_type = set()
    for field in fields:
        field_name = field[0].astext()
        parts = re.split(' +', field_name)
        if parts[0] == 'param':
            if len(parts) == 2:
                has_description.add(parts[1])
            elif len(parts) > 2:
                name = ' '.join(parts[2:])
                has_description.add(name)
                has_type.add(name)
        elif parts[0] == 'type':
            name = ' '.join(parts[1:])
            has_type.add(name)
        elif parts[0] == 'return':
            has_description.add('return')
        elif parts[0] == 'rtype':
            has_type.add('return')
    for name in annotations:
        if name == 'return':
            continue
        if name in has_description and name not in has_type:
            field = nodes.field()
            field += nodes.field_name('', 'type ' + name)
            field += nodes.field_body('', nodes.paragraph('', annotations[name]))
            node += field
    if 'return' in annotations:
        if 'return' in has_description and 'return' not in has_type:
            field = nodes.field()
            field += nodes.field_name('', 'rtype')
            field += nodes.field_body('', nodes.paragraph('', annotations['return']))
            node += field","def enhance_field_list_with_type_annotations(node: nodes.field_list, annotations: Dict[str, str]) -> None:
    fields = cast(Iterable[nodes.field], node)
    has_description = set()
    has_type = set()
    for field in fields:
        field_name = field[0].astext()
        parts = re.split(' +', field_name)
        if parts[0] == 'param':
            if len(parts) == 2:
                has_description.add(parts[1])
            elif len(parts) > 2:
                name = ' '.join(parts[2:])
                has_description.add(name)
                has_type.add(name)
        elif parts[0] == 'type':
            name = ' '.join(parts[1:])
            has_type.add(name)
        elif parts[0] == 'return':
            has_description.add('return')
        elif parts[0] == 'rtype':
            has_type.add('return')
    for name in annotations:
        if name == 'return':
            continue
        if name in has_description and name not in has_type:
            field = nodes.field()
            field += nodes.field_name('', 'type ' + name)
            field += nodes.field_body('', nodes.paragraph('', annotations[name]))
            node += field
    if 'return' in annotations:
        if 'return' in has_description and 'return' not in has_type:
            field = nodes.field()
            field += nodes.field_name('', 'rtype')
            field += nodes.field_body('', nodes.paragraph('', annotations['return']))
            node += field","[{""var"": ""name"", ""rename"": ""parameter_name_or_type_alias""}, {""var"": ""field"", ""rename"": ""field_item""}, {""var"": ""field_name"", ""rename"": ""parameter_directive""}, {""var"": ""has_type"", ""rename"": ""fields_with_type_annotations""}, {""var"": ""has_description"", ""rename"": ""fields_with_descriptions""}, {""var"": ""fields"", ""rename"": ""field_iterable""}, {""var"": ""parts"", ""rename"": ""field_name_parts""}]"
