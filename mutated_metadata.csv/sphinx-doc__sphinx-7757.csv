file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sphinx/util/inspect.py,signature_from_str,create_signature_from_function_string,514,557,"def signature_from_str(signature: str) -> inspect.Signature:
    """"""Create a Signature object from string.""""""
    module = ast.parse('def func' + signature + ': pass')
    definition = cast(ast.FunctionDef, module.body[0])
    args = definition.args
    params = []
    if hasattr(args, 'posonlyargs'):
        for arg in args.posonlyargs:
            annotation = ast_unparse(arg.annotation) or Parameter.empty
            params.append(Parameter(arg.arg, Parameter.POSITIONAL_ONLY, annotation=annotation))
    for i, arg in enumerate(args.args):
        if len(args.args) - i <= len(args.defaults):
            default = ast_unparse(args.defaults[-len(args.args) + i])
        else:
            default = Parameter.empty
        annotation = ast_unparse(arg.annotation) or Parameter.empty
        params.append(Parameter(arg.arg, Parameter.POSITIONAL_OR_KEYWORD, default=default, annotation=annotation))
    if args.vararg:
        annotation = ast_unparse(args.vararg.annotation) or Parameter.empty
        params.append(Parameter(args.vararg.arg, Parameter.VAR_POSITIONAL, annotation=annotation))
    for i, arg in enumerate(args.kwonlyargs):
        default = ast_unparse(args.kw_defaults[i]) or Parameter.empty
        annotation = ast_unparse(arg.annotation) or Parameter.empty
        params.append(Parameter(arg.arg, Parameter.KEYWORD_ONLY, default=default, annotation=annotation))
    if args.kwarg:
        annotation = ast_unparse(args.kwarg.annotation) or Parameter.empty
        params.append(Parameter(args.kwarg.arg, Parameter.VAR_KEYWORD, annotation=annotation))
    return_annotation = ast_unparse(definition.returns) or Parameter.empty
    return inspect.Signature(params, return_annotation=return_annotation)","def create_signature_from_function_string(signature: str) -> inspect.Signature:
    """"""Create a Signature object from string.""""""
    module = ast.parse('def func' + signature + ': pass')
    definition = cast(ast.FunctionDef, module.body[0])
    args = definition.args
    params = []
    if hasattr(args, 'posonlyargs'):
        for arg in args.posonlyargs:
            annotation = ast_unparse(arg.annotation) or Parameter.empty
            params.append(Parameter(arg.arg, Parameter.POSITIONAL_ONLY, annotation=annotation))
    for i, arg in enumerate(args.args):
        if len(args.args) - i <= len(args.defaults):
            default = ast_unparse(args.defaults[-len(args.args) + i])
        else:
            default = Parameter.empty
        annotation = ast_unparse(arg.annotation) or Parameter.empty
        params.append(Parameter(arg.arg, Parameter.POSITIONAL_OR_KEYWORD, default=default, annotation=annotation))
    if args.vararg:
        annotation = ast_unparse(args.vararg.annotation) or Parameter.empty
        params.append(Parameter(args.vararg.arg, Parameter.VAR_POSITIONAL, annotation=annotation))
    for i, arg in enumerate(args.kwonlyargs):
        default = ast_unparse(args.kw_defaults[i]) or Parameter.empty
        annotation = ast_unparse(arg.annotation) or Parameter.empty
        params.append(Parameter(arg.arg, Parameter.KEYWORD_ONLY, default=default, annotation=annotation))
    if args.kwarg:
        annotation = ast_unparse(args.kwarg.annotation) or Parameter.empty
        params.append(Parameter(args.kwarg.arg, Parameter.VAR_KEYWORD, annotation=annotation))
    return_annotation = ast_unparse(definition.returns) or Parameter.empty
    return inspect.Signature(params, return_annotation=return_annotation)","[{""var"": ""params"", ""rename"": ""signature_parameters""}, {""var"": ""arg"", ""rename"": ""parameter""}, {""var"": ""i"", ""rename"": ""arg_index""}, {""var"": ""annotation"", ""rename"": ""parameter_annotation""}, {""var"": ""module"", ""rename"": ""python\nparsed_function_ast""}, {""var"": ""args"", ""rename"": ""function_arguments""}, {""var"": ""return_annotation"", ""rename"": ""function_return_annotation""}, {""var"": ""default"", ""rename"": ""default_value_representation""}, {""var"": ""definition"", ""rename"": ""parsed_function_def""}]"
