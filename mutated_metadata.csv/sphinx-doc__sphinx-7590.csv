file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sphinx/domains/c.py,_parse_literal,parse_and_identify_literal_value,2068,2102,"def _parse_literal(self) -> ASTLiteral:
    self.skip_ws()
    if self.skip_word('true'):
        return ASTBooleanLiteral(True)
    if self.skip_word('false'):
        return ASTBooleanLiteral(False)
    for regex in [float_literal_re, binary_literal_re, hex_literal_re, integer_literal_re, octal_literal_re]:
        pos = self.pos
        if self.match(regex):
            while self.current_char in 'uUlLfF':
                self.pos += 1
            return ASTNumberLiteral(self.definition[pos:self.pos])
    string = self._parse_string()
    if string is not None:
        return ASTStringLiteral(string)
    if self.match(char_literal_re):
        prefix = self.last_match.group(1)
        data = self.last_match.group(2)
        try:
            return ASTCharLiteral(prefix, data)
        except UnicodeDecodeError as e:
            self.fail('Can not handle character literal. Internal error was: %s' % e)
        except UnsupportedMultiCharacterCharLiteral:
            self.fail('Can not handle character literal resulting in multiple decoded characters.')
    return None","def parse_and_identify_literal_value(self) -> ASTLiteral:
    self.skip_ws()
    if self.skip_word('true'):
        return ASTBooleanLiteral(True)
    if self.skip_word('false'):
        return ASTBooleanLiteral(False)
    for regex in [float_literal_re, binary_literal_re, hex_literal_re, integer_literal_re, octal_literal_re]:
        pos = self.pos
        if self.match(regex):
            while self.current_char in 'uUlLfF':
                self.pos += 1
            return ASTNumberLiteral(self.definition[pos:self.pos])
    string = self._parse_string()
    if string is not None:
        return ASTStringLiteral(string)
    if self.match(char_literal_re):
        prefix = self.last_match.group(1)
        data = self.last_match.group(2)
        try:
            return ASTCharLiteral(prefix, data)
        except UnicodeDecodeError as e:
            self.fail('Can not handle character literal. Internal error was: %s' % e)
        except UnsupportedMultiCharacterCharLiteral:
            self.fail('Can not handle character literal resulting in multiple decoded characters.')
    return None","[{""var"": ""pos"", ""rename"": ""starting_position""}, {""var"": ""data"", ""rename"": ""char_literal_data""}, {""var"": ""string"", ""rename"": ""parsed_string_literal""}, {""var"": ""regex"", ""rename"": ""literal_pattern""}, {""var"": ""prefix"", ""rename"": ""char_literal_prefix""}]"
./sphinx/domains/cpp.py,describe_signature,process_signature_description,601,628,"def describe_signature(self, signode: TextElement, mode: str, env: 'BuildEnvironment', prefix: str, templateArgs: str, symbol: 'Symbol') -> None:
    verify_description_mode(mode)
    if mode == 'markType':
        targetText = prefix + self.identifier + templateArgs
        pnode = addnodes.pending_xref('', refdomain='cpp', reftype='identifier', reftarget=targetText, modname=None, classname=None)
        key = symbol.get_lookup_key()
        pnode['cpp:parent_key'] = key
        if self.is_anon():
            pnode += nodes.strong(text='[anonymous]')
        else:
            pnode += nodes.Text(self.identifier)
        signode += pnode
    elif mode == 'lastIsName':
        if self.is_anon():
            signode += nodes.strong(text='[anonymous]')
        else:
            signode += addnodes.desc_name(self.identifier, self.identifier)
    elif mode == 'noneIsName':
        if self.is_anon():
            signode += nodes.strong(text='[anonymous]')
        else:
            signode += nodes.Text(self.identifier)
    else:
        raise Exception('Unknown description mode: %s' % mode)","def process_signature_description(self, signode: TextElement, mode: str, env: 'BuildEnvironment', prefix: str, templateArgs: str, symbol: 'Symbol') -> None:
    verify_description_mode(mode)
    if mode == 'markType':
        targetText = prefix + self.identifier + templateArgs
        pnode = addnodes.pending_xref('', refdomain='cpp', reftype='identifier', reftarget=targetText, modname=None, classname=None)
        key = symbol.get_lookup_key()
        pnode['cpp:parent_key'] = key
        if self.is_anon():
            pnode += nodes.strong(text='[anonymous]')
        else:
            pnode += nodes.Text(self.identifier)
        signode += pnode
    elif mode == 'lastIsName':
        if self.is_anon():
            signode += nodes.strong(text='[anonymous]')
        else:
            signode += addnodes.desc_name(self.identifier, self.identifier)
    elif mode == 'noneIsName':
        if self.is_anon():
            signode += nodes.strong(text='[anonymous]')
        else:
            signode += nodes.Text(self.identifier)
    else:
        raise Exception('Unknown description mode: %s' % mode)","[{""var"": ""pnode"", ""rename"": ""pendingReferenceNode""}, {""var"": ""targetText"", ""rename"": ""constructedIdentifier""}, {""var"": ""key"", ""rename"": ""symbol_lookup_key""}]"
./sphinx/domains/cpp.py,__init__,initialize_identifier_or_operator_with_template_args,632,635,"def __init__(self, identOrOp: Union[ASTIdentifier, 'ASTOperator'], templateArgs: 'ASTTemplateArgs') -> None:
    self.identOrOp = identOrOp
    self.templateArgs = templateArgs","def initialize_identifier_or_operator_with_template_args(self, identOrOp: Union[ASTIdentifier, 'ASTOperator'], templateArgs: 'ASTTemplateArgs') -> None:
    self.identOrOp = identOrOp
    self.templateArgs = templateArgs",[]
./sphinx/domains/cpp.py,is_operator,always_returns_false,637,638,"def is_operator(self) -> bool:
    return False","def always_returns_false(self) -> bool:
    return False",[]
./sphinx/domains/cpp.py,get_id,generate_full_identifier,640,644,"def get_id(self, version: int) -> str:
    res = self.identOrOp.get_id(version)
    if self.templateArgs:
        res += self.templateArgs.get_id(version)
    return res","def generate_full_identifier(self, version: int) -> str:
    res = self.identOrOp.get_id(version)
    if self.templateArgs:
        res += self.templateArgs.get_id(version)
    return res","[{""var"": ""res"", ""rename"": ""constructedIdentifier""}]"
./sphinx/domains/cpp.py,get_id,generate_identifier_from_data_length,848,850,"def get_id(self, version: int) -> str:
    return 'LA%d_KcE' % (len(self.data) - 2)","def generate_identifier_from_data_length(self, version: int) -> str:
    return 'LA%d_KcE' % (len(self.data) - 2)",[]
./sphinx/domains/cpp.py,describe_signature,append_literal_to_signature,892,894,"def describe_signature(self, signode: TextElement, mode: str, env: 'BuildEnvironment', symbol: 'Symbol') -> None:
    signode.append(nodes.Text('this'))","def append_literal_to_signature(self, signode: TextElement, mode: str, env: 'BuildEnvironment', symbol: 'Symbol') -> None:
    signode.append(nodes.Text('this'))",[]
./sphinx/domains/cpp.py,__init__,initializeBinaryOperationExpression,898,903,"def __init__(self, leftExpr: ASTExpression, op: str, rightExpr: ASTExpression) -> None:
    assert leftExpr is not None or rightExpr is not None
    self.leftExpr = leftExpr
    self.op = op
    self.rightExpr = rightExpr","def initializeBinaryOperationExpression(self, leftExpr: ASTExpression, op: str, rightExpr: ASTExpression) -> None:
    assert leftExpr is not None or rightExpr is not None
    self.leftExpr = leftExpr
    self.op = op
    self.rightExpr = rightExpr",[]
./sphinx/domains/cpp.py,_stringify,generate_expression_string,905,919,"def _stringify(self, transform: StringifyTransform) -> str:
    res = ['(']
    if self.leftExpr:
        res.append(transform(self.leftExpr))
        res.append(' ')
        res.append(transform(self.op))
        res.append(' ')
    res.append('...')
    if self.rightExpr:
        res.append(' ')
        res.append(transform(self.op))
        res.append(' ')
        res.append(transform(self.rightExpr))
    res.append(')')
    return ''.join(res)","def generate_expression_string(self, transform: StringifyTransform) -> str:
    res = ['(']
    if self.leftExpr:
        res.append(transform(self.leftExpr))
        res.append(' ')
        res.append(transform(self.op))
        res.append(' ')
    res.append('...')
    if self.rightExpr:
        res.append(' ')
        res.append(transform(self.op))
        res.append(' ')
        res.append(transform(self.rightExpr))
    res.append(')')
    return ''.join(res)","[{""var"": ""res"", ""rename"": ""expression_components""}]"
./sphinx/domains/cpp.py,get_id,generate_expression_identifier,921,940,"def get_id(self, version: int) -> str:
    assert version >= 3
    if version == 3:
        return str(self)
    res = []
    if self.leftExpr is None:
        res.append('fl')
    elif self.rightExpr is None:
        res.append('fr')
    else:
        res.append('fL')
    res.append(_id_operator_v2[self.op])
    if self.leftExpr:
        res.append(self.leftExpr.get_id(version))
    if self.rightExpr:
        res.append(self.rightExpr.get_id(version))
    return ''.join(res)","def generate_expression_identifier(self, version: int) -> str:
    assert version >= 3
    if version == 3:
        return str(self)
    res = []
    if self.leftExpr is None:
        res.append('fl')
    elif self.rightExpr is None:
        res.append('fr')
    else:
        res.append('fL')
    res.append(_id_operator_v2[self.op])
    if self.leftExpr:
        res.append(self.leftExpr.get_id(version))
    if self.rightExpr:
        res.append(self.rightExpr.get_id(version))
    return ''.join(res)","[{""var"": ""res"", ""rename"": ""expression_id_components""}]"
./sphinx/domains/cpp.py,_parse_fold_or_paren_expression,_parse_fold_and_parenthesis_expression,4688,4745,"def _parse_fold_or_paren_expression(self) -> ASTExpression:
    if self.current_char != '(':
        return None
    self.pos += 1
    self.skip_ws()
    if self.skip_string_and_ws('...'):
        if not self.match(_fold_operator_re):
            self.fail(""Expected fold operator after '...' in fold expression."")
        op = self.matched_text
        rightExpr = self._parse_cast_expression()
        if not self.skip_string(')'):
            self.fail(""Expected ')' in end of fold expression."")
        return ASTFoldExpr(None, op, rightExpr)
    pos = self.pos
    try:
        self.skip_ws()
        leftExpr = self._parse_cast_expression()
        self.skip_ws()
        if not self.match(_fold_operator_re):
            self.fail('Expected fold operator after left expression in fold expression.')
        op = self.matched_text
        self.skip_ws()
        if not self.skip_string_and_ws('...'):
            self.fail(""Expected '...' after fold operator in fold expression."")
    except DefinitionError as eFold:
        self.pos = pos
        try:
            res = self._parse_expression()
            self.skip_ws()
            if not self.skip_string(')'):
                self.fail(""Expected ')' in end of parenthesized expression."")
        except DefinitionError as eExpr:
            raise self._make_multi_error([(eFold, 'If fold expression'), (eExpr, 'If parenthesized expression')], 'Error in fold expression or parenthesized expression.')
        return ASTParenExpr(res)
    if self.skip_string(')'):
        return ASTFoldExpr(leftExpr, op, None)
    if not self.match(_fold_operator_re):
        self.fail(""Expected fold operator or ')' after '...' in fold expression."")
    if op != self.matched_text:
        self.fail(""Operators are different in binary fold: '%s' and '%s'."" % (op, self.matched_text))
    rightExpr = self._parse_cast_expression()
    self.skip_ws()
    if not self.skip_string(')'):
        self.fail(""Expected ')' to end binary fold expression."")
    return ASTFoldExpr(leftExpr, op, rightExpr)","def _parse_fold_and_parenthesis_expression(self) -> ASTExpression:
    if self.current_char != '(':
        return None
    self.pos += 1
    self.skip_ws()
    if self.skip_string_and_ws('...'):
        if not self.match(_fold_operator_re):
            self.fail(""Expected fold operator after '...' in fold expression."")
        op = self.matched_text
        rightExpr = self._parse_cast_expression()
        if not self.skip_string(')'):
            self.fail(""Expected ')' in end of fold expression."")
        return ASTFoldExpr(None, op, rightExpr)
    pos = self.pos
    try:
        self.skip_ws()
        leftExpr = self._parse_cast_expression()
        self.skip_ws()
        if not self.match(_fold_operator_re):
            self.fail('Expected fold operator after left expression in fold expression.')
        op = self.matched_text
        self.skip_ws()
        if not self.skip_string_and_ws('...'):
            self.fail(""Expected '...' after fold operator in fold expression."")
    except DefinitionError as eFold:
        self.pos = pos
        try:
            res = self._parse_expression()
            self.skip_ws()
            if not self.skip_string(')'):
                self.fail(""Expected ')' in end of parenthesized expression."")
        except DefinitionError as eExpr:
            raise self._make_multi_error([(eFold, 'If fold expression'), (eExpr, 'If parenthesized expression')], 'Error in fold expression or parenthesized expression.')
        return ASTParenExpr(res)
    if self.skip_string(')'):
        return ASTFoldExpr(leftExpr, op, None)
    if not self.match(_fold_operator_re):
        self.fail(""Expected fold operator or ')' after '...' in fold expression."")
    if op != self.matched_text:
        self.fail(""Operators are different in binary fold: '%s' and '%s'."" % (op, self.matched_text))
    rightExpr = self._parse_cast_expression()
    self.skip_ws()
    if not self.skip_string(')'):
        self.fail(""Expected ')' to end binary fold expression."")
    return ASTFoldExpr(leftExpr, op, rightExpr)","[{""var"": ""pos"", ""rename"": ""initial_position""}, {""var"": ""rightExpr"", ""rename"": ""rightHandExpression""}, {""var"": ""res"", ""rename"": ""parsedExpression""}, {""var"": ""op"", ""rename"": ""foldOperator""}, {""var"": ""leftExpr"", ""rename"": ""initialSubExpression""}]"
