file,method_name,new_method_name,start_line,end_line,original_code,code,var
./lib/matplotlib/offsetbox.py,_get_aligned_offsets,calculate_box_alignment_offsets,130,179,"def _get_aligned_offsets(hd_list, height, align='baseline'):
    """"""
    Align boxes each specified by their ``(height, descent)`` pair.

    For simplicity of the description, the terminology used here assumes a
    horizontal layout (i.e., vertical alignment), but the function works
    equally for a vertical layout.

    Parameters
    ----------
    hd_list
        List of (height, xdescent) of boxes to be aligned.
    height : float or None
        Intended total height. If None, the maximum of the heights in *hd_list*
        is used.
    align : {'baseline', 'left', 'top', 'right', 'bottom', 'center'}
        The alignment anchor of the boxes.

    Returns
    -------
    height
        The total height of the packing (if a value was originally passed in,
        it is returned without checking that it is actually large enough).
    descent
        The descent of the packing.
    offsets
        The bottom offsets of the boxes.
    """"""
    if height is None:
        height = max((h for h, d in hd_list))
    _api.check_in_list(['baseline', 'left', 'top', 'right', 'bottom', 'center'], align=align)
    if align == 'baseline':
        height_descent = max((h - d for h, d in hd_list))
        descent = max((d for h, d in hd_list))
        height = height_descent + descent
        offsets = [0.0 for h, d in hd_list]
    elif align in ['left', 'top']:
        descent = 0.0
        offsets = [d for h, d in hd_list]
    elif align in ['right', 'bottom']:
        descent = 0.0
        offsets = [height - h + d for h, d in hd_list]
    elif align == 'center':
        descent = 0.0
        offsets = [(height - h) * 0.5 + d for h, d in hd_list]
    return (height, descent, offsets)","def calculate_box_alignment_offsets(hd_list, height, align='baseline'):
    """"""
    Align boxes each specified by their ``(height, descent)`` pair.

    For simplicity of the description, the terminology used here assumes a
    horizontal layout (i.e., vertical alignment), but the function works
    equally for a vertical layout.

    Parameters
    ----------
    hd_list
        List of (height, xdescent) of boxes to be aligned.
    height : float or None
        Intended total height. If None, the maximum of the heights in *hd_list*
        is used.
    align : {'baseline', 'left', 'top', 'right', 'bottom', 'center'}
        The alignment anchor of the boxes.

    Returns
    -------
    height
        The total height of the packing (if a value was originally passed in,
        it is returned without checking that it is actually large enough).
    descent
        The descent of the packing.
    offsets
        The bottom offsets of the boxes.
    """"""
    if height is None:
        height = max((h for h, d in hd_list))
    _api.check_in_list(['baseline', 'left', 'top', 'right', 'bottom', 'center'], align=align)
    if align == 'baseline':
        height_descent = max((h - d for h, d in hd_list))
        descent = max((d for h, d in hd_list))
        height = height_descent + descent
        offsets = [0.0 for h, d in hd_list]
    elif align in ['left', 'top']:
        descent = 0.0
        offsets = [d for h, d in hd_list]
    elif align in ['right', 'bottom']:
        descent = 0.0
        offsets = [height - h + d for h, d in hd_list]
    elif align == 'center':
        descent = 0.0
        offsets = [(height - h) * 0.5 + d for h, d in hd_list]
    return (height, descent, offsets)","[{""var"": ""descent"", ""rename"": ""packing_descent""}, {""var"": ""height_descent"", ""rename"": ""max_box_extension""}, {""var"": ""offsets"", ""rename"": ""box_bottom_offsets""}, {""var"": ""h"", ""rename"": ""box_height""}, {""var"": ""d"", ""rename"": ""descent_value""}]"
