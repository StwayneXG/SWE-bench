file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/db/migrations/operations/models.py,reduce,transform_model_operation,124,243,"def reduce(self, operation, app_label):
    if isinstance(operation, DeleteModel) and self.name_lower == operation.name_lower and (not self.options.get('proxy', False)):
        return []
    elif isinstance(operation, RenameModel) and self.name_lower == operation.old_name_lower:
        return [CreateModel(operation.new_name, fields=self.fields, options=self.options, bases=self.bases, managers=self.managers)]
    elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:
        return [CreateModel(self.name, fields=self.fields, options={**self.options, **operation.options}, bases=self.bases, managers=self.managers)]
    elif isinstance(operation, AlterTogetherOptionOperation) and self.name_lower == operation.name_lower:
        return [CreateModel(self.name, fields=self.fields, options={**self.options, **{operation.option_name: operation.option_value}}, bases=self.bases, managers=self.managers)]
    elif isinstance(operation, AlterOrderWithRespectTo) and self.name_lower == operation.name_lower:
        return [CreateModel(self.name, fields=self.fields, options={**self.options, 'order_with_respect_to': operation.order_with_respect_to}, bases=self.bases, managers=self.managers)]
    elif isinstance(operation, FieldOperation) and self.name_lower == operation.model_name_lower:
        if isinstance(operation, AddField):
            return [CreateModel(self.name, fields=self.fields + [(operation.name, operation.field)], options=self.options, bases=self.bases, managers=self.managers)]
        elif isinstance(operation, AlterField):
            return [CreateModel(self.name, fields=[(n, operation.field if n == operation.name else v) for n, v in self.fields], options=self.options, bases=self.bases, managers=self.managers)]
        elif isinstance(operation, RemoveField):
            options = self.options.copy()
            for option_name in ('unique_together', 'index_together'):
                option = options.pop(option_name, None)
                if option:
                    option = set(filter(bool, (tuple((f for f in fields if f != operation.name_lower)) for fields in option)))
                    if option:
                        options[option_name] = option
            order_with_respect_to = options.get('order_with_respect_to')
            if order_with_respect_to == operation.name_lower:
                del options['order_with_respect_to']
            return [CreateModel(self.name, fields=[(n, v) for n, v in self.fields if n.lower() != operation.name_lower], options=options, bases=self.bases, managers=self.managers)]
        elif isinstance(operation, RenameField):
            options = self.options.copy()
            for option_name in ('unique_together', 'index_together'):
                option = options.get(option_name)
                if option:
                    options[option_name] = {tuple((operation.new_name if f == operation.old_name else f for f in fields)) for fields in option}
            order_with_respect_to = options.get('order_with_respect_to')
            if order_with_respect_to == operation.old_name:
                options['order_with_respect_to'] = operation.new_name
            return [CreateModel(self.name, fields=[(operation.new_name if n == operation.old_name else n, v) for n, v in self.fields], options=options, bases=self.bases, managers=self.managers)]
    return super().reduce(operation, app_label)","def transform_model_operation(self, operation, app_label):
    if isinstance(operation, DeleteModel) and self.name_lower == operation.name_lower and (not self.options.get('proxy', False)):
        return []
    elif isinstance(operation, RenameModel) and self.name_lower == operation.old_name_lower:
        return [CreateModel(operation.new_name, fields=self.fields, options=self.options, bases=self.bases, managers=self.managers)]
    elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:
        return [CreateModel(self.name, fields=self.fields, options={**self.options, **operation.options}, bases=self.bases, managers=self.managers)]
    elif isinstance(operation, AlterTogetherOptionOperation) and self.name_lower == operation.name_lower:
        return [CreateModel(self.name, fields=self.fields, options={**self.options, **{operation.option_name: operation.option_value}}, bases=self.bases, managers=self.managers)]
    elif isinstance(operation, AlterOrderWithRespectTo) and self.name_lower == operation.name_lower:
        return [CreateModel(self.name, fields=self.fields, options={**self.options, 'order_with_respect_to': operation.order_with_respect_to}, bases=self.bases, managers=self.managers)]
    elif isinstance(operation, FieldOperation) and self.name_lower == operation.model_name_lower:
        if isinstance(operation, AddField):
            return [CreateModel(self.name, fields=self.fields + [(operation.name, operation.field)], options=self.options, bases=self.bases, managers=self.managers)]
        elif isinstance(operation, AlterField):
            return [CreateModel(self.name, fields=[(n, operation.field if n == operation.name else v) for n, v in self.fields], options=self.options, bases=self.bases, managers=self.managers)]
        elif isinstance(operation, RemoveField):
            options = self.options.copy()
            for option_name in ('unique_together', 'index_together'):
                option = options.pop(option_name, None)
                if option:
                    option = set(filter(bool, (tuple((f for f in fields if f != operation.name_lower)) for fields in option)))
                    if option:
                        options[option_name] = option
            order_with_respect_to = options.get('order_with_respect_to')
            if order_with_respect_to == operation.name_lower:
                del options['order_with_respect_to']
            return [CreateModel(self.name, fields=[(n, v) for n, v in self.fields if n.lower() != operation.name_lower], options=options, bases=self.bases, managers=self.managers)]
        elif isinstance(operation, RenameField):
            options = self.options.copy()
            for option_name in ('unique_together', 'index_together'):
                option = options.get(option_name)
                if option:
                    options[option_name] = {tuple((operation.new_name if f == operation.old_name else f for f in fields)) for fields in option}
            order_with_respect_to = options.get('order_with_respect_to')
            if order_with_respect_to == operation.old_name:
                options['order_with_respect_to'] = operation.new_name
            return [CreateModel(self.name, fields=[(operation.new_name if n == operation.old_name else n, v) for n, v in self.fields], options=options, bases=self.bases, managers=self.managers)]
    return super().reduce(operation, app_label)","[{""var"": ""n"", ""rename"": ""field_name""}, {""var"": ""f"", ""rename"": ""operation_reducer""}, {""var"": ""v"", ""rename"": ""current_field""}, {""var"": ""option"", ""rename"": ""field_restrictions""}, {""var"": ""option_name"", ""rename"": ""model_option_name""}, {""var"": ""order_with_respect_to"", ""rename"": ""ordering_dependency_field""}, {""var"": ""options"", ""rename"": ""model_options""}, {""var"": ""fields"", ""rename"": ""model_field_definitions""}]"
