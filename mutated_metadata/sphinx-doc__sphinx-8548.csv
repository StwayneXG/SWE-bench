file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sphinx/ext/autodoc/__init__.py,get_object_members,filter_and_select_object_members,1586,1606,"def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:
    members = get_class_members(self.object, self.objpath, self.get_attr, self.analyzer)
    if not want_all:
        if not self.options.members:
            return (False, [])
        selected = []
        for name in self.options.members:
            if name in members:
                selected.append(ObjectMember(name, members[name].value, docstring=members[name].docstring))
            else:
                logger.warning(__('missing attribute %s in object %s') % (name, self.fullname), type='autodoc')
        return (False, selected)
    elif self.options.inherited_members:
        return (False, [ObjectMember(m.name, m.value, docstring=m.docstring) for m in members.values()])
    else:
        return (False, [ObjectMember(m.name, m.value, docstring=m.docstring) for m in members.values() if m.class_ == self.object])","def filter_and_select_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:
    members = get_class_members(self.object, self.objpath, self.get_attr, self.analyzer)
    if not want_all:
        if not self.options.members:
            return (False, [])
        selected = []
        for name in self.options.members:
            if name in members:
                selected.append(ObjectMember(name, members[name].value, docstring=members[name].docstring))
            else:
                logger.warning(__('missing attribute %s in object %s') % (name, self.fullname), type='autodoc')
        return (False, selected)
    elif self.options.inherited_members:
        return (False, [ObjectMember(m.name, m.value, docstring=m.docstring) for m in members.values()])
    else:
        return (False, [ObjectMember(m.name, m.value, docstring=m.docstring) for m in members.values() if m.class_ == self.object])","[{""var"": ""members"", ""rename"": ""object_member_details""}, {""var"": ""selected"", ""rename"": ""filtered_members_list""}, {""var"": ""name"", ""rename"": ""requested_member_name""}, {""var"": ""m"", ""rename"": ""member_collection""}]"
./sphinx/ext/autodoc/importer.py,get_class_members,extract_class_attributes_and_members,254,318,"def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable, analyzer: ModuleAnalyzer=None) -> Dict[str, ClassAttribute]:
    """"""Get members and attributes of target class.""""""
    from sphinx.ext.autodoc import INSTANCEATTR
    obj_dict = attrgetter(subject, '__dict__', {})
    members = {}
    if isenumclass(subject):
        for name, value in subject.__members__.items():
            if name not in members:
                members[name] = ClassAttribute(subject, name, value)
        superclass = subject.__mro__[1]
        for name in obj_dict:
            if name not in superclass.__dict__:
                value = safe_getattr(subject, name)
                members[name] = ClassAttribute(subject, name, value)
    try:
        __slots__ = getslots(subject)
        if __slots__:
            from sphinx.ext.autodoc import SLOTSATTR
            for name, docstring in __slots__.items():
                members[name] = ClassAttribute(subject, name, SLOTSATTR, docstring)
    except (AttributeError, TypeError, ValueError):
        pass
    for name in dir(subject):
        try:
            value = attrgetter(subject, name)
            unmangled = unmangle(subject, name)
            if unmangled and unmangled not in members:
                if name in obj_dict:
                    members[unmangled] = ClassAttribute(subject, unmangled, value)
                else:
                    members[unmangled] = ClassAttribute(None, unmangled, value)
        except AttributeError:
            continue
    for cls in getmro(subject):
        try:
            for name in getannotations(cls):
                name = unmangle(cls, name)
                if name and name not in members:
                    members[name] = ClassAttribute(cls, name, INSTANCEATTR)
        except AttributeError:
            pass
    if analyzer:
        namespace = '.'.join(objpath)
        for (ns, name), docstring in analyzer.attr_docs.items():
            if namespace == ns and name not in members:
                members[name] = ClassAttribute(subject, name, INSTANCEATTR, '\n'.join(docstring))
    return members","def extract_class_attributes_and_members(subject: Any, objpath: List[str], attrgetter: Callable, analyzer: ModuleAnalyzer=None) -> Dict[str, ClassAttribute]:
    """"""Get members and attributes of target class.""""""
    from sphinx.ext.autodoc import INSTANCEATTR
    obj_dict = attrgetter(subject, '__dict__', {})
    members = {}
    if isenumclass(subject):
        for name, value in subject.__members__.items():
            if name not in members:
                members[name] = ClassAttribute(subject, name, value)
        superclass = subject.__mro__[1]
        for name in obj_dict:
            if name not in superclass.__dict__:
                value = safe_getattr(subject, name)
                members[name] = ClassAttribute(subject, name, value)
    try:
        __slots__ = getslots(subject)
        if __slots__:
            from sphinx.ext.autodoc import SLOTSATTR
            for name, docstring in __slots__.items():
                members[name] = ClassAttribute(subject, name, SLOTSATTR, docstring)
    except (AttributeError, TypeError, ValueError):
        pass
    for name in dir(subject):
        try:
            value = attrgetter(subject, name)
            unmangled = unmangle(subject, name)
            if unmangled and unmangled not in members:
                if name in obj_dict:
                    members[unmangled] = ClassAttribute(subject, unmangled, value)
                else:
                    members[unmangled] = ClassAttribute(None, unmangled, value)
        except AttributeError:
            continue
    for cls in getmro(subject):
        try:
            for name in getannotations(cls):
                name = unmangle(cls, name)
                if name and name not in members:
                    members[name] = ClassAttribute(cls, name, INSTANCEATTR)
        except AttributeError:
            pass
    if analyzer:
        namespace = '.'.join(objpath)
        for (ns, name), docstring in analyzer.attr_docs.items():
            if namespace == ns and name not in members:
                members[name] = ClassAttribute(subject, name, INSTANCEATTR, '\n'.join(docstring))
    return members","[{""var"": ""name"", ""rename"": ""member_name""}, {""var"": ""ns"", ""rename"": ""namespace""}, {""var"": ""obj_dict"", ""rename"": ""subject_attributes_dict""}, {""var"": ""docstring"", ""rename"": ""attribute_docstring""}, {""var"": ""namespace"", ""rename"": ""objpath_namespace""}, {""var"": ""unmangled"", ""rename"": ""unmangled_name""}, {""var"": ""superclass"", ""rename"": ""parent_class_reference""}, {""var"": ""cls"", ""rename"": ""class_hierarchy""}, {""var"": ""members"", ""rename"": ""class_member_attributes""}, {""var"": ""value"", ""rename"": ""attribute_value""}]"
