file,method_name,new_method_name,start_line,end_line,original_code,code,var
./lib/matplotlib/axes/_base.py,_update_patch_limits,update_data_limits_for_patch,2420,2458,"def _update_patch_limits(self, patch):
    """"""Update the data limits for the given patch.""""""
    if isinstance(patch, mpatches.Rectangle) and (not patch.get_width() and (not patch.get_height())):
        return
    p = patch.get_path()
    vertices = []
    for curve, code in p.iter_bezier():
        _, dzeros = curve.axis_aligned_extrema()
        vertices.append(curve([0, *dzeros, 1]))
    if len(vertices):
        vertices = np.row_stack(vertices)
    patch_trf = patch.get_transform()
    updatex, updatey = patch_trf.contains_branch_seperately(self.transData)
    if not (updatex or updatey):
        return
    if self.name != 'rectilinear':
        if updatex and patch_trf == self.get_yaxis_transform():
            updatex = False
        if updatey and patch_trf == self.get_xaxis_transform():
            updatey = False
    trf_to_data = patch_trf - self.transData
    xys = trf_to_data.transform(vertices)
    self.update_datalim(xys, updatex=updatex, updatey=updatey)","def update_data_limits_for_patch(self, patch):
    """"""Update the data limits for the given patch.""""""
    if isinstance(patch, mpatches.Rectangle) and (not patch.get_width() and (not patch.get_height())):
        return
    p = patch.get_path()
    vertices = []
    for curve, code in p.iter_bezier():
        _, dzeros = curve.axis_aligned_extrema()
        vertices.append(curve([0, *dzeros, 1]))
    if len(vertices):
        vertices = np.row_stack(vertices)
    patch_trf = patch.get_transform()
    updatex, updatey = patch_trf.contains_branch_seperately(self.transData)
    if not (updatex or updatey):
        return
    if self.name != 'rectilinear':
        if updatex and patch_trf == self.get_yaxis_transform():
            updatex = False
        if updatey and patch_trf == self.get_xaxis_transform():
            updatey = False
    trf_to_data = patch_trf - self.transData
    xys = trf_to_data.transform(vertices)
    self.update_datalim(xys, updatex=updatex, updatey=updatey)","[{""var"": ""patch_trf"", ""rename"": ""patch_transform""}, {""var"": ""dzeros"", ""rename"": ""axis_aligned_extrema_points""}, {""var"": ""updatey"", ""rename"": ""should_update_y_limit""}, {""var"": ""p"", ""rename"": ""patch_path""}, {""var"": ""_"", ""rename"": ""update_patch_data_limits""}, {""var"": ""trf_to_data"", ""rename"": ""transform_to_data_space""}, {""var"": ""curve"", ""rename"": ""bezier_curve_segment""}, {""var"": ""code"", ""rename"": ""path_segment_code""}, {""var"": ""vertices"", ""rename"": ""curve_extrema_points""}, {""var"": ""updatex"", ""rename"": ""xlimit_needs_update""}, {""var"": ""xys"", ""rename"": ""transformed_vertices""}]"
