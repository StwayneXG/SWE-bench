file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sphinx/cmd/quickstart.py,allow_empty,return_input_unmodified,98,99,"def allow_empty(x: str) -> str:
    return x","def return_input_unmodified(x: str) -> str:
    return x",[]
./sphinx/cmd/quickstart.py,nonempty,validate_non_empty_string,102,105,"def nonempty(x: str) -> str:
    if not x:
        raise ValidationError(__('Please enter some text.'))
    return x","def validate_non_empty_string(x: str) -> str:
    if not x:
        raise ValidationError(__('Please enter some text.'))
    return x",[]
./sphinx/cmd/quickstart.py,ask_user,configure_sphinx_quickstart,185,320,"def ask_user(d: Dict) -> None:
    """"""Ask the user for quickstart values missing from *d*.

    Values are:

    * path:      root path
    * sep:       separate source and build dirs (bool)
    * dot:       replacement for dot in _templates etc.
    * project:   project name
    * author:    author names
    * version:   version of project
    * release:   release of project
    * language:  document language
    * suffix:    source file suffix
    * master:    master document name
    * extensions:  extensions to use (list)
    * makefile:  make Makefile
    * batchfile: make command file
    """"""
    print(bold(__('Welcome to the Sphinx %s quickstart utility.')) % __display_version__)
    print()
    print(__('Please enter values for the following settings (just press Enter to\naccept a default value, if one is given in brackets).'))
    if 'path' in d:
        print()
        print(bold(__('Selected root path: %s')) % d['path'])
    else:
        print()
        print(__('Enter the root path for documentation.'))
        d['path'] = do_prompt(__('Root path for the documentation'), '.', is_path)
    while path.isfile(path.join(d['path'], 'conf.py')) or path.isfile(path.join(d['path'], 'source', 'conf.py')):
        print()
        print(bold(__('Error: an existing conf.py has been found in the selected root path.')))
        print(__('sphinx-quickstart will not overwrite existing Sphinx projects.'))
        print()
        d['path'] = do_prompt(__('Please enter a new root path (or just Enter to exit)'), '', is_path)
        if not d['path']:
            sys.exit(1)
    if 'sep' not in d:
        print()
        print(__('You have two options for placing the build directory for Sphinx output.\nEither, you use a directory ""_build"" within the root path, or you separate\n""source"" and ""build"" directories within the root path.'))
        d['sep'] = do_prompt(__('Separate source and build directories (y/n)'), 'n', boolean)
    if 'dot' not in d:
        print()
        print(__('Inside the root directory, two more directories will be created; ""_templates""\nfor custom HTML templates and ""_static"" for custom stylesheets and other static\nfiles. You can enter another prefix (such as ""."") to replace the underscore.'))
        d['dot'] = do_prompt(__('Name prefix for templates and static dir'), '_', ok)
    if 'project' not in d:
        print()
        print(__('The project name will occur in several places in the built documentation.'))
        d['project'] = do_prompt(__('Project name'))
    if 'author' not in d:
        d['author'] = do_prompt(__('Author name(s)'))
    if 'version' not in d:
        print()
        print(__('Sphinx has the notion of a ""version"" and a ""release"" for the\nsoftware. Each version can have multiple releases. For example, for\nPython the version is something like 2.5 or 3.0, while the release is\nsomething like 2.5.1 or 3.0a1. If you don\'t need this dual structure,\njust set both to the same value.'))
        d['version'] = do_prompt(__('Project version'), '', allow_empty)
    if 'release' not in d:
        d['release'] = do_prompt(__('Project release'), d['version'], allow_empty)
    if 'language' not in d:
        print()
        print(__('If the documents are to be written in a language other than English,\nyou can select a language here by its language code. Sphinx will then\ntranslate text that it generates into that language.\n\nFor a list of supported codes, see\nhttps://www.sphinx-doc.org/en/master/usage/configuration.html#confval-language.'))
        d['language'] = do_prompt(__('Project language'), 'en')
        if d['language'] == 'en':
            d['language'] = None
    if 'suffix' not in d:
        print()
        print(__('The file name suffix for source files. Commonly, this is either "".txt""\nor "".rst"". Only files with this suffix are considered documents.'))
        d['suffix'] = do_prompt(__('Source file suffix'), '.rst', suffix)
    if 'master' not in d:
        print()
        print(__('One document is special in that it is considered the top node of the\n""contents tree"", that is, it is the root of the hierarchical structure\nof the documents. Normally, this is ""index"", but if your ""index""\ndocument is a custom template, you can also set this to another filename.'))
        d['master'] = do_prompt(__('Name of your master document (without suffix)'), 'index')
    while path.isfile(path.join(d['path'], d['master'] + d['suffix'])) or path.isfile(path.join(d['path'], 'source', d['master'] + d['suffix'])):
        print()
        print(bold(__('Error: the master file %s has already been found in the selected root path.') % (d['master'] + d['suffix'])))
        print(__('sphinx-quickstart will not overwrite the existing file.'))
        print()
        d['master'] = do_prompt(__('Please enter a new file name, or rename the existing file and press Enter'), d['master'])
    if 'extensions' not in d:
        print(__('Indicate which of the following Sphinx extensions should be enabled:'))
        d['extensions'] = []
        for name, description in EXTENSIONS.items():
            if do_prompt('%s: %s (y/n)' % (name, description), 'n', boolean):
                d['extensions'].append('sphinx.ext.%s' % name)
        if {'sphinx.ext.imgmath', 'sphinx.ext.mathjax'}.issubset(d['extensions']):
            print(__('Note: imgmath and mathjax cannot be enabled at the same time. imgmath has been deselected.'))
            d['extensions'].remove('sphinx.ext.imgmath')
    if 'makefile' not in d:
        print()
        print(__(""A Makefile and a Windows command file can be generated for you so that you\nonly have to run e.g. `make html' instead of invoking sphinx-build\ndirectly.""))
        d['makefile'] = do_prompt(__('Create Makefile? (y/n)'), 'y', boolean)
    if 'batchfile' not in d:
        d['batchfile'] = do_prompt(__('Create Windows command file? (y/n)'), 'y', boolean)
    print()","def configure_sphinx_quickstart(d: Dict) -> None:
    """"""Ask the user for quickstart values missing from *d*.

    Values are:

    * path:      root path
    * sep:       separate source and build dirs (bool)
    * dot:       replacement for dot in _templates etc.
    * project:   project name
    * author:    author names
    * version:   version of project
    * release:   release of project
    * language:  document language
    * suffix:    source file suffix
    * master:    master document name
    * extensions:  extensions to use (list)
    * makefile:  make Makefile
    * batchfile: make command file
    """"""
    print(bold(__('Welcome to the Sphinx %s quickstart utility.')) % __display_version__)
    print()
    print(__('Please enter values for the following settings (just press Enter to\naccept a default value, if one is given in brackets).'))
    if 'path' in d:
        print()
        print(bold(__('Selected root path: %s')) % d['path'])
    else:
        print()
        print(__('Enter the root path for documentation.'))
        d['path'] = do_prompt(__('Root path for the documentation'), '.', is_path)
    while path.isfile(path.join(d['path'], 'conf.py')) or path.isfile(path.join(d['path'], 'source', 'conf.py')):
        print()
        print(bold(__('Error: an existing conf.py has been found in the selected root path.')))
        print(__('sphinx-quickstart will not overwrite existing Sphinx projects.'))
        print()
        d['path'] = do_prompt(__('Please enter a new root path (or just Enter to exit)'), '', is_path)
        if not d['path']:
            sys.exit(1)
    if 'sep' not in d:
        print()
        print(__('You have two options for placing the build directory for Sphinx output.\nEither, you use a directory ""_build"" within the root path, or you separate\n""source"" and ""build"" directories within the root path.'))
        d['sep'] = do_prompt(__('Separate source and build directories (y/n)'), 'n', boolean)
    if 'dot' not in d:
        print()
        print(__('Inside the root directory, two more directories will be created; ""_templates""\nfor custom HTML templates and ""_static"" for custom stylesheets and other static\nfiles. You can enter another prefix (such as ""."") to replace the underscore.'))
        d['dot'] = do_prompt(__('Name prefix for templates and static dir'), '_', ok)
    if 'project' not in d:
        print()
        print(__('The project name will occur in several places in the built documentation.'))
        d['project'] = do_prompt(__('Project name'))
    if 'author' not in d:
        d['author'] = do_prompt(__('Author name(s)'))
    if 'version' not in d:
        print()
        print(__('Sphinx has the notion of a ""version"" and a ""release"" for the\nsoftware. Each version can have multiple releases. For example, for\nPython the version is something like 2.5 or 3.0, while the release is\nsomething like 2.5.1 or 3.0a1. If you don\'t need this dual structure,\njust set both to the same value.'))
        d['version'] = do_prompt(__('Project version'), '', allow_empty)
    if 'release' not in d:
        d['release'] = do_prompt(__('Project release'), d['version'], allow_empty)
    if 'language' not in d:
        print()
        print(__('If the documents are to be written in a language other than English,\nyou can select a language here by its language code. Sphinx will then\ntranslate text that it generates into that language.\n\nFor a list of supported codes, see\nhttps://www.sphinx-doc.org/en/master/usage/configuration.html#confval-language.'))
        d['language'] = do_prompt(__('Project language'), 'en')
        if d['language'] == 'en':
            d['language'] = None
    if 'suffix' not in d:
        print()
        print(__('The file name suffix for source files. Commonly, this is either "".txt""\nor "".rst"". Only files with this suffix are considered documents.'))
        d['suffix'] = do_prompt(__('Source file suffix'), '.rst', suffix)
    if 'master' not in d:
        print()
        print(__('One document is special in that it is considered the top node of the\n""contents tree"", that is, it is the root of the hierarchical structure\nof the documents. Normally, this is ""index"", but if your ""index""\ndocument is a custom template, you can also set this to another filename.'))
        d['master'] = do_prompt(__('Name of your master document (without suffix)'), 'index')
    while path.isfile(path.join(d['path'], d['master'] + d['suffix'])) or path.isfile(path.join(d['path'], 'source', d['master'] + d['suffix'])):
        print()
        print(bold(__('Error: the master file %s has already been found in the selected root path.') % (d['master'] + d['suffix'])))
        print(__('sphinx-quickstart will not overwrite the existing file.'))
        print()
        d['master'] = do_prompt(__('Please enter a new file name, or rename the existing file and press Enter'), d['master'])
    if 'extensions' not in d:
        print(__('Indicate which of the following Sphinx extensions should be enabled:'))
        d['extensions'] = []
        for name, description in EXTENSIONS.items():
            if do_prompt('%s: %s (y/n)' % (name, description), 'n', boolean):
                d['extensions'].append('sphinx.ext.%s' % name)
        if {'sphinx.ext.imgmath', 'sphinx.ext.mathjax'}.issubset(d['extensions']):
            print(__('Note: imgmath and mathjax cannot be enabled at the same time. imgmath has been deselected.'))
            d['extensions'].remove('sphinx.ext.imgmath')
    if 'makefile' not in d:
        print()
        print(__(""A Makefile and a Windows command file can be generated for you so that you\nonly have to run e.g. `make html' instead of invoking sphinx-build\ndirectly.""))
        d['makefile'] = do_prompt(__('Create Makefile? (y/n)'), 'y', boolean)
    if 'batchfile' not in d:
        d['batchfile'] = do_prompt(__('Create Windows command file? (y/n)'), 'y', boolean)
    print()","[{""var"": ""name"", ""rename"": ""user_input_name""}, {""var"": ""description"", ""rename"": ""quickstart_prompt_description""}]"
