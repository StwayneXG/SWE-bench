file,method_name,new_method_name,start_line,end_line,original_code,code,var
./requests/sessions.py,request,send_http_request,269,363,"def request(self, method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None, timeout=None, allow_redirects=True, proxies=None, hooks=None, stream=None, verify=None, cert=None):
    """"""Constructs a :class:`Request <Request>`, prepares it and sends it.
        Returns :class:`Response <Response>` object.

        :param method: method for the new :class:`Request` object.
        :param url: URL for the new :class:`Request` object.
        :param params: (optional) Dictionary or bytes to be sent in the query
            string for the :class:`Request`.
        :param data: (optional) Dictionary or bytes to send in the body of the
            :class:`Request`.
        :param headers: (optional) Dictionary of HTTP Headers to send with the
            :class:`Request`.
        :param cookies: (optional) Dict or CookieJar object to send with the
            :class:`Request`.
        :param files: (optional) Dictionary of 'filename': file-like-objects
            for multipart encoding upload.
        :param auth: (optional) Auth tuple or callable to enable
            Basic/Digest/Custom HTTP Auth.
        :param timeout: (optional) Float describing the timeout of the
            request.
        :param allow_redirects: (optional) Boolean. Set to True by default.
        :param proxies: (optional) Dictionary mapping protocol to the URL of
            the proxy.
        :param stream: (optional) whether to immediately download the response
            content. Defaults to ``False``.
        :param verify: (optional) if ``True``, the SSL cert will be verified.
            A CA_BUNDLE path can also be provided.
        :param cert: (optional) if String, path to ssl client cert file (.pem).
            If Tuple, ('cert', 'key') pair.
        """"""
    req = Request(method=method.upper(), url=url, headers=headers, files=files, data=data or {}, params=params or {}, auth=auth, cookies=cookies, hooks=hooks)
    prep = self.prepare_request(req)
    self.cookies = cookiejar_from_dict(cookies, cookiejar=self.cookies, overwrite=False)
    proxies = proxies or {}
    if self.trust_env:
        env_proxies = get_environ_proxies(url) or {}
        for k, v in env_proxies.items():
            proxies.setdefault(k, v)
        if not verify and verify is not False:
            verify = os.environ.get('REQUESTS_CA_BUNDLE')
        if not verify and verify is not False:
            verify = os.environ.get('CURL_CA_BUNDLE')
    proxies = merge_setting(proxies, self.proxies)
    stream = merge_setting(stream, self.stream)
    verify = merge_setting(verify, self.verify)
    cert = merge_setting(cert, self.cert)
    send_kwargs = {'stream': stream, 'timeout': timeout, 'verify': verify, 'cert': cert, 'proxies': proxies, 'allow_redirects': allow_redirects}
    resp = self.send(prep, **send_kwargs)
    return resp","def send_http_request(self, method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None, timeout=None, allow_redirects=True, proxies=None, hooks=None, stream=None, verify=None, cert=None):
    """"""Constructs a :class:`Request <Request>`, prepares it and sends it.
        Returns :class:`Response <Response>` object.

        :param method: method for the new :class:`Request` object.
        :param url: URL for the new :class:`Request` object.
        :param params: (optional) Dictionary or bytes to be sent in the query
            string for the :class:`Request`.
        :param data: (optional) Dictionary or bytes to send in the body of the
            :class:`Request`.
        :param headers: (optional) Dictionary of HTTP Headers to send with the
            :class:`Request`.
        :param cookies: (optional) Dict or CookieJar object to send with the
            :class:`Request`.
        :param files: (optional) Dictionary of 'filename': file-like-objects
            for multipart encoding upload.
        :param auth: (optional) Auth tuple or callable to enable
            Basic/Digest/Custom HTTP Auth.
        :param timeout: (optional) Float describing the timeout of the
            request.
        :param allow_redirects: (optional) Boolean. Set to True by default.
        :param proxies: (optional) Dictionary mapping protocol to the URL of
            the proxy.
        :param stream: (optional) whether to immediately download the response
            content. Defaults to ``False``.
        :param verify: (optional) if ``True``, the SSL cert will be verified.
            A CA_BUNDLE path can also be provided.
        :param cert: (optional) if String, path to ssl client cert file (.pem).
            If Tuple, ('cert', 'key') pair.
        """"""
    req = Request(method=method.upper(), url=url, headers=headers, files=files, data=data or {}, params=params or {}, auth=auth, cookies=cookies, hooks=hooks)
    prep = self.prepare_request(req)
    self.cookies = cookiejar_from_dict(cookies, cookiejar=self.cookies, overwrite=False)
    proxies = proxies or {}
    if self.trust_env:
        env_proxies = get_environ_proxies(url) or {}
        for k, v in env_proxies.items():
            proxies.setdefault(k, v)
        if not verify and verify is not False:
            verify = os.environ.get('REQUESTS_CA_BUNDLE')
        if not verify and verify is not False:
            verify = os.environ.get('CURL_CA_BUNDLE')
    proxies = merge_setting(proxies, self.proxies)
    stream = merge_setting(stream, self.stream)
    verify = merge_setting(verify, self.verify)
    cert = merge_setting(cert, self.cert)
    send_kwargs = {'stream': stream, 'timeout': timeout, 'verify': verify, 'cert': cert, 'proxies': proxies, 'allow_redirects': allow_redirects}
    resp = self.send(prep, **send_kwargs)
    return resp","[{""var"": ""k"", ""rename"": ""env_proxy_key""}, {""var"": ""resp"", ""rename"": ""http_response""}, {""var"": ""env_proxies"", ""rename"": ""environment_proxy_settings""}, {""var"": ""v"", ""rename"": ""env_proxy_value""}, {""var"": ""send_kwargs"", ""rename"": ""request_settings""}, {""var"": ""req"", ""rename"": ""http_request""}, {""var"": ""prep"", ""rename"": ""prepared_request""}]"
