file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sphinx/ext/inheritance_diagram.py,html_visit_inheritance_diagram,render_inheritance_diagram_html,398,428,"def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diagram) -> None:
    """"""
    Output the graph for HTML.  This will insert a PNG with clickable
    image map.
    """"""
    graph = node['graph']
    graph_hash = get_graph_hash(node)
    name = 'inheritance%s' % graph_hash
    graphviz_output_format = self.builder.env.config.graphviz_output_format.upper()
    current_filename = self.builder.current_docname + self.builder.out_suffix
    urls = {}
    pending_xrefs = cast(Iterable[addnodes.pending_xref], node)
    for child in pending_xrefs:
        if child.get('refuri') is not None:
            if graphviz_output_format == 'SVG':
                urls[child['reftitle']] = '../' + child.get('refuri')
            else:
                urls[child['reftitle']] = child.get('refuri')
        elif child.get('refid') is not None:
            if graphviz_output_format == 'SVG':
                urls[child['reftitle']] = '../' + current_filename + '#' + child.get('refid')
            else:
                urls[child['reftitle']] = '#' + child.get('refid')
    dotcode = graph.generate_dot(name, urls, env=self.builder.env)
    render_dot_html(self, node, dotcode, {}, 'inheritance', 'inheritance', alt='Inheritance diagram of ' + node['content'])
    raise nodes.SkipNode","def render_inheritance_diagram_html(self: HTML5Translator, node: inheritance_diagram) -> None:
    """"""
    Output the graph for HTML.  This will insert a PNG with clickable
    image map.
    """"""
    graph = node['graph']
    graph_hash = get_graph_hash(node)
    name = 'inheritance%s' % graph_hash
    graphviz_output_format = self.builder.env.config.graphviz_output_format.upper()
    current_filename = self.builder.current_docname + self.builder.out_suffix
    urls = {}
    pending_xrefs = cast(Iterable[addnodes.pending_xref], node)
    for child in pending_xrefs:
        if child.get('refuri') is not None:
            if graphviz_output_format == 'SVG':
                urls[child['reftitle']] = '../' + child.get('refuri')
            else:
                urls[child['reftitle']] = child.get('refuri')
        elif child.get('refid') is not None:
            if graphviz_output_format == 'SVG':
                urls[child['reftitle']] = '../' + current_filename + '#' + child.get('refid')
            else:
                urls[child['reftitle']] = '#' + child.get('refid')
    dotcode = graph.generate_dot(name, urls, env=self.builder.env)
    render_dot_html(self, node, dotcode, {}, 'inheritance', 'inheritance', alt='Inheritance diagram of ' + node['content'])
    raise nodes.SkipNode","[{""var"": ""dotcode"", ""rename"": ""graph_dot_representation""}, {""var"": ""name"", ""rename"": ""inheritance_diagram_identifier""}, {""var"": ""graphviz_output_format"", ""rename"": ""graphviz_format_selection""}, {""var"": ""pending_xrefs"", ""rename"": ""xref_url_mapping""}, {""var"": ""graph_hash"", ""rename"": ""inheritance_diagram_hash""}, {""var"": ""current_filename"", ""rename"": ""output_filename_with_suffix""}, {""var"": ""urls"", ""rename"": ""inheritance_diagram_urls""}, {""var"": ""graph"", ""rename"": ""inheritance_diagram_graph""}, {""var"": ""child"", ""rename"": ""xref_node""}]"
