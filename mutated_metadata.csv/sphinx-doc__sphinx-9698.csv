file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sphinx/domains/python.py,get_index_text,generate_formatted_method_signature,784,803,"def get_index_text(self, modname: str, name_cls: Tuple[str, str]) -> str:
    name, cls = name_cls
    try:
        clsname, methname = name.rsplit('.', 1)
        if modname and self.env.config.add_module_names:
            clsname = '.'.join([modname, clsname])
    except ValueError:
        if modname:
            return _('%s() (in module %s)') % (name, modname)
        else:
            return '%s()' % name
    if 'classmethod' in self.options:
        return _('%s() (%s class method)') % (methname, clsname)
    elif 'property' in self.options:
        return _('%s() (%s property)') % (methname, clsname)
    elif 'staticmethod' in self.options:
        return _('%s() (%s static method)') % (methname, clsname)
    else:
        return _('%s() (%s method)') % (methname, clsname)","def generate_formatted_method_signature(self, modname: str, name_cls: Tuple[str, str]) -> str:
    name, cls = name_cls
    try:
        clsname, methname = name.rsplit('.', 1)
        if modname and self.env.config.add_module_names:
            clsname = '.'.join([modname, clsname])
    except ValueError:
        if modname:
            return _('%s() (in module %s)') % (name, modname)
        else:
            return '%s()' % name
    if 'classmethod' in self.options:
        return _('%s() (%s class method)') % (methname, clsname)
    elif 'property' in self.options:
        return _('%s() (%s property)') % (methname, clsname)
    elif 'staticmethod' in self.options:
        return _('%s() (%s static method)') % (methname, clsname)
    else:
        return _('%s() (%s method)') % (methname, clsname)","[{""var"": ""methname"", ""rename"": ""method_name""}, {""var"": ""name"", ""rename"": ""qualified_method_name""}, {""var"": ""clsname"", ""rename"": ""class_name""}, {""var"": ""cls"", ""rename"": ""class_details""}]"
