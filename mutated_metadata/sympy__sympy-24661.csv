file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sympy/parsing/sympy_parser.py,flatten,unroll_nested_calls,1122,1135,"def flatten(self, args, func):
    result = []
    for arg in args:
        if isinstance(arg, ast.Call):
            arg_func = arg.func
            if isinstance(arg_func, ast.Call):
                arg_func = arg_func.func
            if arg_func.id == func:
                result.extend(self.flatten(arg.args, func))
            else:
                result.append(arg)
        else:
            result.append(arg)
    return result","def unroll_nested_calls(self, args, func):
    result = []
    for arg in args:
        if isinstance(arg, ast.Call):
            arg_func = arg.func
            if isinstance(arg_func, ast.Call):
                arg_func = arg_func.func
            if arg_func.id == func:
                result.extend(self.flatten(arg.args, func))
            else:
                result.append(arg)
        else:
            result.append(arg)
    return result","[{""var"": ""arg_func"", ""rename"": ""nested_function_call""}, {""var"": ""result"", ""rename"": ""flattened_argument_list""}, {""var"": ""arg"", ""rename"": ""argument_expression""}]"
./sympy/parsing/sympy_parser.py,visit_BinOp,transform_binary_operation_to_sympy_node,1137,1187,"def visit_BinOp(self, node):
    if node.op.__class__ in self.operators:
        sympy_class = self.operators[node.op.__class__]
        right = self.visit(node.right)
        left = self.visit(node.left)
        rev = False
        if isinstance(node.op, ast.Sub):
            right = ast.Call(func=ast.Name(id='Mul', ctx=ast.Load()), args=[ast.UnaryOp(op=ast.USub(), operand=ast.Num(1)), right], keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))], starargs=None, kwargs=None)
        elif isinstance(node.op, ast.Div):
            if isinstance(node.left, ast.UnaryOp):
                left, right = (right, left)
                rev = True
                left = ast.Call(func=ast.Name(id='Pow', ctx=ast.Load()), args=[left, ast.UnaryOp(op=ast.USub(), operand=ast.Num(1))], keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))], starargs=None, kwargs=None)
            else:
                right = ast.Call(func=ast.Name(id='Pow', ctx=ast.Load()), args=[right, ast.UnaryOp(op=ast.USub(), operand=ast.Num(1))], keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))], starargs=None, kwargs=None)
        if rev:
            left, right = (right, left)
        new_node = ast.Call(func=ast.Name(id=sympy_class, ctx=ast.Load()), args=[left, right], keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))], starargs=None, kwargs=None)
        if sympy_class in ('Add', 'Mul'):
            new_node.args = self.flatten(new_node.args, sympy_class)
        return new_node
    return node","def transform_binary_operation_to_sympy_node(self, node):
    if node.op.__class__ in self.operators:
        sympy_class = self.operators[node.op.__class__]
        right = self.visit(node.right)
        left = self.visit(node.left)
        rev = False
        if isinstance(node.op, ast.Sub):
            right = ast.Call(func=ast.Name(id='Mul', ctx=ast.Load()), args=[ast.UnaryOp(op=ast.USub(), operand=ast.Num(1)), right], keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))], starargs=None, kwargs=None)
        elif isinstance(node.op, ast.Div):
            if isinstance(node.left, ast.UnaryOp):
                left, right = (right, left)
                rev = True
                left = ast.Call(func=ast.Name(id='Pow', ctx=ast.Load()), args=[left, ast.UnaryOp(op=ast.USub(), operand=ast.Num(1))], keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))], starargs=None, kwargs=None)
            else:
                right = ast.Call(func=ast.Name(id='Pow', ctx=ast.Load()), args=[right, ast.UnaryOp(op=ast.USub(), operand=ast.Num(1))], keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))], starargs=None, kwargs=None)
        if rev:
            left, right = (right, left)
        new_node = ast.Call(func=ast.Name(id=sympy_class, ctx=ast.Load()), args=[left, right], keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))], starargs=None, kwargs=None)
        if sympy_class in ('Add', 'Mul'):
            new_node.args = self.flatten(new_node.args, sympy_class)
        return new_node
    return node","[{""var"": ""sympy_class"", ""rename"": ""sympy_operator_class""}, {""var"": ""rev"", ""rename"": ""operation_reversed""}, {""var"": ""left"", ""rename"": ""left_operand_expression""}, {""var"": ""new_node"", ""rename"": ""transformed_binop_node""}, {""var"": ""right"", ""rename"": ""right_operand""}]"
