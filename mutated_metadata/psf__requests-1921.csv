file,method_name,new_method_name,start_line,end_line,original_code,code,var
./requests/sessions.py,merge_setting,merge_request_session_settings,34,62,"def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
    """"""
    Determines appropriate setting for a given request, taking into account the
    explicit setting on that request, and the setting in the session. If a
    setting is a dictionary, they will be merged together using `dict_class`
    """"""
    if session_setting is None:
        return request_setting
    if request_setting is None:
        return session_setting
    if not (isinstance(session_setting, Mapping) and isinstance(request_setting, Mapping)):
        return request_setting
    merged_setting = dict_class(to_key_val_list(session_setting))
    merged_setting.update(to_key_val_list(request_setting))
    for k, v in request_setting.items():
        if v is None:
            del merged_setting[k]
    return merged_setting","def merge_request_session_settings(request_setting, session_setting, dict_class=OrderedDict):
    """"""
    Determines appropriate setting for a given request, taking into account the
    explicit setting on that request, and the setting in the session. If a
    setting is a dictionary, they will be merged together using `dict_class`
    """"""
    if session_setting is None:
        return request_setting
    if request_setting is None:
        return session_setting
    if not (isinstance(session_setting, Mapping) and isinstance(request_setting, Mapping)):
        return request_setting
    merged_setting = dict_class(to_key_val_list(session_setting))
    merged_setting.update(to_key_val_list(request_setting))
    for k, v in request_setting.items():
        if v is None:
            del merged_setting[k]
    return merged_setting","[{""var"": ""v"", ""rename"": ""request_value""}, {""var"": ""merged_setting"", ""rename"": ""consolidated_settings""}, {""var"": ""k"", ""rename"": ""key""}]"
