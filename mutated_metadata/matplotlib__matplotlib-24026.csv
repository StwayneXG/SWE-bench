file,method_name,new_method_name,start_line,end_line,original_code,code,var
./lib/matplotlib/stackplot.py,stackplot,create_stacked_area_chart,16,124,"def stackplot(axes, x, *args, labels=(), colors=None, baseline='zero', **kwargs):
    """"""
    Draw a stacked area plot.

    Parameters
    ----------
    x : (N,) array-like

    y : (M, N) array-like
        The data is assumed to be unstacked. Each of the following
        calls is legal::

            stackplot(x, y)           # where y has shape (M, N)
            stackplot(x, y1, y2, y3)  # where y1, y2, y3, y4 have length N

    baseline : {'zero', 'sym', 'wiggle', 'weighted_wiggle'}
        Method used to calculate the baseline:

        - ``'zero'``: Constant zero baseline, i.e. a simple stacked plot.
        - ``'sym'``:  Symmetric around zero and is sometimes called
          'ThemeRiver'.
        - ``'wiggle'``: Minimizes the sum of the squared slopes.
        - ``'weighted_wiggle'``: Does the same but weights to account for
          size of each layer. It is also called 'Streamgraph'-layout. More
          details can be found at http://leebyron.com/streamgraph/.

    labels : list of str, optional
        A sequence of labels to assign to each data series. If unspecified,
        then no labels will be applied to artists.

    colors : list of color, optional
        A sequence of colors to be cycled through and used to color the stacked
        areas. The sequence need not be exactly the same length as the number
        of provided *y*, in which case the colors will repeat from the
        beginning.

        If not specified, the colors from the Axes property cycle will be used.

    data : indexable object, optional
        DATA_PARAMETER_PLACEHOLDER

    **kwargs
        All other keyword arguments are passed to `.Axes.fill_between`.

    Returns
    -------
    list of `.PolyCollection`
        A list of `.PolyCollection` instances, one for each element in the
        stacked area plot.
    """"""
    y = np.row_stack(args)
    labels = iter(labels)
    if colors is not None:
        axes.set_prop_cycle(color=colors)
    stack = np.cumsum(y, axis=0, dtype=np.promote_types(y.dtype, np.float32))
    _api.check_in_list(['zero', 'sym', 'wiggle', 'weighted_wiggle'], baseline=baseline)
    if baseline == 'zero':
        first_line = 0.0
    elif baseline == 'sym':
        first_line = -np.sum(y, 0) * 0.5
        stack += first_line[None, :]
    elif baseline == 'wiggle':
        m = y.shape[0]
        first_line = (y * (m - 0.5 - np.arange(m)[:, None])).sum(0)
        first_line /= -m
        stack += first_line
    elif baseline == 'weighted_wiggle':
        total = np.sum(y, 0)
        inv_total = np.zeros_like(total)
        mask = total > 0
        inv_total[mask] = 1.0 / total[mask]
        increase = np.hstack((y[:, 0:1], np.diff(y)))
        below_size = total - stack
        below_size += 0.5 * y
        move_up = below_size * inv_total
        move_up[:, 0] = 0.5
        center = (move_up - 0.5) * increase
        center = np.cumsum(center.sum(0))
        first_line = center - 0.5 * total
        stack += first_line
    color = axes._get_lines.get_next_color()
    coll = axes.fill_between(x, first_line, stack[0, :], facecolor=color, label=next(labels, None), **kwargs)
    coll.sticky_edges.y[:] = [0]
    r = [coll]
    for i in range(len(y) - 1):
        color = axes._get_lines.get_next_color()
        r.append(axes.fill_between(x, stack[i, :], stack[i + 1, :], facecolor=color, label=next(labels, None), **kwargs))
    return r","def create_stacked_area_chart(axes, x, *args, labels=(), colors=None, baseline='zero', **kwargs):
    """"""
    Draw a stacked area plot.

    Parameters
    ----------
    x : (N,) array-like

    y : (M, N) array-like
        The data is assumed to be unstacked. Each of the following
        calls is legal::

            stackplot(x, y)           # where y has shape (M, N)
            stackplot(x, y1, y2, y3)  # where y1, y2, y3, y4 have length N

    baseline : {'zero', 'sym', 'wiggle', 'weighted_wiggle'}
        Method used to calculate the baseline:

        - ``'zero'``: Constant zero baseline, i.e. a simple stacked plot.
        - ``'sym'``:  Symmetric around zero and is sometimes called
          'ThemeRiver'.
        - ``'wiggle'``: Minimizes the sum of the squared slopes.
        - ``'weighted_wiggle'``: Does the same but weights to account for
          size of each layer. It is also called 'Streamgraph'-layout. More
          details can be found at http://leebyron.com/streamgraph/.

    labels : list of str, optional
        A sequence of labels to assign to each data series. If unspecified,
        then no labels will be applied to artists.

    colors : list of color, optional
        A sequence of colors to be cycled through and used to color the stacked
        areas. The sequence need not be exactly the same length as the number
        of provided *y*, in which case the colors will repeat from the
        beginning.

        If not specified, the colors from the Axes property cycle will be used.

    data : indexable object, optional
        DATA_PARAMETER_PLACEHOLDER

    **kwargs
        All other keyword arguments are passed to `.Axes.fill_between`.

    Returns
    -------
    list of `.PolyCollection`
        A list of `.PolyCollection` instances, one for each element in the
        stacked area plot.
    """"""
    y = np.row_stack(args)
    labels = iter(labels)
    if colors is not None:
        axes.set_prop_cycle(color=colors)
    stack = np.cumsum(y, axis=0, dtype=np.promote_types(y.dtype, np.float32))
    _api.check_in_list(['zero', 'sym', 'wiggle', 'weighted_wiggle'], baseline=baseline)
    if baseline == 'zero':
        first_line = 0.0
    elif baseline == 'sym':
        first_line = -np.sum(y, 0) * 0.5
        stack += first_line[None, :]
    elif baseline == 'wiggle':
        m = y.shape[0]
        first_line = (y * (m - 0.5 - np.arange(m)[:, None])).sum(0)
        first_line /= -m
        stack += first_line
    elif baseline == 'weighted_wiggle':
        total = np.sum(y, 0)
        inv_total = np.zeros_like(total)
        mask = total > 0
        inv_total[mask] = 1.0 / total[mask]
        increase = np.hstack((y[:, 0:1], np.diff(y)))
        below_size = total - stack
        below_size += 0.5 * y
        move_up = below_size * inv_total
        move_up[:, 0] = 0.5
        center = (move_up - 0.5) * increase
        center = np.cumsum(center.sum(0))
        first_line = center - 0.5 * total
        stack += first_line
    color = axes._get_lines.get_next_color()
    coll = axes.fill_between(x, first_line, stack[0, :], facecolor=color, label=next(labels, None), **kwargs)
    coll.sticky_edges.y[:] = [0]
    r = [coll]
    for i in range(len(y) - 1):
        color = axes._get_lines.get_next_color()
        r.append(axes.fill_between(x, stack[i, :], stack[i + 1, :], facecolor=color, label=next(labels, None), **kwargs))
    return r","[{""var"": ""total"", ""rename"": ""cumulative_data_total""}, {""var"": ""y"", ""rename"": ""stacked_data_array""}, {""var"": ""below_size"", ""rename"": ""layer_below_height""}, {""var"": ""color"", ""rename"": ""current_area_color""}, {""var"": ""r"", ""rename"": ""stacked_area_collections""}, {""var"": ""i"", ""rename"": ""stack_index""}, {""var"": ""first_line"", ""rename"": ""baseline_offset""}, {""var"": ""m"", ""rename"": ""num_layers""}, {""var"": ""center"", ""rename"": ""vertical_offset_center""}, {""var"": ""coll"", ""rename"": ""collection_poly""}, {""var"": ""inv_total"", ""rename"": ""inverse_total""}, {""var"": ""stack"", ""rename"": ""cumulative_stack""}, {""var"": ""move_up"", ""rename"": ""baseline_shift""}, {""var"": ""increase"", ""rename"": ""layer_difference""}, {""var"": ""mask"", ""rename"": ""non_zero_mask""}]"
