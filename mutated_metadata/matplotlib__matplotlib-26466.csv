file,method_name,new_method_name,start_line,end_line,original_code,code,var
./lib/matplotlib/text.py,__init__,initialize_artist_offset,1373,1393,"def __init__(self, artist, ref_coord, unit='points'):
    """"""
        Parameters
        ----------
        artist : `~matplotlib.artist.Artist` or `.BboxBase` or `.Transform`
            The object to compute the offset from.

        ref_coord : (float, float)
            If *artist* is an `.Artist` or `.BboxBase`, this values is
            the location to of the offset origin in fractions of the
            *artist* bounding box.

            If *artist* is a transform, the offset origin is the
            transform applied to this value.

        unit : {'points, 'pixels'}, default: 'points'
            The screen units to use (pixels or points) for the offset input.
        """"""
    self._artist = artist
    self._ref_coord = ref_coord
    self.set_unit(unit)","def initialize_artist_offset(self, artist, ref_coord, unit='points'):
    """"""
        Parameters
        ----------
        artist : `~matplotlib.artist.Artist` or `.BboxBase` or `.Transform`
            The object to compute the offset from.

        ref_coord : (float, float)
            If *artist* is an `.Artist` or `.BboxBase`, this values is
            the location to of the offset origin in fractions of the
            *artist* bounding box.

            If *artist* is a transform, the offset origin is the
            transform applied to this value.

        unit : {'points, 'pixels'}, default: 'points'
            The screen units to use (pixels or points) for the offset input.
        """"""
    self._artist = artist
    self._ref_coord = ref_coord
    self.set_unit(unit)",[]
./lib/matplotlib/text.py,__call__,compute_offset_transform,1417,1450,"def __call__(self, renderer):
    """"""
        Return the offset transform.

        Parameters
        ----------
        renderer : `RendererBase`
            The renderer to use to compute the offset

        Returns
        -------
        `Transform`
            Maps (x, y) in pixel or point units to screen units
            relative to the given artist.
        """"""
    if isinstance(self._artist, Artist):
        bbox = self._artist.get_window_extent(renderer)
        xf, yf = self._ref_coord
        x = bbox.x0 + bbox.width * xf
        y = bbox.y0 + bbox.height * yf
    elif isinstance(self._artist, BboxBase):
        bbox = self._artist
        xf, yf = self._ref_coord
        x = bbox.x0 + bbox.width * xf
        y = bbox.y0 + bbox.height * yf
    elif isinstance(self._artist, Transform):
        x, y = self._artist.transform(self._ref_coord)
    else:
        _api.check_isinstance((Artist, BboxBase, Transform), artist=self._artist)
    sc = self._get_scale(renderer)
    tr = Affine2D().scale(sc).translate(x, y)
    return tr","def compute_offset_transform(self, renderer):
    """"""
        Return the offset transform.

        Parameters
        ----------
        renderer : `RendererBase`
            The renderer to use to compute the offset

        Returns
        -------
        `Transform`
            Maps (x, y) in pixel or point units to screen units
            relative to the given artist.
        """"""
    if isinstance(self._artist, Artist):
        bbox = self._artist.get_window_extent(renderer)
        xf, yf = self._ref_coord
        x = bbox.x0 + bbox.width * xf
        y = bbox.y0 + bbox.height * yf
    elif isinstance(self._artist, BboxBase):
        bbox = self._artist
        xf, yf = self._ref_coord
        x = bbox.x0 + bbox.width * xf
        y = bbox.y0 + bbox.height * yf
    elif isinstance(self._artist, Transform):
        x, y = self._artist.transform(self._ref_coord)
    else:
        _api.check_isinstance((Artist, BboxBase, Transform), artist=self._artist)
    sc = self._get_scale(renderer)
    tr = Affine2D().scale(sc).translate(x, y)
    return tr","[{""var"": ""yf"", ""rename"": ""y_fraction""}, {""var"": ""y"", ""rename"": ""y_offset_coordinate""}, {""var"": ""xf"", ""rename"": ""x_offset_factor""}, {""var"": ""x"", ""rename"": ""offset_x_coordinate""}, {""var"": ""tr"", ""rename"": ""offsetTransform""}, {""var"": ""sc"", ""rename"": ""scaling_factor""}, {""var"": ""bbox"", ""rename"": ""bounding_box_offset""}]"
