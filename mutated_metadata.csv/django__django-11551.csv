file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/contrib/admin/checks.py,_check_list_display_item,_validate_list_display_item_for_admin,718,749,"def _check_list_display_item(self, obj, item, label):
    if callable(item):
        return []
    elif hasattr(obj, item):
        return []
    elif hasattr(obj.model, item):
        try:
            field = obj.model._meta.get_field(item)
        except FieldDoesNotExist:
            return []
        else:
            if isinstance(field, models.ManyToManyField):
                return [checks.Error(""The value of '%s' must not be a ManyToManyField."" % label, obj=obj.__class__, id='admin.E109')]
            return []
    else:
        return [checks.Error(""The value of '%s' refers to '%s', which is not a callable, an attribute of '%s', or an attribute or method on '%s.%s'."" % (label, item, obj.__class__.__name__, obj.model._meta.app_label, obj.model._meta.object_name), obj=obj.__class__, id='admin.E108')]","def _validate_list_display_item_for_admin(self, obj, item, label):
    if callable(item):
        return []
    elif hasattr(obj, item):
        return []
    elif hasattr(obj.model, item):
        try:
            field = obj.model._meta.get_field(item)
        except FieldDoesNotExist:
            return []
        else:
            if isinstance(field, models.ManyToManyField):
                return [checks.Error(""The value of '%s' must not be a ManyToManyField."" % label, obj=obj.__class__, id='admin.E109')]
            return []
    else:
        return [checks.Error(""The value of '%s' refers to '%s', which is not a callable, an attribute of '%s', or an attribute or method on '%s.%s'."" % (label, item, obj.__class__.__name__, obj.model._meta.app_label, obj.model._meta.object_name), obj=obj.__class__, id='admin.E108')]","[{""var"": ""field"", ""rename"": ""model_field_instance""}]"
