file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/contrib/admin/options.py,formfield_for_foreignkey,configure_foreignkey_formfield_with_widgets,251,279,"def formfield_for_foreignkey(self, db_field, request, **kwargs):
    """"""
        Get a form Field for a ForeignKey.
        """"""
    db = kwargs.get('using')
    if 'widget' not in kwargs:
        if db_field.name in self.get_autocomplete_fields(request):
            kwargs['widget'] = AutocompleteSelect(db_field, self.admin_site, using=db)
        elif db_field.name in self.raw_id_fields:
            kwargs['widget'] = widgets.ForeignKeyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
        elif db_field.name in self.radio_fields:
            kwargs['widget'] = widgets.AdminRadioSelect(attrs={'class': get_ul_class(self.radio_fields[db_field.name])})
            kwargs['empty_label'] = _('None') if db_field.blank else None
    if 'queryset' not in kwargs:
        queryset = self.get_field_queryset(db, db_field, request)
        if queryset is not None:
            kwargs['queryset'] = queryset
    return db_field.formfield(**kwargs)","def configure_foreignkey_formfield_with_widgets(self, db_field, request, **kwargs):
    """"""
        Get a form Field for a ForeignKey.
        """"""
    db = kwargs.get('using')
    if 'widget' not in kwargs:
        if db_field.name in self.get_autocomplete_fields(request):
            kwargs['widget'] = AutocompleteSelect(db_field, self.admin_site, using=db)
        elif db_field.name in self.raw_id_fields:
            kwargs['widget'] = widgets.ForeignKeyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
        elif db_field.name in self.radio_fields:
            kwargs['widget'] = widgets.AdminRadioSelect(attrs={'class': get_ul_class(self.radio_fields[db_field.name])})
            kwargs['empty_label'] = _('None') if db_field.blank else None
    if 'queryset' not in kwargs:
        queryset = self.get_field_queryset(db, db_field, request)
        if queryset is not None:
            kwargs['queryset'] = queryset
    return db_field.formfield(**kwargs)","[{""var"": ""queryset"", ""rename"": ""related_model_query_set""}, {""var"": ""db"", ""rename"": ""database_alias""}]"
