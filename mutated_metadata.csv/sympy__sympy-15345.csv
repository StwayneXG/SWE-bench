file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sympy/printing/mathematica.py,_print_Integral,formatIntegralExpressionForHold,104,109,"def _print_Integral(self, expr):
    if len(expr.variables) == 1 and (not expr.limits[0][1:]):
        args = [expr.args[0], expr.variables[0]]
    else:
        args = expr.args
    return 'Hold[Integrate[' + ', '.join((self.doprint(a) for a in args)) + ']]'","def formatIntegralExpressionForHold(self, expr):
    if len(expr.variables) == 1 and (not expr.limits[0][1:]):
        args = [expr.args[0], expr.variables[0]]
    else:
        args = expr.args
    return 'Hold[Integrate[' + ', '.join((self.doprint(a) for a in args)) + ']]'","[{""var"": ""a"", ""rename"": ""integration_argument""}, {""var"": ""args"", ""rename"": ""integral_components""}]"
