file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/db/models/deletion.py,can_fast_delete,is_batch_deletion_possible_without_cascade_or_signals,119,155,"def can_fast_delete(self, objs, from_field=None):
    """"""
        Determine if the objects in the given queryset-like or single object
        can be fast-deleted. This can be done if there are no cascades, no
        parents and no signal listeners for the object class.

        The 'from_field' tells where we are coming from - we need this to
        determine if the objects are in fact to be deleted. Allow also
        skipping parent -> child -> parent chain preventing fast delete of
        the child.
        """"""
    if from_field and from_field.remote_field.on_delete is not CASCADE:
        return False
    if hasattr(objs, '_meta'):
        model = type(objs)
    elif hasattr(objs, 'model') and hasattr(objs, '_raw_delete'):
        model = objs.model
    else:
        return False
    if signals.pre_delete.has_listeners(model) or signals.post_delete.has_listeners(model) or signals.m2m_changed.has_listeners(model):
        return False
    opts = model._meta
    return all((link == from_field for link in opts.concrete_model._meta.parents.values())) and all((related.field.remote_field.on_delete is DO_NOTHING for related in get_candidate_relations_to_delete(opts))) and (not any((hasattr(field, 'bulk_related_objects') for field in opts.private_fields)))","def is_batch_deletion_possible_without_cascade_or_signals(self, objs, from_field=None):
    """"""
        Determine if the objects in the given queryset-like or single object
        can be fast-deleted. This can be done if there are no cascades, no
        parents and no signal listeners for the object class.

        The 'from_field' tells where we are coming from - we need this to
        determine if the objects are in fact to be deleted. Allow also
        skipping parent -> child -> parent chain preventing fast delete of
        the child.
        """"""
    if from_field and from_field.remote_field.on_delete is not CASCADE:
        return False
    if hasattr(objs, '_meta'):
        model = type(objs)
    elif hasattr(objs, 'model') and hasattr(objs, '_raw_delete'):
        model = objs.model
    else:
        return False
    if signals.pre_delete.has_listeners(model) or signals.post_delete.has_listeners(model) or signals.m2m_changed.has_listeners(model):
        return False
    opts = model._meta
    return all((link == from_field for link in opts.concrete_model._meta.parents.values())) and all((related.field.remote_field.on_delete is DO_NOTHING for related in get_candidate_relations_to_delete(opts))) and (not any((hasattr(field, 'bulk_related_objects') for field in opts.private_fields)))","[{""var"": ""link"", ""rename"": ""parent_link""}, {""var"": ""field"", ""rename"": ""originating_relationship_field""}, {""var"": ""related"", ""rename"": ""candidate_relation""}, {""var"": ""model"", ""rename"": ""target_object_model""}, {""var"": ""opts"", ""rename"": ""model_metadata_options""}]"
./django/db/models/deletion.py,collect,aggregate_related_deletions,169,229,"def collect(self, objs, source=None, nullable=False, collect_related=True, source_attr=None, reverse_dependency=False, keep_parents=False):
    """"""
        Add 'objs' to the collection of objects to be deleted as well as all
        parent instances.  'objs' must be a homogeneous iterable collection of
        model instances (e.g. a QuerySet).  If 'collect_related' is True,
        related objects will be handled by their respective on_delete handler.

        If the call is the result of a cascade, 'source' should be the model
        that caused it and 'nullable' should be set to True, if the relation
        can be null.

        If 'reverse_dependency' is True, 'source' will be deleted before the
        current model, rather than after. (Needed for cascading to parent
        models, the one case in which the cascade follows the forwards
        direction of an FK rather than the reverse direction.)

        If 'keep_parents' is True, data of parent model's will be not deleted.
        """"""
    if self.can_fast_delete(objs):
        self.fast_deletes.append(objs)
        return
    new_objs = self.add(objs, source, nullable, reverse_dependency=reverse_dependency)
    if not new_objs:
        return
    model = new_objs[0].__class__
    if not keep_parents:
        concrete_model = model._meta.concrete_model
        for ptr in concrete_model._meta.parents.values():
            if ptr:
                parent_objs = [getattr(obj, ptr.name) for obj in new_objs]
                self.collect(parent_objs, source=model, source_attr=ptr.remote_field.related_name, collect_related=False, reverse_dependency=True)
    if collect_related:
        parents = model._meta.parents
        for related in get_candidate_relations_to_delete(model._meta):
            if keep_parents and related.model in parents:
                continue
            field = related.field
            if field.remote_field.on_delete == DO_NOTHING:
                continue
            batches = self.get_del_batches(new_objs, field)
            for batch in batches:
                sub_objs = self.related_objects(related, batch)
                if self.can_fast_delete(sub_objs, from_field=field):
                    self.fast_deletes.append(sub_objs)
                elif sub_objs:
                    field.remote_field.on_delete(self, field, sub_objs, self.using)
        for field in model._meta.private_fields:
            if hasattr(field, 'bulk_related_objects'):
                sub_objs = field.bulk_related_objects(new_objs, self.using)
                self.collect(sub_objs, source=model, nullable=True)","def aggregate_related_deletions(self, objs, source=None, nullable=False, collect_related=True, source_attr=None, reverse_dependency=False, keep_parents=False):
    """"""
        Add 'objs' to the collection of objects to be deleted as well as all
        parent instances.  'objs' must be a homogeneous iterable collection of
        model instances (e.g. a QuerySet).  If 'collect_related' is True,
        related objects will be handled by their respective on_delete handler.

        If the call is the result of a cascade, 'source' should be the model
        that caused it and 'nullable' should be set to True, if the relation
        can be null.

        If 'reverse_dependency' is True, 'source' will be deleted before the
        current model, rather than after. (Needed for cascading to parent
        models, the one case in which the cascade follows the forwards
        direction of an FK rather than the reverse direction.)

        If 'keep_parents' is True, data of parent model's will be not deleted.
        """"""
    if self.can_fast_delete(objs):
        self.fast_deletes.append(objs)
        return
    new_objs = self.add(objs, source, nullable, reverse_dependency=reverse_dependency)
    if not new_objs:
        return
    model = new_objs[0].__class__
    if not keep_parents:
        concrete_model = model._meta.concrete_model
        for ptr in concrete_model._meta.parents.values():
            if ptr:
                parent_objs = [getattr(obj, ptr.name) for obj in new_objs]
                self.collect(parent_objs, source=model, source_attr=ptr.remote_field.related_name, collect_related=False, reverse_dependency=True)
    if collect_related:
        parents = model._meta.parents
        for related in get_candidate_relations_to_delete(model._meta):
            if keep_parents and related.model in parents:
                continue
            field = related.field
            if field.remote_field.on_delete == DO_NOTHING:
                continue
            batches = self.get_del_batches(new_objs, field)
            for batch in batches:
                sub_objs = self.related_objects(related, batch)
                if self.can_fast_delete(sub_objs, from_field=field):
                    self.fast_deletes.append(sub_objs)
                elif sub_objs:
                    field.remote_field.on_delete(self, field, sub_objs, self.using)
        for field in model._meta.private_fields:
            if hasattr(field, 'bulk_related_objects'):
                sub_objs = field.bulk_related_objects(new_objs, self.using)
                self.collect(sub_objs, source=model, nullable=True)","[{""var"": ""new_objs"", ""rename"": ""added_objects""}, {""var"": ""ptr"", ""rename"": ""parent_pointer""}, {""var"": ""concrete_model"", ""rename"": ""base_model_to_delete""}, {""var"": ""related"", ""rename"": ""relationship_to_handle""}, {""var"": ""field"", ""rename"": ""related_field_descriptor""}, {""var"": ""model"", ""rename"": ""model_class""}, {""var"": ""obj"", ""rename"": ""object_to_delete""}, {""var"": ""parent_objs"", ""rename"": ""parent_instance_objects""}, {""var"": ""batch"", ""rename"": ""object_batch""}, {""var"": ""parents"", ""rename"": ""parent_models""}, {""var"": ""sub_objs"", ""rename"": ""related_sub_objects""}, {""var"": ""batches"", ""rename"": ""deletion_batches""}]"
./django/db/models/deletion.py,related_objects,get_queryset_of_related_objects_via_relation,231,237,"def related_objects(self, related, objs):
    """"""
        Get a QuerySet of objects related to `objs` via the relation `related`.
        """"""
    return related.related_model._base_manager.using(self.using).filter(**{'%s__in' % related.field.name: objs})","def get_queryset_of_related_objects_via_relation(self, related, objs):
    """"""
        Get a QuerySet of objects related to `objs` via the relation `related`.
        """"""
    return related.related_model._base_manager.using(self.using).filter(**{'%s__in' % related.field.name: objs})",[]
./django/db/models/deletion.py,instances_with_model,yield_model_instance_pairs,239,242,"def instances_with_model(self):
    for model, instances in self.data.items():
        for obj in instances:
            yield (model, obj)","def yield_model_instance_pairs(self):
    for model, instances in self.data.items():
        for obj in instances:
            yield (model, obj)","[{""var"": ""model"", ""rename"": ""model_instance_pair""}, {""var"": ""instances"", ""rename"": ""model_instance_pairs""}, {""var"": ""obj"", ""rename"": ""instance_object""}]"
./django/db/models/deletion.py,sort,sort_models_by_dependencies,244,260,"def sort(self):
    sorted_models = []
    concrete_models = set()
    models = list(self.data)
    while len(sorted_models) < len(models):
        found = False
        for model in models:
            if model in sorted_models:
                continue
            dependencies = self.dependencies.get(model._meta.concrete_model)
            if not (dependencies and dependencies.difference(concrete_models)):
                sorted_models.append(model)
                concrete_models.add(model._meta.concrete_model)
                found = True
        if not found:
            return
    self.data = {model: self.data[model] for model in sorted_models}","def sort_models_by_dependencies(self):
    sorted_models = []
    concrete_models = set()
    models = list(self.data)
    while len(sorted_models) < len(models):
        found = False
        for model in models:
            if model in sorted_models:
                continue
            dependencies = self.dependencies.get(model._meta.concrete_model)
            if not (dependencies and dependencies.difference(concrete_models)):
                sorted_models.append(model)
                concrete_models.add(model._meta.concrete_model)
                found = True
        if not found:
            return
    self.data = {model: self.data[model] for model in sorted_models}","[{""var"": ""sorted_models"", ""rename"": ""ordered_model_list""}, {""var"": ""model"", ""rename"": ""data_model""}, {""var"": ""models"", ""rename"": ""unsorted_models_list""}, {""var"": ""dependencies"", ""rename"": ""model_prerequisites""}, {""var"": ""concrete_models"", ""rename"": ""registered_concrete_models""}, {""var"": ""found"", ""rename"": ""model_added_to_sorted_list""}]"
