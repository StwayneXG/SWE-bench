file,method_name,new_method_name,start_line,end_line,original_code,code,var
./xarray/core/dataset.py,quantile,compute_quantiles_across_dimensions,4694,4790,"def quantile(self, q, dim=None, interpolation='linear', numeric_only=False, keep_attrs=None):
    """"""Compute the qth quantile of the data along the specified dimension.

        Returns the qth quantiles(s) of the array elements for each variable
        in the Dataset.

        Parameters
        ----------
        q : float in range of [0,1] or array-like of floats
            Quantile to compute, which must be between 0 and 1 inclusive.
        dim : str or sequence of str, optional
            Dimension(s) over which to apply quantile.
        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}
            This optional parameter specifies the interpolation method to
            use when the desired quantile lies between two data points
            ``i < j``:

                * linear: ``i + (j - i) * fraction``, where ``fraction`` is
                  the fractional part of the index surrounded by ``i`` and
                  ``j``.
                * lower: ``i``.
                * higher: ``j``.
                * nearest: ``i`` or ``j``, whichever is nearest.
                * midpoint: ``(i + j) / 2``.
        keep_attrs : bool, optional
            If True, the dataset's attributes (`attrs`) will be copied from
            the original object to the new one.  If False (default), the new
            object will be returned without attributes.
        numeric_only : bool, optional
            If True, only apply ``func`` to variables with a numeric dtype.

        Returns
        -------
        quantiles : Dataset
            If `q` is a single quantile, then the result is a scalar for each
            variable in data_vars. If multiple percentiles are given, first
            axis of the result corresponds to the quantile and a quantile
            dimension is added to the return Dataset. The other dimensions are
            the dimensions that remain after the reduction of the array.

        See Also
        --------
        numpy.nanpercentile, pandas.Series.quantile, DataArray.quantile
        """"""
    if isinstance(dim, str):
        dims = {dim}
    elif dim is None:
        dims = set(self.dims)
    else:
        dims = set(dim)
    _assert_empty([d for d in dims if d not in self.dims], 'Dataset does not contain the dimensions: %s')
    q = np.asarray(q, dtype=np.float64)
    variables = OrderedDict()
    for name, var in self.variables.items():
        reduce_dims = [d for d in var.dims if d in dims]
        if reduce_dims or not var.dims:
            if name not in self.coords:
                if not numeric_only or np.issubdtype(var.dtype, np.number) or var.dtype == np.bool_:
                    if len(reduce_dims) == var.ndim:
                        reduce_dims = None
                    variables[name] = var.quantile(q, dim=reduce_dims, interpolation=interpolation)
        else:
            variables[name] = var
    coord_names = {k for k in self.coords if k in variables}
    indexes = OrderedDict(((k, v) for k, v in self.indexes.items() if k in variables))
    if keep_attrs is None:
        keep_attrs = _get_keep_attrs(default=False)
    attrs = self.attrs if keep_attrs else None
    new = self._replace_with_new_dims(variables, coord_names=coord_names, attrs=attrs, indexes=indexes)
    if 'quantile' in new.dims:
        new.coords['quantile'] = Variable('quantile', q)
    else:
        new.coords['quantile'] = q
    return new","def compute_quantiles_across_dimensions(self, q, dim=None, interpolation='linear', numeric_only=False, keep_attrs=None):
    """"""Compute the qth quantile of the data along the specified dimension.

        Returns the qth quantiles(s) of the array elements for each variable
        in the Dataset.

        Parameters
        ----------
        q : float in range of [0,1] or array-like of floats
            Quantile to compute, which must be between 0 and 1 inclusive.
        dim : str or sequence of str, optional
            Dimension(s) over which to apply quantile.
        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}
            This optional parameter specifies the interpolation method to
            use when the desired quantile lies between two data points
            ``i < j``:

                * linear: ``i + (j - i) * fraction``, where ``fraction`` is
                  the fractional part of the index surrounded by ``i`` and
                  ``j``.
                * lower: ``i``.
                * higher: ``j``.
                * nearest: ``i`` or ``j``, whichever is nearest.
                * midpoint: ``(i + j) / 2``.
        keep_attrs : bool, optional
            If True, the dataset's attributes (`attrs`) will be copied from
            the original object to the new one.  If False (default), the new
            object will be returned without attributes.
        numeric_only : bool, optional
            If True, only apply ``func`` to variables with a numeric dtype.

        Returns
        -------
        quantiles : Dataset
            If `q` is a single quantile, then the result is a scalar for each
            variable in data_vars. If multiple percentiles are given, first
            axis of the result corresponds to the quantile and a quantile
            dimension is added to the return Dataset. The other dimensions are
            the dimensions that remain after the reduction of the array.

        See Also
        --------
        numpy.nanpercentile, pandas.Series.quantile, DataArray.quantile
        """"""
    if isinstance(dim, str):
        dims = {dim}
    elif dim is None:
        dims = set(self.dims)
    else:
        dims = set(dim)
    _assert_empty([d for d in dims if d not in self.dims], 'Dataset does not contain the dimensions: %s')
    q = np.asarray(q, dtype=np.float64)
    variables = OrderedDict()
    for name, var in self.variables.items():
        reduce_dims = [d for d in var.dims if d in dims]
        if reduce_dims or not var.dims:
            if name not in self.coords:
                if not numeric_only or np.issubdtype(var.dtype, np.number) or var.dtype == np.bool_:
                    if len(reduce_dims) == var.ndim:
                        reduce_dims = None
                    variables[name] = var.quantile(q, dim=reduce_dims, interpolation=interpolation)
        else:
            variables[name] = var
    coord_names = {k for k in self.coords if k in variables}
    indexes = OrderedDict(((k, v) for k, v in self.indexes.items() if k in variables))
    if keep_attrs is None:
        keep_attrs = _get_keep_attrs(default=False)
    attrs = self.attrs if keep_attrs else None
    new = self._replace_with_new_dims(variables, coord_names=coord_names, attrs=attrs, indexes=indexes)
    if 'quantile' in new.dims:
        new.coords['quantile'] = Variable('quantile', q)
    else:
        new.coords['quantile'] = q
    return new","[{""var"": ""reduce_dims"", ""rename"": ""target_dims_for_reduction""}, {""var"": ""name"", ""rename"": ""variable_name""}, {""var"": ""k"", ""rename"": ""coordinate_names""}, {""var"": ""indexes"", ""rename"": ""filtered_indexes""}, {""var"": ""var"", ""rename"": ""dataset_variable""}, {""var"": ""variables"", ""rename"": ""quantile_results""}, {""var"": ""dims"", ""rename"": ""selected_dimensions""}, {""var"": ""v"", ""rename"": ""quantile_variables""}, {""var"": ""new"", ""rename"": ""quantile_result_dataset""}, {""var"": ""attrs"", ""rename"": ""preserved_attributes""}, {""var"": ""d"", ""rename"": ""dataset_dimension""}, {""var"": ""coord_names"", ""rename"": ""coordinate_variable_names""}]"
./xarray/core/variable.py,quantile,compute_quantile,1595,1661,"def quantile(self, q, dim=None, interpolation='linear'):
    """"""Compute the qth quantile of the data along the specified dimension.

        Returns the qth quantiles(s) of the array elements.

        Parameters
        ----------
        q : float in range of [0,1] (or sequence of floats)
            Quantile to compute, which must be between 0 and 1
            inclusive.
        dim : str or sequence of str, optional
            Dimension(s) over which to apply quantile.
        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}
            This optional parameter specifies the interpolation method to
            use when the desired quantile lies between two data points
            ``i < j``:
                * linear: ``i + (j - i) * fraction``, where ``fraction`` is
                  the fractional part of the index surrounded by ``i`` and
                  ``j``.
                * lower: ``i``.
                * higher: ``j``.
                * nearest: ``i`` or ``j``, whichever is nearest.
                * midpoint: ``(i + j) / 2``.

        Returns
        -------
        quantiles : Variable
            If `q` is a single quantile, then the result
            is a scalar. If multiple percentiles are given, first axis of
            the result corresponds to the quantile and a quantile dimension
            is added to the return array. The other dimensions are the
             dimensions that remain after the reduction of the array.

        See Also
        --------
        numpy.nanpercentile, pandas.Series.quantile, Dataset.quantile,
        DataArray.quantile
        """"""
    if isinstance(self.data, dask_array_type):
        raise TypeError('quantile does not work for arrays stored as dask arrays. Load the data via .compute() or .load() prior to calling this method.')
    q = np.asarray(q, dtype=np.float64)
    new_dims = list(self.dims)
    if dim is not None:
        axis = self.get_axis_num(dim)
        if utils.is_scalar(dim):
            new_dims.remove(dim)
        else:
            for d in dim:
                new_dims.remove(d)
    else:
        axis = None
        new_dims = []
    if q.ndim != 0:
        new_dims = ['quantile'] + new_dims
    qs = np.nanpercentile(self.data, q * 100.0, axis=axis, interpolation=interpolation)
    return Variable(new_dims, qs)","def compute_quantile(self, q, dim=None, interpolation='linear'):
    """"""Compute the qth quantile of the data along the specified dimension.

        Returns the qth quantiles(s) of the array elements.

        Parameters
        ----------
        q : float in range of [0,1] (or sequence of floats)
            Quantile to compute, which must be between 0 and 1
            inclusive.
        dim : str or sequence of str, optional
            Dimension(s) over which to apply quantile.
        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}
            This optional parameter specifies the interpolation method to
            use when the desired quantile lies between two data points
            ``i < j``:
                * linear: ``i + (j - i) * fraction``, where ``fraction`` is
                  the fractional part of the index surrounded by ``i`` and
                  ``j``.
                * lower: ``i``.
                * higher: ``j``.
                * nearest: ``i`` or ``j``, whichever is nearest.
                * midpoint: ``(i + j) / 2``.

        Returns
        -------
        quantiles : Variable
            If `q` is a single quantile, then the result
            is a scalar. If multiple percentiles are given, first axis of
            the result corresponds to the quantile and a quantile dimension
            is added to the return array. The other dimensions are the
             dimensions that remain after the reduction of the array.

        See Also
        --------
        numpy.nanpercentile, pandas.Series.quantile, Dataset.quantile,
        DataArray.quantile
        """"""
    if isinstance(self.data, dask_array_type):
        raise TypeError('quantile does not work for arrays stored as dask arrays. Load the data via .compute() or .load() prior to calling this method.')
    q = np.asarray(q, dtype=np.float64)
    new_dims = list(self.dims)
    if dim is not None:
        axis = self.get_axis_num(dim)
        if utils.is_scalar(dim):
            new_dims.remove(dim)
        else:
            for d in dim:
                new_dims.remove(d)
    else:
        axis = None
        new_dims = []
    if q.ndim != 0:
        new_dims = ['quantile'] + new_dims
    qs = np.nanpercentile(self.data, q * 100.0, axis=axis, interpolation=interpolation)
    return Variable(new_dims, qs)","[{""var"": ""axis"", ""rename"": ""dimension_axis""}, {""var"": ""new_dims"", ""rename"": ""updated_dimensions""}, {""var"": ""d"", ""rename"": ""dimension_to_remove""}, {""var"": ""qs"", ""rename"": ""quantile_values""}]"
./xarray/core/variable.py,rank,compute_rank_with_nan_support,1663,1710,"def rank(self, dim, pct=False):
    """"""Ranks the data.

        Equal values are assigned a rank that is the average of the ranks that
        would have been otherwise assigned to all of the values within that
        set.  Ranks begin at 1, not 0. If `pct`, computes percentage ranks.

        NaNs in the input array are returned as NaNs.

        The `bottleneck` library is required.

        Parameters
        ----------
        dim : str
            Dimension over which to compute rank.
        pct : bool, optional
            If True, compute percentage ranks, otherwise compute integer ranks.

        Returns
        -------
        ranked : Variable

        See Also
        --------
        Dataset.rank, DataArray.rank
        """"""
    import bottleneck as bn
    data = self.data
    if isinstance(data, dask_array_type):
        raise TypeError('rank does not work for arrays stored as dask arrays. Load the data via .compute() or .load() prior to calling this method.')
    elif not isinstance(data, np.ndarray):
        raise TypeError('rank is not implemented for {} objects.'.format(type(data)))
    axis = self.get_axis_num(dim)
    func = bn.nanrankdata if self.dtype.kind == 'f' else bn.rankdata
    ranked = func(data, axis=axis)
    if pct:
        count = np.sum(~np.isnan(data), axis=axis, keepdims=True)
        ranked /= count
    return Variable(self.dims, ranked)","def compute_rank_with_nan_support(self, dim, pct=False):
    """"""Ranks the data.

        Equal values are assigned a rank that is the average of the ranks that
        would have been otherwise assigned to all of the values within that
        set.  Ranks begin at 1, not 0. If `pct`, computes percentage ranks.

        NaNs in the input array are returned as NaNs.

        The `bottleneck` library is required.

        Parameters
        ----------
        dim : str
            Dimension over which to compute rank.
        pct : bool, optional
            If True, compute percentage ranks, otherwise compute integer ranks.

        Returns
        -------
        ranked : Variable

        See Also
        --------
        Dataset.rank, DataArray.rank
        """"""
    import bottleneck as bn
    data = self.data
    if isinstance(data, dask_array_type):
        raise TypeError('rank does not work for arrays stored as dask arrays. Load the data via .compute() or .load() prior to calling this method.')
    elif not isinstance(data, np.ndarray):
        raise TypeError('rank is not implemented for {} objects.'.format(type(data)))
    axis = self.get_axis_num(dim)
    func = bn.nanrankdata if self.dtype.kind == 'f' else bn.rankdata
    ranked = func(data, axis=axis)
    if pct:
        count = np.sum(~np.isnan(data), axis=axis, keepdims=True)
        ranked /= count
    return Variable(self.dims, ranked)","[{""var"": ""count"", ""rename"": ""valid_data_count""}, {""var"": ""data"", ""rename"": ""input_array_data""}, {""var"": ""axis"", ""rename"": ""ranking_axis_index""}, {""var"": ""func"", ""rename"": ""rank_function""}, {""var"": ""ranked"", ""rename"": ""computed_ranks""}]"
