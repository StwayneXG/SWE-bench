file,method_name,new_method_name,start_line,end_line,original_code,code,var
./sympy/core/numbers.py,__new__,create_rational_instance,1589,1665,"@cacheit
def __new__(cls, p, q=None, gcd=None):
    if q is None:
        if isinstance(p, Rational):
            return p
        if isinstance(p, SYMPY_INTS):
            pass
        else:
            if isinstance(p, (float, Float)):
                return Rational(*_as_integer_ratio(p))
            if not isinstance(p, str):
                try:
                    p = sympify(p)
                except (SympifyError, SyntaxError):
                    pass
            else:
                if p.count('/') > 1:
                    raise TypeError('invalid input: %s' % p)
                p = p.replace(' ', '')
                pq = p.rsplit('/', 1)
                if len(pq) == 2:
                    p, q = pq
                    fp = fractions.Fraction(p)
                    fq = fractions.Fraction(q)
                    p = fp / fq
                try:
                    p = fractions.Fraction(p)
                except ValueError:
                    pass
                else:
                    return Rational(p.numerator, p.denominator, 1)
            if not isinstance(p, Rational):
                raise TypeError('invalid input: %s' % p)
        q = 1
        gcd = 1
    if not isinstance(p, SYMPY_INTS):
        p = Rational(p)
        q *= p.q
        p = p.p
    else:
        p = int(p)
    if not isinstance(q, SYMPY_INTS):
        q = Rational(q)
        p *= q.q
        q = q.p
    else:
        q = int(q)
    if q == 0:
        if p == 0:
            if _errdict['divide']:
                raise ValueError('Indeterminate 0/0')
            else:
                return S.NaN
        return S.ComplexInfinity
    if q < 0:
        q = -q
        p = -p
    if not gcd:
        gcd = igcd(abs(p), q)
    if gcd > 1:
        p //= gcd
        q //= gcd
    if q == 1:
        return Integer(p)
    if p == 1 and q == 2:
        return S.Half
    obj = Expr.__new__(cls)
    obj.p = p
    obj.q = q
    return obj","@cacheit
def create_rational_instance(cls, p, q=None, gcd=None):
    if q is None:
        if isinstance(p, Rational):
            return p
        if isinstance(p, SYMPY_INTS):
            pass
        else:
            if isinstance(p, (float, Float)):
                return Rational(*_as_integer_ratio(p))
            if not isinstance(p, str):
                try:
                    p = sympify(p)
                except (SympifyError, SyntaxError):
                    pass
            else:
                if p.count('/') > 1:
                    raise TypeError('invalid input: %s' % p)
                p = p.replace(' ', '')
                pq = p.rsplit('/', 1)
                if len(pq) == 2:
                    p, q = pq
                    fp = fractions.Fraction(p)
                    fq = fractions.Fraction(q)
                    p = fp / fq
                try:
                    p = fractions.Fraction(p)
                except ValueError:
                    pass
                else:
                    return Rational(p.numerator, p.denominator, 1)
            if not isinstance(p, Rational):
                raise TypeError('invalid input: %s' % p)
        q = 1
        gcd = 1
    if not isinstance(p, SYMPY_INTS):
        p = Rational(p)
        q *= p.q
        p = p.p
    else:
        p = int(p)
    if not isinstance(q, SYMPY_INTS):
        q = Rational(q)
        p *= q.q
        q = q.p
    else:
        q = int(q)
    if q == 0:
        if p == 0:
            if _errdict['divide']:
                raise ValueError('Indeterminate 0/0')
            else:
                return S.NaN
        return S.ComplexInfinity
    if q < 0:
        q = -q
        p = -p
    if not gcd:
        gcd = igcd(abs(p), q)
    if gcd > 1:
        p //= gcd
        q //= gcd
    if q == 1:
        return Integer(p)
    if p == 1 and q == 2:
        return S.Half
    obj = Expr.__new__(cls)
    obj.p = p
    obj.q = q
    return obj","[{""var"": ""fp"", ""rename"": ""fractionP""}, {""var"": ""pq"", ""rename"": ""fraction_parts""}, {""var"": ""fq"", ""rename"": ""fractionalDenominator""}, {""var"": ""obj"", ""rename"": ""rational_expression_instance""}]"
