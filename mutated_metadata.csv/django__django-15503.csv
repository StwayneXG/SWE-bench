file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/db/models/fields/json.py,as_sql,generate_json_path_sql,175,206,"def as_sql(self, compiler, connection, template=None):
    if isinstance(self.lhs, KeyTransform):
        lhs, lhs_params, lhs_key_transforms = self.lhs.preprocess_lhs(compiler, connection)
        lhs_json_path = compile_json_path(lhs_key_transforms)
    else:
        lhs, lhs_params = self.process_lhs(compiler, connection)
        lhs_json_path = '$'
    sql = template % lhs
    rhs = self.rhs
    rhs_params = []
    if not isinstance(rhs, (list, tuple)):
        rhs = [rhs]
    for key in rhs:
        if isinstance(key, KeyTransform):
            *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)
        else:
            rhs_key_transforms = [key]
        rhs_params.append('%s%s' % (lhs_json_path, compile_json_path(rhs_key_transforms, include_root=False)))
    if self.logical_operator:
        sql = '(%s)' % self.logical_operator.join([sql] * len(rhs_params))
    return (sql, tuple(lhs_params) + tuple(rhs_params))","def generate_json_path_sql(self, compiler, connection, template=None):
    if isinstance(self.lhs, KeyTransform):
        lhs, lhs_params, lhs_key_transforms = self.lhs.preprocess_lhs(compiler, connection)
        lhs_json_path = compile_json_path(lhs_key_transforms)
    else:
        lhs, lhs_params = self.process_lhs(compiler, connection)
        lhs_json_path = '$'
    sql = template % lhs
    rhs = self.rhs
    rhs_params = []
    if not isinstance(rhs, (list, tuple)):
        rhs = [rhs]
    for key in rhs:
        if isinstance(key, KeyTransform):
            *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)
        else:
            rhs_key_transforms = [key]
        rhs_params.append('%s%s' % (lhs_json_path, compile_json_path(rhs_key_transforms, include_root=False)))
    if self.logical_operator:
        sql = '(%s)' % self.logical_operator.join([sql] * len(rhs_params))
    return (sql, tuple(lhs_params) + tuple(rhs_params))","[{""var"": ""rhs_params"", ""rename"": ""rhs_json_paths""}, {""var"": ""rhs"", ""rename"": ""right_hand_side_values""}, {""var"": ""key"", ""rename"": ""json_path_key""}, {""var"": ""rhs_key_transforms"", ""rename"": ""rhs_json_keys_transforms""}, {""var"": ""lhs_key_transforms"", ""rename"": ""lhs_json_path_keys""}, {""var"": ""_"", ""rename"": ""ignored_values""}, {""var"": ""lhs"", ""rename"": ""left_hand_side_expression""}, {""var"": ""lhs_json_path"", ""rename"": ""lhs_json_path_expression""}, {""var"": ""lhs_params"", ""rename"": ""left_hand_side_parameters""}, {""var"": ""sql"", ""rename"": ""structured_query_statement""}]"
./django/db/models/fields/json.py,as_oracle,generate_sql_with_null_check,389,398,"def as_oracle(self, compiler, connection):
    sql, params = HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)
    if not self.rhs:
        return (sql, params)
    lhs, lhs_params, _ = self.lhs.preprocess_lhs(compiler, connection)
    return ('(NOT %s OR %s IS NULL)' % (sql, lhs), tuple(params) + tuple(lhs_params))","def generate_sql_with_null_check(self, compiler, connection):
    sql, params = HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)
    if not self.rhs:
        return (sql, params)
    lhs, lhs_params, _ = self.lhs.preprocess_lhs(compiler, connection)
    return ('(NOT %s OR %s IS NULL)' % (sql, lhs), tuple(params) + tuple(lhs_params))","[{""var"": ""params"", ""rename"": ""query_parameters""}, {""var"": ""_"", ""rename"": ""oracle_query_logic""}, {""var"": ""lhs"", ""rename"": ""left_hand_side_expression""}, {""var"": ""lhs_params"", ""rename"": ""left_hand_side_parameters""}, {""var"": ""sql"", ""rename"": ""oracle_query_sql""}]"
./django/db/models/fields/json.py,as_oracle,handle_null_key_as_oracle,465,477,"def as_oracle(self, compiler, connection):
    rhs, rhs_params = super().process_rhs(compiler, connection)
    if rhs_params == ['null']:
        has_key_expr = HasKey(self.lhs.lhs, self.lhs.key_name)
        has_key_sql, has_key_params = has_key_expr.as_oracle(compiler, connection)
        is_null_expr = self.lhs.get_lookup('isnull')(self.lhs, True)
        is_null_sql, is_null_params = is_null_expr.as_sql(compiler, connection)
        return ('%s AND %s' % (has_key_sql, is_null_sql), tuple(has_key_params) + tuple(is_null_params))
    return super().as_sql(compiler, connection)","def handle_null_key_as_oracle(self, compiler, connection):
    rhs, rhs_params = super().process_rhs(compiler, connection)
    if rhs_params == ['null']:
        has_key_expr = HasKey(self.lhs.lhs, self.lhs.key_name)
        has_key_sql, has_key_params = has_key_expr.as_oracle(compiler, connection)
        is_null_expr = self.lhs.get_lookup('isnull')(self.lhs, True)
        is_null_sql, is_null_params = is_null_expr.as_sql(compiler, connection)
        return ('%s AND %s' % (has_key_sql, is_null_sql), tuple(has_key_params) + tuple(is_null_params))
    return super().as_sql(compiler, connection)","[{""var"": ""rhs_params"", ""rename"": ""right_hand_side_parameters""}, {""var"": ""rhs"", ""rename"": ""right_hand_side_sql""}, {""var"": ""has_key_params"", ""rename"": ""key_existence_parameters""}, {""var"": ""has_key_sql"", ""rename"": ""has_key_statement_sql""}, {""var"": ""has_key_expr"", ""rename"": ""key_existence_check_expr""}, {""var"": ""is_null_expr"", ""rename"": ""check_isnull_condition""}, {""var"": ""is_null_params"", ""rename"": ""is_null_condition_params""}, {""var"": ""is_null_sql"", ""rename"": ""sql_check_is_null_condition""}]"
