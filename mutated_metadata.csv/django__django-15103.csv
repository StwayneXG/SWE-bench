file,method_name,new_method_name,start_line,end_line,original_code,code,var
./django/template/defaultfilters.py,json_script,encode_and_embed_json_in_script_tag,86,91,"@register.filter(is_safe=True)
def json_script(value, element_id):
    """"""
    Output value JSON-encoded, wrapped in a <script type=""application/json"">
    tag.
    """"""
    return _json_script(value, element_id)","@register.filter(is_safe=True)
def encode_and_embed_json_in_script_tag(value, element_id):
    """"""
    Output value JSON-encoded, wrapped in a <script type=""application/json"">
    tag.
    """"""
    return _json_script(value, element_id)",[]
./django/utils/html.py,json_script,generate_json_script_tag,64,75,"def json_script(value, element_id):
    """"""
    Escape all the HTML/XML special characters with their unicode escapes, so
    value is safe to be output anywhere except for inside a tag attribute. Wrap
    the escaped JSON in a script tag.
    """"""
    from django.core.serializers.json import DjangoJSONEncoder
    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)
    return format_html('<script id=""{}"" type=""application/json"">{}</script>', element_id, mark_safe(json_str))","def generate_json_script_tag(value, element_id):
    """"""
    Escape all the HTML/XML special characters with their unicode escapes, so
    value is safe to be output anywhere except for inside a tag attribute. Wrap
    the escaped JSON in a script tag.
    """"""
    from django.core.serializers.json import DjangoJSONEncoder
    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)
    return format_html('<script id=""{}"" type=""application/json"">{}</script>', element_id, mark_safe(json_str))","[{""var"": ""json_str"", ""rename"": ""escaped_json_script_content""}]"
./django/utils/html.py,conditional_escape,escape_unless_pre_escaped,78,90,"def conditional_escape(text):
    """"""
    Similar to escape(), except that it doesn't operate on pre-escaped strings.

    This function relies on the __html__ convention used both by Django's
    SafeData class and by third-party libraries like markupsafe.
    """"""
    if isinstance(text, Promise):
        text = str(text)
    if hasattr(text, '__html__'):
        return text.__html__()
    else:
        return escape(text)","def escape_unless_pre_escaped(text):
    """"""
    Similar to escape(), except that it doesn't operate on pre-escaped strings.

    This function relies on the __html__ convention used both by Django's
    SafeData class and by third-party libraries like markupsafe.
    """"""
    if isinstance(text, Promise):
        text = str(text)
    if hasattr(text, '__html__'):
        return text.__html__()
    else:
        return escape(text)",[]
