file,method_name,new_method_name,start_line,end_line,original_code,code,var
./astropy/utils/misc.py,__init__,inherit_docstrings_in_class_methods,523,540,"def __init__(cls, name, bases, dct):

    def is_public_member(key):
        return key.startswith('__') and key.endswith('__') and (len(key) > 4) or not key.startswith('_')
    for key, val in dct.items():
        if inspect.isfunction(val) and is_public_member(key) and (val.__doc__ is None):
            for base in cls.__mro__[1:]:
                super_method = getattr(base, key, None)
                if super_method is not None:
                    val.__doc__ = super_method.__doc__
                    break
    super().__init__(name, bases, dct)","def inherit_docstrings_in_class_methods(cls, name, bases, dct):

    def is_public_member(key):
        return key.startswith('__') and key.endswith('__') and (len(key) > 4) or not key.startswith('_')
    for key, val in dct.items():
        if inspect.isfunction(val) and is_public_member(key) and (val.__doc__ is None):
            for base in cls.__mro__[1:]:
                super_method = getattr(base, key, None)
                if super_method is not None:
                    val.__doc__ = super_method.__doc__
                    break
    super().__init__(name, bases, dct)","[{""var"": ""val"", ""rename"": ""method_candidate""}, {""var"": ""super_method"", ""rename"": ""inherited_method""}, {""var"": ""base"", ""rename"": ""ancestor_class""}]"
./astropy/utils/misc.py,is_public_member,determines_visibility_of_member,524,528,"def is_public_member(key):
    return key.startswith('__') and key.endswith('__') and (len(key) > 4) or not key.startswith('_')","def determines_visibility_of_member(key):
    return key.startswith('__') and key.endswith('__') and (len(key) > 4) or not key.startswith('_')",[]
